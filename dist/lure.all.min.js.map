{"version":3,"sources":["lure.all.js","lure.core.js","lure.content.js","lure.basic.js","lure.chart.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_typeof","Symbol","iterator","obj","constructor","prototype","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","Date","format","Lure","_DateFormat","this","LureClass","Plugin","$this","Debug","isEditableEventsEnabled","regexEach","RegExp","regexIfOuter","regexIfInner","regexExpressions","regexEditable","spaces","preCompileIfOuter","s","replace","bkt","condition","expression","preParseObjectChecker","preCompileIfInner","preCompileEach","EachList","match","lvl","current","isInnerEach","StartPoint","indexOf","EndPoint","prevStarts","slice","prevEnds","string_Each","ObjectName","a","name","eachComplied","repeat","preParse","preCompileEditable","editable","content","b","checking","c","containsSpecialObject","containsSpecialObjectTreeBuiler","isSpecialSymbol","isString","isIterator","isNumber","isNaN","parent","isCheckExpression","arguments","undefined","Compile","DomString","isListElement","string_Function","val","function_f","Function","e","console","info","error","_EditablesEventListenerRun","AddEventListenerGlobal","Editable","RemoveEdits","AddEdits","currentTarget","closest","value","valPrev","parentElement","dataset","classList","add","remove","keyCode","Save","EditableElement","querySelector","isHasEditablesEventsEnabled","document","addEventListener","contains","querySelectorAll","CreateElementFromString","string","ownerTagName","frag","createDocumentFragment","elem","createElement","innerHTML","childNodes","appendChild","CreateElementsFromString","nodes","push","Select","query","Node","SelectAll","Selector","tagName","eventName","selector","handler","thisArg","isIt","event","_EventClone","elems","call","isVisible","HTMLElement","isVisibleSelf","element","ContentStyle","window","getComputedStyle","display","opacity","visibility","parseInt","minWidth","width","minHeight","height","isVisibleParent","ClonedEvent","clone","p","d","getOwnPropertyDescriptor","get","set","setPrototypeOf","GetFileText","url","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","Error","statusText","location","protocol","host","href","substring","lastIndexOf","log","open","send","GetTextWidth","txt","fontname","fontsize","ctx","getContext","font","measureText","GetInlineSize","fontSize","hiddenStyle","k","style","all","setAttribute","body","sizes","clientWidth","clientHeight","removeChild","GetInlineSize1","pp","performance","now","xx","ps","innerText","getPropertyValue","Perf","isNumeric","n","parseFloat","isFinite","date","data","getDate","mo","getMonth","year","getFullYear","hour","getHours","min","getMinutes","sec","getSeconds","toString","Culture","MonthNames","EditMode","RemoveWaiting","waiedites","forEach","item","editables","_innerHTML","ValuePrev","SaveButton","string_Select","SelectData","eval","Property","SelectOptions","attributes","EditType","focus","select","ValueNew","Content","Controller","MonsieurController","DataObject","Data","ErrorHint","LineSave","Settings","DialogBlur","DialogAnimation","EditableClass","EditableWaiting","MonthNamesShort","WeekDays","WeekDaysShort","TemplatorList","ContentList","_DialogCount","perfStart","text","x","Math","floor","Caption","Message","_ref","_ref$CaptionColor","CaptionColor","_ref$CaptionBackgroun","CaptionBackground","_ref$OnAgree","OnAgree","_ref$OnCancel","OnCancel","activeElement","blur","dialog","title","color","background","msg","buttons","btnOk","onclick","wrap","getElementsByClassName","btnCancel","Confirm","object","div","position","animate","duration","setTimeout","onfinish","Diagnostics","LurePerf","enabled","Started","Stepped","Reset","Elapsed","v","toFixed","step","Version","LureContent","_ref2","MakeContent","Array","isArray","group","matche","Target","construct","Type","Name","AllContents","Refresh","bind","GetParent","stringName","Parent","GetContent","found","searcher","isContent","GetIndex","children","AddEventListener","func","AddTutor","buttonTutorStarter","MonsieurTutor","_SortBy","f","sort","_Sorting","Sorted","kf","hasOwnProperty","_FilterBy","filters","_d","_Filter","_DataDefault","_loop","Filter","filter","toLowerCase","_sorter","_Data","PageSize","_PageSize","_PageCursor","_Rebuilder","mr","PerformanceNow","Props","GetSet","Methods","Show","isActive","Control","Active","transitionDuration","durationAni","animationDuration","Hide","Dialog","DialogWrapper","zIndexWrapper","zIndex","zIndexContent","Number","BeforeShow","Shower","clearTimeout","__private","ToggleTimer","Disactive","Hider","Toggle","OnClick","SubContent","cname","TitleContent","Title","Visible","isController","isHasEditable","Sorting","_loop2","Filtering","_loop3","from","AfterBuild","_ref2$Target","_ref2$Content","_ref2$CSS","CSS","_ref2$Name","_ref2$Global","Global","_ref2$Title","_ref2$Type","_ref2$Visible","_ref2$SubContent","_ref2$Dialog","_ref2$DialogWrapper","_ref2$DialogBlur","_ref2$DialogAnimation","_ref2$Show","_ref2$Hide","_ref2$Shower","_ref2$Hider","_ref2$BeforeShow","_ref2$Refresh","_ref2$Sorting","_ref2$Filtering","_ref2$OnClick","_ref2$Controller","_ref2$Control","_ref2$Props","_ref2$Methods","_ref2$GetSet","_ref2$AfterBuild","_ref2$Disabled","Disabled","_ref2$Parent","then","node","RefreshOne","removeData","Remove","itemData","extraclass","isPrepend","addData","Add","index","Edit","t","Items","LureControl","control","owner","_this","controls","_loop4","random","substr","_Content","isGlobal","OnChange","onchange","type","Templator","_ref3","_ref3$Target","_ref3$Data","_ref3$ListElement","ListElement","_ref3$EmptyMessage","EmptyMessage","_ref3$EmptyHide","EmptyHide","_ref3$PageSize","_ref3$DataCount","DataCount","_ref3$PageGet","PageGet","_ref3$ShowAllButton","ShowAllButton","_ref3$LineSave","line","property","newValue","callback","_ref3$LineAdd","LineAdd","dataObject","_ref3$EditModeSwitch","EditModeSwitch","_ref3$NoAnimation","DataSaveAll","NoAnimation","_ref3$NoBuild","NoBuild","_ref3$BeforeBuild","BeforeBuild","_ref3$AfterBuild","_ref3$AfterAdd","AfterAdd","_ref3$Parent","_DataCount","_PageGet","isShowAllButton","isNoAnimaton","isEmptyHide","Dictionary","_Dictionary","Refresher","j","fields","isAttribute","NewValue","BuildValue","split","lines","NextCount","Limit","paginator","tag","empty","_LineBuilder","also","showAll","isTable","colspan","btnNext","BuildWithIt","Build","btnNextAll","FieldAdd","elemAttributes","WhatFields","PageCursor","newItem","itemOld","parentNode","replaceChild","fragment","unshift","prepend","splice","SwitchToEditMode","isListElementCssSelector","outerHTML","list_element","list_elementClassed","pos","checked","click","AllChildren","TreeBuilder","_ref4","_ref4$Target","_ref4$Data","_ref4$ListElement","_ref4$Drop","Drop","_ref4$SubSelector","SubSelector","_ref4$SubSelectorHand","SubSelectorHandler","_ref4$BeforeBuild","_ref4$AfterBuild","_ref4$Parent","SubTreeClass","Lvl","Branch","html","entag","LineBuilder","Index","BuildElement","indexJ","extra","$lvl","$key","$index","$j","ObjItem","sub","Tutor","TargetButton","TargetContent","MT","ContentBG","_Description","_Step","_ButtonNext","_ButtonStop","ButtonNextText","TutorPosition","temp","ColorTransparent","backgroundColor","ElemCssRestore","Element","outline","nElements","ElemCssSet","Run","desc","GoStep","Stop","ElementDesc","ElemParent","posX","offsetLeft","posY","offsetTop","innerWidth","documentElement","scrollTop","innerHeight","offsetHeight","left","top","Load","MonsieurLoading","_ref5","_ref5$Target","cx","cy","_DoArc","radius","maxAngle","angle","rad","PI","cos","y","sin","svg","Timeout","TimeoutHide","Tooltip","MonsieurTooltip","_ref6","_ref6$Target","_ref6$Attribute","Attribute","_ref6$Delay","Delay","_ref6$Time","Time","_ref6$Custom","Cursor","Custom","_ref6$AfterBuild","ToolTip","Timer","Destr","Chart","Core","LureChart","Buffer","SeriesBar","Init","Series","Block","Legend","AxisY","AxisX","Builder","ScaleY","Grid","MakeGrid","MakeAxisY","Options","Svg","chart","__GetSvgCasual","__GetSvgPie","Height","LastRender","Width","dash","getTotalLength","strokeDasharray","strokeDashoffset","_ref7","_ref7$Type","_ref7$Title","_ref7$Labels","Labels","Rotation","_ref7$Grid","_ref7$Series","_ref7$Tooltip","Template","_ref7$AxisY","Scale","SeriesOptions","ColorsDefault","TemplateDefault","Line","Pie","Count","isGraph","Abscissa","SeriesPoints","SeriesCount","Bar","Ring","ParametersAxisX","_Series","Font","Family","Size","BarStack","BarGradient","PieStack","PieType","Padding","_Legend","_AxisX","_AxisY","_ChartArea","_Grid","_Svg","ChartArea","labels","AxisXParams","MarginLeft","Angle","MarginTop","borderTop","Make3Legend","Serie","Color","_ScaleY","Scales","AxisYStyle","accum","Dict","scale","caption","MakeAxisX","GetGrid","MakeGraph","serie","mm","MinMax","DataOrdinata","GetOrdinata","DataAbscissa","GetAbscissa","points","GetPoints","GetPath","CalcAxi6sX","size","w","paddingLeft","h","wFact","round","sqrt","pow","Se","ep","Colors","OwnAxis","Point","GetSeriePointOptions","MakeLegend","capitalize","len","lenmax","wCapti","AxisYWidth","maxWidth","acos","lineHeight","GetScaleY","DataLength","__GetPathLine","xs","ys","dys","dxs","ds","ms","dots","GetPathLineDot","Radius","__GetPathBar","deilmit","wd","margin","bricks","GradientId","bars","sectors","sum","anglestart","r","PieArc","Prop","_Timer","_Timer2","options","Value","Do","DoCircle","DoBar","DoPie","circle","o","bar","offsetX","offsetY","Undo","UndoCircle","UndoBar","UndoPie","pie","TestB","per","series","max","isAutoScale","isAutoStep","sc","order","stepX","map","scaleCoefficient","ordinata","X","Y","padding","GetPathLine","GetPathBar","isDots","do2ts","centerX","centerY","angleInDegrees","angleInRadians","startAngle","endAngle","start","PolarToCartesius","end","largeArcFlag","join","id","sizeX","sizeY","grid","_GenerateString","prefix","gen"],"mappings":"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","file":"lure.all.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//\n// Lure Framework v0.9.1 [29.08.2017]\n//\n//<utils>;\nif (!Date.prototype.format) {\n    Date.prototype.format = function (format) {\n        return Lure._DateFormat(this, format);\n    };\n}\n//</utils>\nvar Lure = function () {\n    var LureClass = function () {\n        function LureClass() {\n            _classCallCheck(this, LureClass);\n\n            this.Plugin = {};\n            var $this = this;\n            this.Debug = false;\n            this.isEditableEventsEnabled = false;\n            //regexes\n            var regexEach = new RegExp(/{{#each\\s+([^}]+)}}/g);\n            var regexIfOuter = new RegExp(/{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}/g);\n            var regexIfInner = new RegExp(/{{#if([\\s\\S]*?)}}/g);\n            var regexExpressions = new RegExp(/{{([^#}]+)}}/g);\n            var regexEditable = new RegExp(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/g);\n            //compile helpers\n            var spaces = \"    \";\n            var preCompileIfOuter = function preCompileIfOuter(s) {\n                s = s.replace(/#IF/g, '#if').replace(/#ENDIF/g, '#endif').replace(regexIfOuter, function (bkt, condition, expression) {\n                    return '`+\\n/* OUTER \"IF\" */\\n(function($this){\\n    if (' + preParseObjectChecker(condition) + ') {\\n        return `' + expression + '`;\\n    }\\n    return \\'\\';\\n})($this)+`';\n                });\n                return s;\n            };\n            var preCompileIfInner = function preCompileIfInner(s) {\n                s = s.replace(regexIfInner, function (s, condition) {\n                    condition = condition.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/#less/g, \" < \").replace(/#more/g, \" > \").replace(/&amp;/g, \"&\").replace(/\\|/g, '\"');\n                    return '`+\\n    /* LOCAL \"IF\" */\\n    (function(){\\n        return (' + condition + '); \\n        return \\'\\';})()+`';\n                });\n                return s;\n            };\n            var preCompileEach = function preCompileEach(s) {\n                s = s.replace(/{{#EACH/g, \"{{#each\").replace(/{{#ENDEACH/g, \"{{#endeach\");\n                var EachList = s.match(regexEach);\n                var lvl = 0;\n                if (EachList !== null) {\n                    for (var i = EachList.length - 1; i >= 0; i--) {\n                        var current = EachList[i];\n                        var isInnerEach = false;\n                        lvl++;\n                        var StartPoint = s.indexOf(current);\n                        var EndPoint = s.indexOf(\"{{#endeach}}\", StartPoint);\n\n                        var prevStarts = s.slice(0, StartPoint).match(regexEach);\n                        prevStarts = prevStarts !== null ? prevStarts.length : 0;\n                        var prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\n                        prevEnds = prevEnds !== null ? prevEnds.length : 0;\n                        if (prevStarts > prevEnds) {\n                            isInnerEach = true;\n                            lvl = 0;\n                        }\n                        ////\n                        var string_Each = s.slice(StartPoint, EndPoint + 12);\n                        var expression = string_Each.slice(current.length, string_Each.length - 12);\n                        var ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function (a, name) {\n                            return name;\n                        });\n                        ObjectName = preParseObjectChecker(ObjectName);\n                        //the each template\n                        var eachComplied = '`+' + spaces.repeat(lvl) + '/* EACH */(function(inner, $parent){                                                                   \\r\\n' + spaces.repeat(lvl) + '    if (!inner || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' + spaces.repeat(lvl) + '        return \"\";                                                                                     \\r\\n' + spaces.repeat(lvl) + '    let string_result= \"\";                                                                             \\r\\n' + spaces.repeat(lvl) + '    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' + spaces.repeat(lvl) + '        let $this = inner[j];                                                                          \\r\\n' + spaces.repeat(lvl) + '        let o = inner[j];                                                                              \\r\\n' + spaces.repeat(lvl) + '        string_result = string_result + \\`' + preParse(expression) + '\\`;                                \\r\\n' + spaces.repeat(lvl) + '    }                                                                                                  \\r\\n' + spaces.repeat(lvl) + '    return string_result;                                                                              \\r\\n' + spaces.repeat(lvl) + '})(' + ObjectName + ', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\n                        s = s.replace(string_Each, eachComplied);\n                    }\n                }\n                return s;\n            };\n            var preCompileEditable = function preCompileEditable(s) {\n                return s.replace(regexEditable, function (match, editable, content) {\n                    match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\n                        return a.replace(b, ' data-line=\"{{i}}\" data-property=\"' + content.replace('{{', '').replace('}}', '') + '\">');\n                    });\n                    return match.replace(content, '<div class=\"editable-helper editable-value\">' + content + '</div><div class=\"editable-helper editable-icon\"></div>');\n                });\n            };\n            var preParseObjectChecker = function preParseObjectChecker(ObjectName) {\n                //ok check if it's expression\n                if (ObjectName.indexOf('Available + Dis') > -1) ; //debugger;\n                function checking(c) {\n\n                    var s = c.replace(/\\s/g, \"\");\n                    var containsSpecialObject = s.indexOf('$item') > -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1;\n                    var containsSpecialObjectTreeBuiler = s.indexOf('$index') > -1 || s.indexOf('$j') > -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1;\n                    var isSpecialSymbol = s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1 || s.indexOf(\"<\") > -1;\n                    var isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\n                    var isIterator = s === \"i\" || s === \"j\";\n                    var isNumber = !isNaN(s);\n                    if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIterator || isNumber || isString || isSpecialSymbol) {\n                        if (s.indexOf('$g.') > -1) {\n                            //if global object\n                            return s.replace('$g.', '');\n                        }\n                        return c;\n                    }\n                    return \"o.\" + s;\n                }\n                ObjectName = ObjectName.replace(/[^\\-+\\/%()*]+/g, function (c) {\n                    var parent = c.match(/&/g);\n                    if (parent !== null) {\n                        for (var i = 0; i < parent.length; i++) {\n                            if (i < parent.length - 1) c = c.replace('&', \"$parent\");else c = c.replace('&', \"$parent.$this\");\n                        }\n                        return c;\n                    } else {\n                        return checking(c);\n                    }\n                });\n                ObjectName = ObjectName.replace(/\\\\'/g, \"'\");\n                ObjectName = \"(\" + ObjectName + \")\"; //fucking concatenation shell\n                return ObjectName;\n            };\n            var preParse = function preParse(c) {\n                var isCheckExpression = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                return c.replace(regexExpressions, function (bkt, expression) {\n                    if (isCheckExpression) return '${' + preParseObjectChecker(expression) + '}';else return '${' + expression + '}';\n                });\n            };\n            /**\r\n             * Template compiler\r\n             * @param {string} DomString\r\n             * @param {boolean} isListElement\r\n             * @return {Function}\r\n             * @constructor\r\n             */\n            this.Compile = function (DomString, isListElement) {\n                DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{3,}/g, '');\n                //shell '\n                DomString = DomString.replace(/'/g, \"\\\\'\");\n                //.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\n                if (isListElement) {\n                    DomString = preCompileEditable(DomString);\n                    DomString = preCompileIfOuter(DomString);\n                    DomString = preCompileEach(DomString);\n                }\n\n                DomString = preParse(DomString);\n                DomString = preCompileIfInner(DomString);\n                var string_Function = '\\nlet $this = o;\\nlet $item = o;\\nlet $num = i+1;\\nlet $denum = length-i;\\n//treebuilder\\'s\\nlet $index;\\nlet $key;\\nlet $lvl;\\nlet $j;\\nif (extra){\\n    $index = extra.$index;\\n    $key = extra.$key;\\n    $lvl = extra.$lvl;\\n    $j = extra.$j;\\n}\\nlet string_Result = \"\";\\nif (o === undefined || (Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \\n    return \\'\\';\\nreturn `';\n                string_Function += DomString + '`;';\n                //if ie\n                //let isUnbrowser = true;\n                //if (isUnbrowser){\n                string_Function = string_Function.replace(/`/g, '\\'').replace(/\\$\\{([^}]*)\\}/g, function (match, val) {\n                    return '\\'+' + val + '+\\'';\n                });\n                //}\n\n                var function_f = void 0;\n                try {\n                    function_f = new Function('o', 'i', 'length', 'extra', string_Function);\n                } catch (e) {\n                    console.info(string_Function);\n                    console.error(e);\n                }\n                //console.log('Compiled:');\n                //console.log(f);\n                return function_f;\n            };\n            this._EditablesEventListenerRun = function (content) {\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget);\n                }, content);\n                $this.AddEventListenerGlobal('click', '.editable-icon', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget.closest('.editable'));\n                }, content);\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\n                    $this.Editable.RemoveEdits();\n                    $this.Editable.AddEdits(e.currentTarget);\n                }, content);\n                //editing\n                $this.AddEventListenerGlobal('change', '.editable-editor', function (e) {\n                    var val = e.currentTarget.value;\n                    var valPrev = e.currentTarget.parentElement.dataset['value'];\n                    if (val !== valPrev) e.currentTarget.parentElement.classList.add('editable-waiting');else e.currentTarget.parentElement.classList.remove('editable-waiting');\n                }, content);\n\n                $this.AddEventListenerGlobal('keyup', '.editable-textbox', function (e) {\n                    if (e.keyCode === 13) {\n                        $this.Editable.Save(e.currentTarget.closest('.editable'), e.currentTarget.value);\n                        return false;\n                    }\n\n                    var val = e.currentTarget.value;\n                    var valPrev = e.currentTarget.parentElement.dataset['value'];\n                    if (val !== valPrev) e.currentTarget.parentElement.classList.add('editable-waiting');else e.currentTarget.parentElement.classList.remove('editable-waiting');\n                }, content);\n\n                //save\n                $this.AddEventListenerGlobal('click', '.editable-save-button', function (e) {\n                    var EditableElement = e.currentTarget.closest('.editable');\n                    $this.Editable.Save(e.currentTarget.closest('.editable'), EditableElement.querySelector('.editable-editor').value);\n                }, content);\n\n                if ($this.isHasEditablesEventsEnabled) return;\n                document.addEventListener('click', function (e) {\n                    if (e.target.classList.contains('editable-helper') && document.querySelectorAll('.editable-helper, .editable-editing') !== null) {\n                        return;\n                    }\n                    $this.Editable.RemoveEdits();\n                });\n                $this.isHasEditablesEventsEnabled = true;\n            };\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\n            this.CreateElementFromString = function (string) {\n                var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n\n                var frag = document.createDocumentFragment();\n                var elem = document.createElement(ownerTagName);\n                elem.innerHTML = string;\n                while (elem.childNodes[0]) {\n                    frag.appendChild(elem.childNodes[0]);\n                }\n                return frag.childNodes[0];\n            };\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\n            this.CreateElementsFromString = function (string) {\n                var ownerTagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"div\";\n\n                var frag = document.createDocumentFragment();\n                var elem = document.createElement(ownerTagName);\n                elem.innerHTML = string;\n                while (elem.childNodes[0]) {\n                    frag.appendChild(elem.childNodes[0]);\n                }\n                if (frag.childNodes.length > 0) {\n                    var nodes = [];\n                    for (var i = 0; i < frag.childNodes.length; i++) {\n                        nodes.push(frag.childNodes[i]);\n                    }return nodes;\n                }\n                return null;\n            };\n            /**\r\n             *\r\n             * @param {css, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement}\r\n             * @constructor\r\n             */\n            this.Select = function (query) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                if (query === '' || query === null) return null;\n                return query instanceof Node ? query : parent.querySelector(query);\n            };\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             * @constructor\r\n             */\n            this.SelectAll = function (Selector) {\n                var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n\n                if (typeof Selector === 'undefined') return [];\n                if (typeof Selector.tagName !== 'undefined' || Selector === document) return [Selector];\n                return parent.querySelectorAll(Selector);\n            };\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {Lure.Content} thisArg\r\n             * @constructor\r\n             */\n            this.AddEventListenerGlobal = function (eventName, selector, handler) {\n                var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;\n                var thisArg = arguments[4];\n\n                parent.addEventListener(eventName, function (e) {\n                    var target = e.target;\n                    var isIt = false;\n                    var event = Lure._EventClone(e);\n                    var elems = parent.querySelectorAll(selector);\n                    if (elems[0] === target) {\n                        event.currentTarget = target;\n                        isIt = true;\n                    }\n                    if (!isIt) {\n                        for (var i = 0; i < elems.length; i++) {\n                            if (elems[i].contains(target)) {\n                                isIt = true;\n                                event.currentTarget = target.closest(selector);\n                                break;\n                            }\n                        }\n                    }\n                    if (isIt) {\n                        handler.call(thisArg ? thisArg : event.currentTarget, event);\n                    }\n                });\n            };\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\n            this.isVisible = function (HTMLElement) {\n                //check invisible state;\n                var isVisibleSelf = function isVisibleSelf(element) {\n                    var ContentStyle = window.getComputedStyle(element);\n                    if (ContentStyle.display === \"none\" || ContentStyle.opacity === \"0\" || ContentStyle.visibility === \"hidden\") return false;\n                    //check for null-size\n                    if ((parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\") && parseInt(ContentStyle.width) === 0) return false;\n                    if ((parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0) return false;\n                    return true;\n                };\n                var isVisibleParent = function isVisibleParent(element) {\n                    while (element.parentElement) {\n                        if (!isVisibleSelf(element.parentElement)) {\n                            return false;\n                        }\n                        element = element.parentElement;\n                    }\n                    return true;\n                };\n                if (!isVisibleSelf(HTMLElement)) {\n                    return false;\n                }\n\n                return isVisibleParent(HTMLElement);\n\n                return true;\n            };\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\n            this._EventClone = function (e) {\n                function ClonedEvent() {}\n                var clone = new ClonedEvent();\n                for (var p in e) {\n                    var d = Object.getOwnPropertyDescriptor(e, p);\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\n                        Object.defineProperty(clone, p, d);\n                    } else {\n                        clone[p] = e[p];\n                    }\n                }\n                Object.setPrototypeOf(clone, e);\n                return clone;\n            };\n\n            this.GetFileText = function (url) {\n                return new Promise(function (resolve, reject) {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onload = function () {\n                        resolve(xhr.response);\n                    };\n                    xhr.onerror = function () {\n                        reject(new Error('XMLHttpRequest Error: ' + this.statusText));\n                    };\n                    if (url.indexOf('..') > -1) url = url.replace('..', document.location.protocol + \"//\" + document.location.host);else {\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/') + 1) + url;\n                    }\n                    console.log('Lure.GetFileText', url);\n                    xhr.open('GET', url);\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\n                    xhr.send();\n                });\n            };\n            this.GetTextWidth = function (txt, fontname, fontsize) {\n                if (this.c === undefined) {\n                    this.c = document.createElement('canvas');\n                    this.ctx = this.c.getContext('2d');\n                }\n                this.ctx.font = fontsize + ' ' + fontname;\n                return this.ctx.measureText(txt).width;\n            };\n            this.GetInlineSize = function (elem) {\n                var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1rem';\n\n                var hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\n                var clone = document.createElement('div');\n                for (var k in elem.style) {\n                    try {\n                        if (elem.style[k] !== '' && elem.style[k].indexOf(\":\") > 0) {\n                            clone.style[k] = elem.style[k];\n                        }\n                    } catch (e) {}\n                }\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\n                clone.style.fontSize = fontSize;\n                clone.innerHTML = elem.innerHTML;\n                parent.document.body.appendChild(clone);\n                var sizes = { width: clone.clientWidth, height: clone.clientHeight };\n                parent.document.body.removeChild(clone);\n                return sizes;\n            };\n            this.GetInlineSize1 = function (elem) {\n                var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '12px//';\n\n                var pp = performance.now();\n                var hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\n                var clone = document.createElement('div');\n                for (var k in elem.style) {\n                    try {\n                        if (elem.style[k] !== '' && elem.style[k].indexOf(\":\") > 0) {\n                            clone.style[k] = elem.style[k];\n                        }\n                    } catch (e) {}\n                }\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\n                clone.style.fontSize = fontSize;\n                clone.innerHTML = elem.innerHTML;\n                parent.document.body.appendChild(clone);\n                var xx = getComputedStyle(clone);\n                var ps = performance.now();\n                var sizes = { width: $this.GetTextWidth(elem.innerText, xx.getPropertyValue('font-family'), xx.getPropertyValue(\"font-size\")), height: 12 };\n                Lure.Perf(ps, '--size');\n                parent.document.body.removeChild(clone);\n                console.log('sizes', sizes, xx);\n                Lure.Perf(pp, '--calxXwidth');\n                return sizes;\n            };\n            this.isNumeric = function (n) {\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            };\n            //this.Content = Lure.Content;\n            //this.Templator = Templator;\n            /*editable*/\n            //this.Editables = '.editable-waiting';\n            this._DateFormat = function (date) {\n                var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"DD.MM.YYYY HH:mm:ss\";\n\n                if (date === null || typeof date === 'undefined') return '';\n                var data = date.getDate();\n                var mo = date.getMonth();\n                var year = date.getFullYear();\n                var hour = date.getHours();\n                var min = date.getMinutes();\n                var sec = date.getSeconds();\n\n                return format.replace('DD', data.toString().length < 2 ? '0' + data : data).replace('D', data).replace('MMM', $this.Culture.MonthNames[mo]).replace('MM', mo.toString().length < 2 ? '0' + mo : mo).replace('M', mo).replace('YYYY', year).replace('YY', year.toString().substring(2, 2)).replace('Y', year).replace('HH', hour.toString().length < 2 ? '0' + hour : hour).replace('hh', hour).replace('mm', min.toString().length < 2 ? '0' + min : min).replace('ss', sec.toString().length < 2 ? '0' + sec : sec);\n            };\n            this.Editable = {\n                EditMode: false,\n                RemoveWaiting: function RemoveWaiting() {\n                    var waiedites = document.querySelectorAll('.editable-waiting');\n                    waiedites.forEach(function (item) {\n                        item.classList.remove('editable-waiting');\n                    });\n                },\n                RemoveEdits: function RemoveEdits() {\n                    if ($this.Editable.EditMode) return;\n                    var editables = document.querySelectorAll('.editable-editing');\n                    editables.forEach(function (item) {\n                        item.innerHTML = item._innerHTML;\n                        item.classList.remove('editable-editing');\n                    });\n                    $this.Editable.RemoveWaiting();\n                },\n                AddEdits: function AddEdits(EditableElement) {\n                    EditableElement._innerHTML = EditableElement.innerHTML;\n                    var ValuePrev = EditableElement.querySelector('.editable-value').innerHTML;\n                    EditableElement.classList.add('editable-editing');\n                    EditableElement.dataset['value'] = ValuePrev;\n                    // EditableElement.style.paddingBottom = '0px';\n                    //EditableElement.style.paddingTop = '0px';\n                    var SaveButton = $this.Editable.EditMode ? '' : '<div class=\"editable-helper editable-save-button\"></div>';\n                    if (!EditableElement.dataset['object']) //if no selectable data, just text editor is needed\n                        {\n                            var EditType = EditableElement.dataset['type'];\n                            if (typeof EditType === 'undefined') EditType = 'text';\n                            EditableElement.innerHTML = '<input class=\"textbox editable-helper editable-editor editable-textbox\" type=\"' + EditType + '\" value=\"' + ValuePrev + '\"> ' + SaveButton;\n                            EditableElement.querySelector('.editable-editor').focus();\n                            EditableElement.querySelector('.editable-editor').select();\n                        } else //selectable data\n                        {\n                            var string_Select = '<select class=\"select editable-helper editable-editor editable-select\">';\n                            var SelectData = eval(EditableElement.dataset['object']);\n                            //console.log('-SelectData data-', SelectData);\n                            var Property = EditableElement.dataset['property'];\n                            var SelectOptions = '';\n                            SelectData.forEach(function (item) {\n                                //SelectOptions += ``\n                                var attributes = '';\n                                if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === _typeof({})) {\n                                    for (var key in item) {\n                                        attributes += ' data-property_' + key + '=\"' + item[key] + '\"';\n                                    }\n                                    string_Select += '<option class=\"editable-helper\" ' + attributes + '>' + item[Property] + '</option>';\n                                } else {\n                                    string_Select += '<option class=\"editable-helper\" ' + (item === ValuePrev ? \"selected\" : \"\") + '>' + item + '</option>';\n                                }\n                            });\n                            string_Select += '</select>' + SaveButton + '</div>';\n                            //let Select = Lure.CreateElementFromString(string_Select);\n                            //Select.value = ValuePrev;\n                            EditableElement.innerHTML = string_Select;\n                        }\n                },\n                Save: function Save(EditableElement, ValueNew) {\n                    var Content = EditableElement.closest('.mt-content');\n                    var Controller = Content.MonsieurController;\n                    var i = EditableElement.dataset['line'];\n                    var Property = EditableElement.dataset['property'];\n                    var DataObject = Controller.Data[i];\n                    if (ValueNew === '' || ValueNew === null || typeof ValueNew === 'undefined') {\n                        console.info('New Value is empty');\n                        Lure.ErrorHint(EditableElement, \"Пустое поле или неправильные данные\");\n                        return;\n                    }\n                    EditableElement.innerHTML = EditableElement._innerHTML;\n                    EditableElement.dataset['value'] = ValueNew;\n                    EditableElement.querySelector('.editable-value').innerHTML = ValueNew;\n                    EditableElement.classList.remove('editable-editing');\n                    if (Property !== '$this' && Property !== \"$item\") DataObject[Property] = ValueNew;else DataObject = ValueNew;\n\n                    //so server now\n                    Controller.LineSave(i, Property, ValueNew, function () {\n                        Lure.Editable.RemoveWaiting();\n                        if (Property !== '$this' && Property !== \"$item\") Controller.Data[i][Property] = ValueNew;else Controller.Data[i] = ValueNew;\n                    });\n                }\n            };\n            ///\n            this.Settings = {\n                DialogBlur: null, //{string, jQuery, HTMLElement} - where blur on dialog\n                DialogAnimation: 'lure-animation-dialog', //{string} -  css-animation class\n                EditableClass: 'editable',\n                EditableWaiting: 'editable-waiting'\n            };\n            this.Culture = {\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"]\n            };\n            this.TemplatorList = [];\n            this.ContentList = {};\n\n            /////\n            this._DialogCount = 0;\n        }\n\n        _createClass(LureClass, [{\n            key: 'Perf',\n            value: function Perf(perfStart) {\n                var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Perf';\n\n                var x = Math.floor((window.performance.now() - perfStart) * 100) / 100;\n                console.info(\"[\" + text + \"]: \" + x + \"ms\");\n                return x;\n            }\n\n            /**\r\n             * Confirmation dialog\r\n             * @param Caption\r\n             * @param Message\r\n             * @param CaptionColor\r\n             * @param CaptionBackground\r\n             * @param OnAgree\r\n             * @param OnCancel\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'Confirm',\n            value: function Confirm() {\n                var Caption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Achtung\";\n                var Message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n                var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n                    _ref$CaptionColor = _ref.CaptionColor,\n                    CaptionColor = _ref$CaptionColor === undefined ? '' : _ref$CaptionColor,\n                    _ref$CaptionBackgroun = _ref.CaptionBackground,\n                    CaptionBackground = _ref$CaptionBackgroun === undefined ? '' : _ref$CaptionBackgroun,\n                    _ref$OnAgree = _ref.OnAgree,\n                    OnAgree = _ref$OnAgree === undefined ? function () {} : _ref$OnAgree,\n                    _ref$OnCancel = _ref.OnCancel,\n                    OnCancel = _ref$OnCancel === undefined ? null : _ref$OnCancel;\n\n                document.activeElement.blur();\n\n                var dialog = document.createElement('div');\n                dialog.classList.add('lure-confirm');\n                if (Lure.Settings.DialogAnimation) dialog.classList.add(Lure.Settings.DialogAnimation);\n                //###title\n                var title = document.createElement(\"div\");\n                title.classList.add('cd-caption');\n                title.innerHTML = Caption;\n                title.style.color = CaptionColor;\n                title.style.background = CaptionBackground;\n                dialog.appendChild(title);\n                //###message field\n                var msg = document.createElement(\"div\");\n                msg.classList.add('cd-text');\n                msg.innerHTML = Message;\n                dialog.appendChild(msg);\n                //###buttonfield\n                var buttons = document.createElement(\"div\");\n                buttons.classList.add(\"cd-buttons\");\n                dialog.appendChild(buttons);\n                //###button confirm\n                var btnOk = document.createElement(\"div\");\n                btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\n                btnOk.innerHTML = \"Ok\";\n                btnOk.onclick = function () {\n                    Lure._DialogCount--;\n                    if (OnAgree !== null && OnAgree !== undefined) OnAgree();\n                    if (Lure.Settings.DialogBlur && Lure._DialogCount < 1) Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\n                    //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\n                    wrap.remove();\n                    dialog.remove();\n                };\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\n                //###button cancel\n                if (OnCancel !== null) {\n                    var btnCancel = document.createElement(\"div\");\n                    btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\n                    btnCancel.innerHTML = \"Отмена\";\n                    btnCancel.onclick = function () {\n                        Lure._DialogCount--;\n                        if (OnCancel !== null) OnCancel();\n                        if (Lure.Settings.DialogBlur && Lure._DialogCount < 1) Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\n                        //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\n                        wrap.remove();\n                        dialog.remove();\n                    };\n                    dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\n                }\n                //### Dialog-Wrapper\n                var wrap = document.createElement(\"div\");\n                wrap.classList.add('ConfirmDialog-wrapper');\n                document.body.appendChild(wrap);\n                document.body.appendChild(dialog);\n                Lure._DialogCount++;\n                if (Lure.Settings.DialogBlur) {\n                    wrap.style.background = 'none';\n                    Lure.Select(Lure.Settings.DialogBlur).classList.add('lure-blur');\n                    //$(Lure.Settings.DialogBlur).addClass('lure-blur');\n                }\n            }\n            //Confirmation dialog teamplate just\n\n        }, {\n            key: 'NoFeature',\n            value: function NoFeature() {\n                var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n                if (name !== \"\") name = \"\\\"\" + name + \"\\\"\";\n                this.Confirm(\"Error\", \"Sorry, function \" + name + \" is not available yet\");\n            }\n\n            /**\r\n             *\r\n             * @param object\r\n             * @param msg\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'ErrorHint',\n            value: function ErrorHint(object, msg) {\n                if (!msg) msg = \"Поле не может быть пустым\";\n                var div = document.createElement('div');\n                div.classList.add('lure-error-hint');\n                div.innerHTML = msg;\n                object.parentElement.style.position = 'relative';\n                object.parentElement.appendChild(div);\n                div.style.display = 'block';\n                try {\n                    div.animate({ opacity: [0, 1] }, { duration: 300 });\n                } catch (e) {}\n\n                setTimeout(function () {\n\n                    try {\n                        div.animate({ opacity: [1, 0] }, { duration: 300 }).onfinish = function () {\n                            div.style.display = 'none';\n                        };\n                    } catch (e) {\n                        div.style.display = 'none';\n                    }\n                    //TODO CHECK FADEIN FADEOUT\n                    setTimeout(function () {\n                        object.parentElement.style.position = '';\n                        div.remove();\n                    }, 500);\n                }, 2000);\n            }\n        }]);\n\n        return LureClass;\n    }();\n\n    return new LureClass();\n}();\nLure.Diagnostics = {};\nLure.Diagnostics.Perf = function LurePerf() {\n    var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    _classCallCheck(this, LurePerf);\n\n    var Started = performance.now();\n    var Stepped = Started;\n\n    /**\r\n     *\r\n     * @returns {number}\r\n     * @constructor\r\n     */\n    this.Reset = function () {\n        Started = performance.now();\n        Stepped = Started;\n        return 0;\n    };\n    /**\r\n     *\r\n     * @param name\r\n     * @returns {string}\r\n     * @constructor\r\n     */\n    this.Elapsed = function () {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Perf';\n\n        if (!enabled) return 0;\n        var v = (performance.now() - Started).toFixed(2);\n        console.info('[' + name + ']: ' + v + 'ms');\n        return v;\n    };\n    /**\r\n     *\r\n     * @param name\r\n     * @returns {string}\r\n     * @constructor\r\n     */\n    this.Perf = function () {\n        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Perf';\n\n        if (!enabled) return 0;\n        var step = performance.now();\n        var v = (step - Stepped).toFixed(2);\n        console.info('[' + name + ']: ' + v + 'ms');\n        Stepped = step;\n        return v;\n    };\n};\n//sets = {\n//  SubContent: [\n//      {sets},                             -same object to create subs\n// ],\n//\n// Controller:{                                   - if needs some Template master\n//    Type: Templator,                                    - class link [optional] Templator by default\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\n//    Data: {array|object},                               - data array [optional] Data === [] by default\n//    ListElement: {string|HTMLElement},                  - repeated element\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\n\n//  Control: {\n//    Target: {string, jQuery, HTMLElement},\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\n//    OnClick: {function}                          - here this === current Lure.Content\n//    OnChange: {function}                         - here this === current Lure.Content\n// },}\n\nLure.Plugin.Content = {\n    Version: '0.9.1',\n    Content: function () {\n        function LureContent(_ref2) {\n            var _ref2$Target = _ref2.Target,\n                Target = _ref2$Target === undefined ? null : _ref2$Target,\n                _ref2$Content = _ref2.Content,\n                Content = _ref2$Content === undefined ? null : _ref2$Content,\n                _ref2$CSS = _ref2.CSS,\n                CSS = _ref2$CSS === undefined ? '' : _ref2$CSS,\n                _ref2$Name = _ref2.Name,\n                Name = _ref2$Name === undefined ? null : _ref2$Name,\n                _ref2$Global = _ref2.Global,\n                Global = _ref2$Global === undefined ? false : _ref2$Global,\n                _ref2$Title = _ref2.Title,\n                Title = _ref2$Title === undefined ? \"\" : _ref2$Title,\n                _ref2$Type = _ref2.Type,\n                Type = _ref2$Type === undefined ? \"Untyped\" : _ref2$Type,\n                _ref2$Visible = _ref2.Visible,\n                Visible = _ref2$Visible === undefined ? undefined : _ref2$Visible,\n                _ref2$SubContent = _ref2.SubContent,\n                SubContent = _ref2$SubContent === undefined ? [] : _ref2$SubContent,\n                _ref2$Dialog = _ref2.Dialog,\n                Dialog = _ref2$Dialog === undefined ? false : _ref2$Dialog,\n                _ref2$DialogWrapper = _ref2.DialogWrapper,\n                DialogWrapper = _ref2$DialogWrapper === undefined ? true : _ref2$DialogWrapper,\n                _ref2$DialogBlur = _ref2.DialogBlur,\n                DialogBlur = _ref2$DialogBlur === undefined ? null : _ref2$DialogBlur,\n                _ref2$DialogAnimation = _ref2.DialogAnimation,\n                DialogAnimation = _ref2$DialogAnimation === undefined ? null : _ref2$DialogAnimation,\n                _ref2$Show = _ref2.Show,\n                Show = _ref2$Show === undefined ? null : _ref2$Show,\n                _ref2$Hide = _ref2.Hide,\n                Hide = _ref2$Hide === undefined ? null : _ref2$Hide,\n                _ref2$Shower = _ref2.Shower,\n                Shower = _ref2$Shower === undefined ? function () {\n                this.Content.style.display = '';\n            } : _ref2$Shower,\n                _ref2$Hider = _ref2.Hider,\n                Hider = _ref2$Hider === undefined ? function () {\n                this.Content.style.display = 'none';\n            } : _ref2$Hider,\n                _ref2$BeforeShow = _ref2.BeforeShow,\n                BeforeShow = _ref2$BeforeShow === undefined ? function () {} : _ref2$BeforeShow,\n                _ref2$Refresh = _ref2.Refresh,\n                Refresh = _ref2$Refresh === undefined ? function (data, i) {\n                if (this.Controller) this.Controller.Refresh(data, i);\n            } : _ref2$Refresh,\n                _ref2$Sorting = _ref2.Sorting,\n                Sorting = _ref2$Sorting === undefined ? false : _ref2$Sorting,\n                _ref2$Filtering = _ref2.Filtering,\n                Filtering = _ref2$Filtering === undefined ? false : _ref2$Filtering,\n                _ref2$OnClick = _ref2.OnClick,\n                OnClick = _ref2$OnClick === undefined ? null : _ref2$OnClick,\n                _ref2$Controller = _ref2.Controller,\n                Controller = _ref2$Controller === undefined ? null : _ref2$Controller,\n                _ref2$Control = _ref2.Control,\n                Control = _ref2$Control === undefined ? null : _ref2$Control,\n                _ref2$Props = _ref2.Props,\n                Props = _ref2$Props === undefined ? function () {} : _ref2$Props,\n                _ref2$Methods = _ref2.Methods,\n                Methods = _ref2$Methods === undefined ? function () {} : _ref2$Methods,\n                _ref2$GetSet = _ref2.GetSet,\n                GetSet = _ref2$GetSet === undefined ? {} : _ref2$GetSet,\n                _ref2$AfterBuild = _ref2.AfterBuild,\n                AfterBuild = _ref2$AfterBuild === undefined ? function () {} : _ref2$AfterBuild,\n                _ref2$Disabled = _ref2.Disabled,\n                Disabled = _ref2$Disabled === undefined ? false : _ref2$Disabled,\n                _ref2$Parent = _ref2.Parent,\n                Parent = _ref2$Parent === undefined ? null : _ref2$Parent;\n\n            _classCallCheck(this, LureContent);\n\n            if (Disabled) return;\n            var $this = this;\n            this.isContent = true;\n            this.isActive = true;\n            if (Name === 'Tooltipchek') ; //debugger;\n\n            this.Parent = Parent;\n            if (Parent !== null) {\n                this.Target = Global ? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\n                if (this.Target === null) this.Target = this.Parent.Content;\n            } else if (Target !== null) {\n                this.Target = Lure.Select(Target);\n            }\n            // debugger;\n            ////\n            if (Content === null) {\n                this.Content = this.Target;\n                construct.call($this);\n            } else {\n                if (Content.match(/<[^>]+>/) === null) {\n                    //if not dom string\n                    console.log('get load');\n                    Lure.GetFileText(Content).then(function (x) {\n                        // debugger;\n                        //     console.log('x', x);\n                        MakeContent.call($this, x);\n                        construct.call($this);\n                    });\n                } else {\n                    MakeContent.call($this, Content);\n                    construct.call($this);\n                }\n            }\n            function MakeContent(Content) {\n                if (Controller === null || Array.isArray(Controller.Data)) {\n                    this.Content = Lure.CreateElementFromString(Content);\n                } else if (Controller !== null && !Array.isArray(Controller.Data)) {\n                    /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                     let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });\r\n                     return  match.replace(group, newGroup);\r\n                     });*/\n                    Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\n                        /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                         return match.replace(match, `<span>${match}</span>`);\r\n                         });*/\n                        var x = match.replace(/{{[^#}]+}}/g, function (matche) {\n                            return '<span>' + matche + '</span>';\n                        });\n                        return x; // match.replace(group, `<span>${group}</span>`);\n                    });\n                    this.Content = Lure.CreateElementFromString(Content);\n                }\n                //this._Content = Content;\n                this.Target.appendChild(this.Content);\n            }\n\n            /////\n            if (this.Content === null || this.Target === null) {\n                this.isContent = false;\n                return;\n            }\n\n            //### CONSTRUCTION\n            if (CSS !== '') {\n                var node = document.createElement('style');\n                node.innerHTML = CSS;\n                document.body.appendChild(node);\n            }\n            function construct() {\n                this.Type = Type;\n                this.Name = Name;\n                this.AllContents = Lure.ContentList;\n\n                //### METHODS\n                /**\r\n                 * @param {object} Data\r\n                 * @param {int} index\r\n                 */\n                this.Refresh = Refresh.bind(this);\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {HTMLElement}\r\n                 * @constructor\r\n                 */\n                this.Select = function (s) {\n                    return Lure.Select(s, $this.Content);\n                };\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {NodeList}\r\n                 * @constructor\r\n                 */\n                this.SelectAll = function (s) {\n                    return Lure.SelectAll(s, $this.Content);\n                };\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\n                this.GetParent = function () {\n                    var stringName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n                    var content = $this;\n                    while (content.Parent !== null && content.Name !== stringName) {\n                        content = content.Parent;\n                    }return content;\n                };\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\n                this.GetContent = function () {\n                    var stringName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'root';\n\n                    var parent = this.GetParent(stringName);\n                    if (parent.Name === stringName) return parent;\n                    // let root = parent;\n                    var found = parent;\n                    if (stringName === 'root') return found;\n                    var searcher0 = function searcher0(content) {\n                        if (content.isContent && content.__private.ContentNames) for (var i = 0; i < content.__private.ContentNames.length; i++) {\n                            var name = content.__private.ContentNames[i];\n                            if (name === stringName) return content[name];\n                            found = searcher(content[name]);\n                        }\n                        return found;\n                    };\n                    var searcher = function searcher(content) {\n                        // debugger;\n                        for (var key in content) {\n                            if (key !== \"Parent\" && !!content[key] && content[key].isContent) {\n\n                                if (content[key].Name === stringName) return content[key];\n                                found = searcher(content[key]);\n                            }\n                        }\n                        return found;\n                    };\n                    return searcher(found);\n                };\n                /**\r\n                 *\r\n                 * @param {HTMLElement|string} HTMLElement\r\n                 * @returns {number|Number}\r\n                 * @constructor\r\n                 */\n                this.GetIndex = function (HTMLElement) {\n                    HTMLElement = $this.Select(HTMLElement);\n                    return Array.prototype.slice.call(HTMLElement.parentElement.children).indexOf(HTMLElement);\n                };\n                /**\r\n                 *\r\n                 * @param {string} eventName\r\n                 * @param {string} selector\r\n                 * @param {function} func\r\n                 * @constructor\r\n                 */\n                this.AddEventListener = function (eventName, selector, func) {\n                    Lure.AddEventListenerGlobal(eventName, selector, func, $this.Content, $this);\n                };\n                /**\r\n                 *\r\n                 * @param {string|HTMLElement} buttonTutorStarter\r\n                 * @constructor\r\n                 */\n                this.AddTutor = function (buttonTutorStarter) {\n                    $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\n                };\n                //private\n                this._SortBy = function (f, data) {\n                    var isSorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n                    if (data.length < 2) return;\n                    console.log('sort by', f);\n                    data.sort(function (a, b) {\n                        if (a[f] < b[f] && $this._Sorting[f].Sorted) return 1;else if (a[f] > b[f] && $this._Sorting[f].Sorted) return -1;else if (a[f] < b[f] && !$this._Sorting[f].Sorted) return -1;else if (a[f] > b[f] && !$this._Sorting[f].Sorted) return 1;\n                        return 0;\n                    });\n                    $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\n                    for (var kf in $this._Sorting) {\n                        if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter') {\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\n                            if (f !== kf) $this._Sorting[kf].Sorted = false;\n                        }\n                    }\n                    $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down' : 'mt-sorting-up');\n                    $this.Refresh();\n                };\n                this._FilterBy = function () {\n                    var p = performance.now();\n                    var filters = 0;\n                    var _d = $this._Filter._DataDefault.slice(0);\n\n                    var _loop = function _loop(f) {\n                        if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !== '') {\n                            _d = _d.filter(function (x) {\n                                return x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1;\n                            });\n                            filters++;\n                        }\n                    };\n\n                    for (var f in $this._Filter) {\n                        _loop(f);\n                    }\n                    console.log(_d);\n                    if (filters === 0) {\n                        if ($this._Sorting._sorter) {\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\n                            $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\n                        }\n                        $this.Controller.Refresh();\n                    } else {\n                        if ($this._Sorting._sorter) {\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\n                            $this._SortBy($this._Sorting._sorter, _d);\n                        }\n                        $this.Controller.PageSize = $this._PageSize;\n                        $this.Controller._PageCursor = 0;\n                        $this.Controller._Rebuilder(_d);\n                    }\n\n                    mr.PerformanceNow(p, 'FilterBy');\n                };\n\n                //extra properties\n                Props.call(this);\n                //extra getters/setters\n                for (var k in GetSet) {\n                    Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\n                }\n                //extra methods\n                Methods.call(this);\n                //--\n                this.Show = function (e) {\n                    this.isActive = true;\n                    if (this.Control) this.Control.Active();\n                    var style = window.getComputedStyle($this.Content);\n                    var duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\n                    var durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\n                    if (duration < durationAni) duration = durationAni;\n                    duration++;\n                    if ($this.Type !== \"Untyped\" && !$this.isVisible) {\n                        Lure.ContentList[$this.Type].forEach(function (item) {\n                            if (item !== $this && item.isActive) item.Hide();\n                        });\n                    }\n                    if (Dialog) {\n                        Lure._DialogCount++;\n                        $this.Content.classList.add('lure-dialog');\n                        //    console.log('DialogWrapper', DialogWrapper);\n                        if (DialogWrapper) {\n                            $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\n                            document.body.appendChild($this.DialogWrapper);\n                            $this.DialogWrapper.onclick = $this.Hide.bind($this);\n\n                            var zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\n                            var zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\n                            if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper) $this.Content.style.zIndex = zIndexWrapper + 1;\n                        }\n\n                        if (DialogBlur) {\n                            $this.DialogWrapper.style.background = 'none';\n                            Lure.Select(DialogBlur).classList.add('lure-blur');\n                        }\n                        if (DialogAnimation) {\n                            $this.Content.classList.add(DialogAnimation);\n                        }\n                    }\n                    BeforeShow.call($this, e);\n                    Shower.call($this, e);\n                    $this.Content.style.display = '';\n                    clearTimeout($this.__private.ToggleTimer);\n                    //this.Content.addEventListener('transitionend', Show.bind($this, e));\n                    if (Show !== null) {\n                        $this.__private.ToggleTimer = setTimeout(function () {\n                            Show.call($this, e);\n                        }, duration);\n                    }\n                };\n                this.Hide = function (e) {\n                    this.isActive = false;\n                    if (this.Control) this.Control.Disactive();\n                    var style = window.getComputedStyle($this.Content);\n                    var duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\n                    var durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\n                    if (duration < durationAni) duration = durationAni;\n                    duration++;\n                    if (Dialog) {\n                        Lure._DialogCount--;\n                        if ($this.DialogWrapper) $this.DialogWrapper.remove();\n                        if (DialogBlur && Lure._DialogCount < 1) Lure.Select(DialogBlur).classList.remove('lure-blur');\n                    }\n\n                    Hider.call($this, e);\n                    clearTimeout($this.__private.ToggleTimer);\n                    if (Hide !== null) $this.__private.ToggleTimer = setTimeout(function () {\n                        Hide.call($this, e);\n                    }, duration);\n                };\n                this.Toggle = function (e) {\n                    if ($this.isVisible) $this.Hide(e);else $this.Show(e);\n                };\n\n                this.__private = {};\n                this.__private.ToggleTimer = null;\n                this.Control = new Lure.Plugin.Content.Control(Control, $this);\n                this.Content.onclick = OnClick ? OnClick.bind($this) : null;\n                //SubContent\n                if (Array.isArray(SubContent)) {\n                    for (var i = 0; i < SubContent.length; i++) {\n                        {\n                            if (!SubContent[i].Parent) SubContent[i].Parent = $this;\n                            //  $this.__private.ContentNames.push(SubContent[i].Name);\n                            $this[SubContent[i].Name] = new Lure.Content(SubContent[i]);\n                        }\n                    }\n                } else {\n                    for (var cname in SubContent) {\n                        SubContent[cname].Parent = $this;\n                        SubContent[cname].Name = cname;\n                        //       $this.__private.ContentNames.push(cname);\n                        $this[cname] = new Lure.Content(SubContent[cname]);\n                    }\n                }\n                //title\n                this.TitleContent = Lure.Select(Title, this.Content);\n\n                if (Type === \"Untyped\" && Visible !== false && !Dialog) Visible = true;else if (Type !== \"Untyped\" && Visible !== true || Dialog && Visible !== true) Visible = false;\n                //if (Typed) Content is Visible\n                if (Visible) {\n                    this.Content.style.display = '';\n                    if (this.Control) this.Control.Active();\n                } else {\n                    //not undefined\n                    this.isActive = false;\n                    this.Content.style.display = 'none';\n                }\n                if (Controller) {\n                    if (Controller.isController) {\n                        this.Controller = Controller;\n                        this.Controller.Parent = this;\n                    } else {\n                        if (!Controller.Target) Controller.Target = this.Content;\n                        if (!Controller.Type) Controller.Type = \"Templator\";\n                        Controller.Parent = this;\n                        this.Controller = new Lure.Plugin.Content.Controller[Controller.Type](Controller);\n                    }\n                    if (this.Controller.isHasEditable) {\n                        Lure._EditablesEventListenerRun($this.Content);\n                    }\n                }\n\n                if (Sorting) {\n                    $this._Sorting = {};\n                    $this._Sorting._sorter = null;\n\n                    var _loop2 = function _loop2(f) {\n                        if (Sorting.hasOwnProperty(f) && f !== '_sorter') {\n                            $this._Sorting[f] = {\n                                Target: $this.Select(Sorting[f]),\n                                Sorted: false\n                            };\n                            $this._Sorting[f].Target.classList.add('mt-sorting');\n                            $this._Sorting[f].Target.addEventListener('click', function () {\n                                $this._Sorting._sorter = f;\n                                $this._SortBy(f, $this.Controller._Data);\n                            });\n                        }\n                    };\n\n                    for (var f in Sorting) {\n                        _loop2(f);\n                    }\n                    console.info('mt-sortable', $this._Sorting);\n                }\n                if (Filtering) {\n                    $this._Filter = {};\n                    $this._Filter._DataDefault = $this.Controller._Data.slice(0);\n\n                    var _loop3 = function _loop3(f) {\n                        if (Filtering.hasOwnProperty(f) && f !== '_format') {\n                            $this._Filter[f] = {\n                                Target: $this.Select(Filtering[f]),\n                                Filter: ''\n                            };\n                            $this._Filter[f].Target.classList.add('mt-filtering');\n                            $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\n                            $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\n                                //$this._SortBy(f);\n                                $this._Filter[f].Filter = e.target.value.toLowerCase();\n                                $this._FilterBy();\n                            });\n                        }\n                    };\n\n                    for (var f in Filtering) {\n                        _loop3(f);\n                    }\n                }\n                if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\n                    Lure.ContentList[$this.Type] = [];\n                Lure.ContentList[$this.Type].push(this);\n\n                //close button\n                Array.from(this.Content.children).forEach(function (item) {\n                    if (item.classList.contains(\"close\")) item.onclick = function (e) {\n                        $this.Hide(e);\n                    };\n                });\n\n                setTimeout(function () {\n                    AfterBuild.call($this);\n                }, 1);\n            }\n        }\n\n        _createClass(LureContent, [{\n            key: 'RefreshOne',\n            value: function RefreshOne(i) {\n                if (this.Controller) this.Controller.RefreshOne(i);\n            }\n        }, {\n            key: 'Remove',\n            value: function Remove(i, removeData) {\n                if (this.Controller) this.Controller.Remove(i, removeData);\n            }\n        }, {\n            key: 'Add',\n            value: function Add(itemData) {\n                var extraclass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                var isPrepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                var addData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n                if (this.Controller) this.Controller.Add(itemData, extraclass, isPrepend, addData);\n            }\n\n            /**\r\n             *\r\n             * @param {object} itemData\r\n             * @param {int} index\r\n             * @constructor\r\n             */\n\n        }, {\n            key: 'Edit',\n            value: function Edit(itemData, index) {\n                if (this.Controller) this.Controller.Edit(itemData, index);\n            }\n        }, {\n            key: 'Dispose',\n            value: function Dispose() {\n                this.Content.remove();\n                this.Control.Disactive();\n                delete this.Controller;\n                delete this.Control;\n            }\n        }, {\n            key: 'isVisible',\n            get: function get() {\n                return Lure.isVisible(this.Content);\n            }\n        }, {\n            key: 'Title',\n            get: function get() {\n                return this.TitleContent.innerHTML;\n            },\n            set: function set(t) {\n                this.TitleContent.innerHTML = t;\n            }\n        }, {\n            key: 'Data',\n            get: function get() {\n                if (this.Controller) return this.Controller.Data;\n                return null;\n            },\n            set: function set(data) {\n                if (this.Controller) this.Controller.Data = data;\n            }\n        }, {\n            key: 'Items',\n            get: function get() {\n                if (this.Controller) return this.Controller.Items;\n                return null;\n            }\n        }]);\n\n        return LureContent;\n    }(),\n    Control: function () {\n        function LureControl(control, owner) {\n            var _this = this;\n\n            _classCallCheck(this, LureControl);\n\n            if (control === null) return;\n            if (control.length > 0) //if control list not empty\n                {\n                    (function () {\n                        var controls = _this;\n\n                        var _loop4 = function _loop4(i) {\n                            if (!control[i].Name) control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\n                            controls[control[i].Name] = {\n                                Content: Lure.SelectAll(control[i].Target),\n                                _Content: control[i].Target,\n                                Type: control[i].Type ? control[i].Type : \"Untyped\",\n                                isGlobal: control[i].Global,\n                                OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\n                                OnChange: control[i].OnChange,\n                                Active: function Active() {\n                                    Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                        item.classList.add('active');\n                                    });\n                                },\n                                Disactive: function Disactive() {\n                                    Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                        item.classList.remove('active');\n                                    });\n                                }\n\n                            };\n                            //onclick\n                            controls[control[i].Name].Content.forEach(function (item) {\n                                item.classList.add('pointer');\n                            });\n                            if (control[i].Global) {\n\n                                Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\n                                    Lure.SelectAll(control[i].Target).forEach(function (item) {\n                                        item.classList.remove('active');\n                                    });\n                                    e.target.classList.add('active');\n                                    if (controls[control[i].Name].OnClick) controls[control[i].Name].OnClick.call(owner, e);\n                                });\n                            } else {\n                                controls[control[i].Name].Content.forEach(function (item) {\n                                    item.onclick = function (e) {\n                                        Lure.ContentList[owner.Type].forEach(function (item) {\n                                            if (item !== owner) {\n                                                if (item.Control) item.Control.Disactive();\n                                            }\n                                        });\n                                        //console.log('remover', e);\n                                        controls[control[i].Name].Content.forEach(function (item) {\n                                            item.classList.remove('active');\n                                        });\n                                        e.currentTarget.classList.add('active');\n                                        controls[control[i].Name].OnClick.call(owner, e);\n                                    };\n                                });\n                            }\n\n                            if (control[i].OnChange) {\n                                if (control[i].Global) {\n                                    Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\n                                        control[i].OnChange.call(owner, e);\n                                    });\n                                } else {\n                                    controls[control[i].Name].Content.forEach(function (item) {\n                                        item.onchange = function (e) {\n                                            control[i].OnChange.call(owner, e);\n                                        };\n                                    });\n                                }\n                            }\n                        };\n\n                        for (var i = 0; i < control.length; i++) {\n                            _loop4(i);\n                        }\n                    })();\n                }\n        }\n\n        _createClass(LureControl, [{\n            key: 'Active',\n            value: function Active() {\n                var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Untyped\";\n\n                for (var k in this) {\n                    if (this[k].Type === type) this[k].Content.forEach(function (item) {\n                        item.classList.add('active');\n                    });\n                }\n            }\n        }, {\n            key: 'Disactive',\n            value: function Disactive() {\n                var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Untyped\";\n\n                for (var k in this) {\n                    if (this[k].Type === type) {\n                        this[k].Content.forEach(function (item) {\n                            item.classList.remove('active');\n                        });\n                        if (this[k].isGlobal) Lure.SelectAll(this[k]._Content).forEach(function (item) {\n                            item.classList.remove('active');\n                        });\n                    }\n                }\n            }\n        }]);\n\n        return LureControl;\n    }(),\n    Controller: {\n        Templator: function () {\n            function Templator() {\n                var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n                    _ref3$Target = _ref3.Target,\n                    Target = _ref3$Target === undefined ? null : _ref3$Target,\n                    _ref3$Data = _ref3.Data,\n                    Data = _ref3$Data === undefined ? [] : _ref3$Data,\n                    _ref3$ListElement = _ref3.ListElement,\n                    ListElement = _ref3$ListElement === undefined ? \".list_element\" : _ref3$ListElement,\n                    _ref3$EmptyMessage = _ref3.EmptyMessage,\n                    EmptyMessage = _ref3$EmptyMessage === undefined ? \"\" : _ref3$EmptyMessage,\n                    _ref3$EmptyHide = _ref3.EmptyHide,\n                    EmptyHide = _ref3$EmptyHide === undefined ? false : _ref3$EmptyHide,\n                    _ref3$PageSize = _ref3.PageSize,\n                    PageSize = _ref3$PageSize === undefined ? -1 : _ref3$PageSize,\n                    _ref3$DataCount = _ref3.DataCount,\n                    DataCount = _ref3$DataCount === undefined ? -1 : _ref3$DataCount,\n                    _ref3$PageGet = _ref3.PageGet,\n                    PageGet = _ref3$PageGet === undefined ? null : _ref3$PageGet,\n                    _ref3$ShowAllButton = _ref3.ShowAllButton,\n                    ShowAllButton = _ref3$ShowAllButton === undefined ? true : _ref3$ShowAllButton,\n                    _ref3$LineSave = _ref3.LineSave,\n                    LineSave = _ref3$LineSave === undefined ? function (line, property, newValue) {\n                    var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n                    setTimeout(function () {\n                        callback();\n                    }, 500);\n                } : _ref3$LineSave,\n                    _ref3$LineAdd = _ref3.LineAdd,\n                    LineAdd = _ref3$LineAdd === undefined ? function (dataObject) {\n                    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n                    setTimeout(function () {\n                        callback();\n                    }, 500);\n                } : _ref3$LineAdd,\n                    _ref3$EditModeSwitch = _ref3.EditModeSwitch,\n                    EditModeSwitch = _ref3$EditModeSwitch === undefined ? null : _ref3$EditModeSwitch,\n                    _ref3$DataSaveAll = _ref3.DataSaveAll,\n                    DataSaveAll = _ref3$DataSaveAll === undefined ? function () {} : _ref3$DataSaveAll,\n                    _ref3$NoAnimation = _ref3.NoAnimation,\n                    NoAnimation = _ref3$NoAnimation === undefined ? false : _ref3$NoAnimation,\n                    _ref3$NoBuild = _ref3.NoBuild,\n                    NoBuild = _ref3$NoBuild === undefined ? false : _ref3$NoBuild,\n                    _ref3$BeforeBuild = _ref3.BeforeBuild,\n                    BeforeBuild = _ref3$BeforeBuild === undefined ? function () {} : _ref3$BeforeBuild,\n                    _ref3$AfterBuild = _ref3.AfterBuild,\n                    AfterBuild = _ref3$AfterBuild === undefined ? function () {} : _ref3$AfterBuild,\n                    _ref3$AfterAdd = _ref3.AfterAdd,\n                    AfterAdd = _ref3$AfterAdd === undefined ? function () {} : _ref3$AfterAdd,\n                    _ref3$Parent = _ref3.Parent,\n                    Parent = _ref3$Parent === undefined ? null : _ref3$Parent;\n\n                _classCallCheck(this, Templator);\n\n                //### DEFINES\n                var $this = this;\n                this.isController = true;\n                if (Parent !== null) this.Content = Lure.Select(Target, Parent.Content);else this.Content = Lure.Select(Target);\n                this.Target = this.Content;\n                this._Data = Data;\n                this.EmptyMessage = EmptyMessage;\n                this.ListElement = \"\";\n\n                this.BeforeBuild = BeforeBuild.bind(this);\n                this.AfterBuild = AfterBuild.bind(this);\n                this.AfterAdd = AfterAdd.bind(this);\n                this.Parent = Parent;\n                //paginating\n                this.PageSize = PageSize;\n                this._PageSize = PageSize;\n                this._DataCount = DataCount > 0 ? DataCount : this._Data.length;\n                this._PageCursor = 0;\n                this._PageGet = PageGet;\n\n                //server handling\n                this.LineAdd = LineAdd;\n                this.LineSave = LineSave;\n                this.Type = null; // Refresh or ItemList\n\n                //settings\n                this.isShowAllButton = ShowAllButton;\n                this.isNoAnimaton = NoAnimation;\n                this.isEmptyHide = EmptyHide;\n\n                //fields to refresh (for refresh type)\n                var Dictionary = [];\n                this._Dictionary = Dictionary;\n                var Refresher = function Refresher() {\n                    //TODO refresh only changes\n                    if (!$this._Data) $this._Data = {};\n                    for (var i = 0; i < Dictionary.length; i++) {\n\n                        for (var j = 0; j < Dictionary[i].fields.length; j++) {\n                            var isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\n                            var NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\n                            if (isAttribute) {\n\n                                Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\n                            } else {\n                                Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\n                            }\n                        }\n                    }\n                };\n                this._Rebuilder = function () {\n                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $this._Data;\n\n                    var lines = \"\";\n                    //$this.Content.style.display = '';\n                    if ($this._PageCursor === 0) $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function (item) {\n                        item.remove();\n                    });\n                    //pagination check\n                    var NextCount = void 0;\n                    //let line;\n                    var Limit = data.length;\n                    $this._DataCount = DataCount > 0 ? DataCount : Limit;\n                    if ($this.PageSize > 0) {\n                        //  debugger;\n                        $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length;\n                        var paginator = $this.Content.querySelector('.mt-paginator');\n                        if (paginator !== null) paginator.remove();\n                        Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\n                        if (Limit > $this._DataCount && $this._DataCount > 0) Limit = $this._DataCount;\n                        //how much will be load in next step\n                        NextCount = $this._DataCount - Limit;\n                        if (NextCount > $this.PageSize) NextCount = $this.PageSize;\n                    }\n                    if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide) {\n                        var tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\n                        var empty = document.createElement(tag);\n                        empty.classList.add('mt-empty');\n                        empty.innerHTML = $this.EmptyMessage;\n                        $this.Content.appendChild(empty);\n                        return;\n                    } else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide) {\n                        $this.Content.style.display = 'none';\n                        return;\n                    } else if (data.length === 0) {\n                        return;\n                    }\n                    //linebuilding\n                    for (var i = $this._PageCursor; i < Limit; i++) {\n                        lines += $this._LineBuilder(data[i], i, data.length);\n                    } //appending\n                    //   debugger;\n                    if ($this.Content.children.length < 1) {\n                        $this.Content.innerHTML = lines;\n                    } else {\n                        lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\n                        if (lines !== null) lines.forEach(function (item) {\n                            $this.Content.appendChild(item);\n                        });\n                    }\n                    /*{\r\n                     lines += $this._LineBuilder(data[i], i, data.length);\r\n                     //if should to save changed class list after rebuild\r\n                     if (data[i] && data[i].$classlist)\r\n                     {\r\n                     line = $(line);\r\n                     line.attr('class', data[i].$classlist);\r\n                     lines +=line[0].outerHTML;\r\n                     }\r\n                     else{\r\n                     lines += line;\r\n                     }\r\n                     }*/\n                    //save cursor index\n                    if ($this.PageSize > 0) $this._PageCursor = Limit;\n                    //PAGINATION BUILD\n                    //limit data case\n                    if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount) {\n                        var also = void 0;\n                        var showAll = '<span>  (\\u041D\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u043E ' + ($this._DataCount - $this._PageCursor) + ') </span>';\n                        if ($this.isShowAllButton) {\n                            showAll = '<span> \\u0438\\u043B\\u0438 </span><span class=\"mt-btn-nextAll dotted pointer\"> \\u0412\\u0441\\u0435 ( ' + ($this._DataCount - $this._PageCursor) + ' )</span>';\n                        }\n                        var isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\n                        if (isTable) {\n                            var colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\n\n                            also = '<tr class=\"mt-paginator\"><td colspan=\"' + colspan + '\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0435 ' + NextCount + '</span>' + showAll + '</td></tr>';\n                            also = Lure.CreateElementFromString(also, $this.Content.tagName);\n                        } else {\n                            also = Lure.CreateElementFromString('<div class=\\'mt-paginator\\'><span class=\"mt-btn-next dotted pointer\">\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0435\\u0449\\u0435 ' + NextCount + '</span>' + showAll + '</div>');\n                        }\n                        var btnNext = also.querySelector('.mt-btn-next');\n                        //console.log('btnNext', btnNext);\n                        btnNext.onclick = function () {\n                            if ($this._PageCursor >= data.length) $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);else Build();\n                        };\n                        var btnNextAll = also.querySelector('.mt-btn-nextAll');\n                        btnNextAll.onclick = function () {\n                            $this.PageSize = $this._DataCount;\n                            if ($this._PageGet !== null) $this._PageGet($this._PageCursor, $this._DataCount - $this._PageCursor, BuildWithIt);else Build();\n                        };\n                        $this.Content.appendChild(also);\n                    }\n                };\n                var Build = function Build() {\n                    $this.BeforeBuild();\n\n                    if ($this.Type === \"Refresh\") Refresher();else if ($this.Type === \"ItemList\" /* && $this._Data.length > 0*/) $this._Rebuilder();\n\n                    $this.AfterBuild();\n                };\n                var BuildWithIt = function BuildWithIt(data) {\n                    for (var i = 0; i < data.length; i++) {\n                        $this._Data.push(data[i]);\n                    }Build();\n                };\n                // = Rebuild1er;\n\n                //#### METHODS\n                this.FieldAdd = function (element) {\n                    var elemAttributes = element.attributes;\n                    var fields = [];\n                    var WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\n                    //find fields in attributes\n                    for (var i = 0; i < elemAttributes.length; i++) {\n                        if (elemAttributes[i].value.indexOf(\"{{\") > -1) {\n                            if (elemAttributes[i].name !== 'value') fields.push({\n                                Target: 'attributes.' + elemAttributes[i].name,\n                                BuildValue: Lure.Compile(elemAttributes[i].value)\n                            });else {\n                                fields.push({\n                                    Target: elemAttributes[i].name,\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\n                                });\n                            }\n                            WhatFields = 0;\n                        }\n                    }\n                    //innerHTML check\n                    if (element.childNodes.length < 2) {\n                        if (element.innerHTML.indexOf(\"{{\") > -1) {\n                            fields.push({\n                                Target: \"innerHTML\",\n                                BuildValue: Lure.Compile(element.innerHTML)\n                            });\n                            WhatFields = WhatFields !== 0 ? 1 : 2; //1 if no att, 2 if att exists\n                        }\n                    }\n                    if (WhatFields > -1) {\n                        Dictionary.push({\n                            obj: element,\n                            fields: fields\n                        });\n                    }\n                };\n                this.Refresh = function () {\n                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n                    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n                    $this.PageSize = $this._PageSize;\n                    $this._PageCursor = 0;\n                    if (data !== null) $this._Data = data;\n                    $this.PageCursor = 0;\n                    if (index === null) Build();else $this.RefreshOne(index);\n                };\n                this.RefreshOne = function (i) {\n                    var newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\n                    var itemOld = $this.Items[i];\n                    $this.Items[i].parentNode.replaceChild(newItem, itemOld);\n                };\n                this.Add = function (item) {\n                    var extraclass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                    var isPrepend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n                    var addData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n                    if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null) $this.Content.querySelector(\".mt-empty\").remove();\n                    var fragment = document.createDocumentFragment();\n                    var elem = document.createElement($this.Content.tagName);\n                    var i = void 0;\n                    if (!isPrepend) {\n                        i = $this._Data.length;\n                        if (!addData) i--;\n                        elem.innerHTML = $this._LineBuilder(item, i, i + 1);\n                        while (elem.childNodes[0]) {\n                            fragment.appendChild(elem.childNodes[0]);\n                        }\n                        if (extraclass) fragment.children[0].classList.add(extraclass);\n                        if (addData) $this._Data.push(item);\n                        $this.Content.appendChild(fragment);\n                    } else {\n                        i = 0;\n                        //change data-line attributes\n                        $this.Items.forEach(function (item) {\n                            console.log(item);\n                            console.log(item.dataset['line']);\n                            item.dataset['line'] = parseInt(item.dataset['line']) + 1;\n                        });\n                        //TODO rendered indexes not changings\n\n                        elem.innerHTML = $this._LineBuilder(item, 0, $this._Data.length + 1);\n                        while (elem.childNodes[0]) {\n                            fragment.appendChild(elem.childNodes[0]);\n                        }\n                        if (extraclass) fragment.children[0].classList.add(extraclass);\n                        if (addData) $this._Data.unshift(item);\n                        $this.Content.prepend(fragment);\n                    }\n                    //server saver\n                    if ($this.LineAdd !== null) {\n                        $this.LineAdd(item, function () {\n                            //remove extraclass callback\n                            var x = $this.Content.querySelector('.' + extraclass);\n                            if (x) x.classList.remove(extraclass);\n                        });\n                    }\n                    $this.AfterAdd(item, i);\n                };\n                this.Edit = function (itemData, i) {\n                    console.log('edit itemData', i, itemData);\n                    Array.from($this.Items).filter(function (x) {\n                        return parseInt(x.dataset['line']) === i;\n                    })[0].classList.add('editable-waiting');\n                    $this.LineSave(i, '$this', itemData, function () {\n                        $this._Data[i] = itemData;\n                        $this.RefreshOne(i);\n                    });\n                };\n                /**\r\n                 *\r\n                 * @param {int} index\r\n                 * @param {bool} removeData\r\n                 * @constructor\r\n                 */\n                this.Remove = function (index) {\n                    var removeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n                    //TODO rendered indexes not changings\n                    $this.Content.querySelector('.mt-line[data-line=\"' + index + '\"]').remove();\n                    for (var j = index; j < $this.Items.length; j++) {\n                        $this.Items[j].dataset['line'] = parseInt($this.Items[j].dataset['line']) - 1;\n                        $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\n                            item.dataset['line'] = parseInt(item.dataset['line']) - 1;\n                        });\n                    }\n                    if (removeData) $this._Data.splice(index, 1);\n                    if ($this._Data.length === 0) $this.Refresh();\n                };\n                this.SwitchToEditMode = function () {\n                    Lure.Editable.EditMode = true;\n                    Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\n                        // console.log(item);\n                        Lure.Editable.AddEdits(item);\n                    });\n                };\n\n                //### CONSTRUCTOR\n                if (Array.isArray(this._Data)) {\n                    this.Type = \"ItemList\";\n                    var isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\n                    if (isListElementCssSelector) {\n                        var element = this.Content.querySelector(ListElement);\n                        element.classList.add('mt-line');\n                        ListElement = element.outerHTML;\n                        element.remove();\n                    } else {\n                        var list_element = ListElement.match(/<[^>]+>/)[0];\n                        var list_elementClassed = void 0;\n                        var pos = list_element.indexOf('class=\"');\n                        if (pos < 0) {\n                            list_elementClassed = list_element.substr(0, list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length - 1);\n                        } else {\n                            pos = list_element.indexOf('\"', pos + 8);\n                            list_elementClassed = list_element.substr(0, pos) + \" mt-line\" + list_element.substr(pos);\n                        }\n                        ListElement = ListElement.replace(list_element, list_elementClassed);\n                    }\n                    //add data-line attribute\n                    ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\n                        return a.replace(b, ' data-line=\"{{i}}\">');\n                    });\n                    this.ListElement = ListElement;\n                    this._LineBuilder = Lure.Compile(ListElement, true);\n                    if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null) {\n                        this.isHasEditable = true;\n                        if (EditModeSwitch !== null) Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\n                            if (e.currentTarget.checked) {\n                                $this.SwitchToEditMode();\n                            } else {\n                                Lure.Editable.EditMode = false;\n                                document.body.click();\n                            }\n                        });\n                    }\n                    this.Content.MonsieurController = this;\n                    this.Content.classList.add('mt-content');\n                } else {\n                    this.Type = \"Refresh\";\n                    var AllChildren = Array.prototype.slice.call(this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\n                    AllChildren.push(this.Content);\n                    AllChildren.forEach(function (item) {\n                        $this.FieldAdd(item);\n                    });\n                }\n                Lure.TemplatorList.push(this);\n                if (!NoBuild) Build();\n            }\n\n            _createClass(Templator, [{\n                key: 'Data',\n                get: function get() {\n                    return this._Data;\n                },\n                set: function set(data) {\n                    this._Data = data;\n                }\n            }, {\n                key: 'Items',\n                get: function get() {\n                    return this.Content.querySelectorAll('.mt-line');\n                }\n            }]);\n\n            return Templator;\n        }(),\n        TreeBuilder: function () {\n            function TreeBuilder(_ref4) {\n                var _ref4$Target = _ref4.Target,\n                    Target = _ref4$Target === undefined ? null : _ref4$Target,\n                    _ref4$Data = _ref4.Data,\n                    Data = _ref4$Data === undefined ? [] : _ref4$Data,\n                    _ref4$ListElement = _ref4.ListElement,\n                    ListElement = _ref4$ListElement === undefined ? null : _ref4$ListElement,\n                    _ref4$Drop = _ref4.Drop,\n                    Drop = _ref4$Drop === undefined ? false : _ref4$Drop,\n                    _ref4$SubSelector = _ref4.SubSelector,\n                    SubSelector = _ref4$SubSelector === undefined ? null : _ref4$SubSelector,\n                    _ref4$SubSelectorHand = _ref4.SubSelectorHandler,\n                    SubSelectorHandler = _ref4$SubSelectorHand === undefined ? function () {} : _ref4$SubSelectorHand,\n                    _ref4$BeforeBuild = _ref4.BeforeBuild,\n                    BeforeBuild = _ref4$BeforeBuild === undefined ? function () {} : _ref4$BeforeBuild,\n                    _ref4$AfterBuild = _ref4.AfterBuild,\n                    AfterBuild = _ref4$AfterBuild === undefined ? function () {} : _ref4$AfterBuild,\n                    _ref4$Parent = _ref4.Parent,\n                    Parent = _ref4$Parent === undefined ? null : _ref4$Parent;\n\n                _classCallCheck(this, TreeBuilder);\n\n                //### DEFINES\n                this.isController = true;\n                this.Content = Lure.Select(Target);\n                this.Target = this.Content;\n                this.Parent = Parent;\n                this._Data = Data;\n                this.SubSelector = SubSelector;\n                this.SubSelectorHandler = SubSelectorHandler.bind(this);\n                this.BeforeBuild = BeforeBuild.bind(this);\n                this.AfterBuild = AfterBuild.bind(this);\n                var SubTreeClass = Drop ? 'mtb-sub_tree dropable' : 'mtb-sub_tree';\n                var Lvl = 0;\n                var Branch = ListElement === null ? this.Content.innerHTML : ListElement;\n                if (this.SubSelector === null) {\n                    this.SubSelector = '.mtb-sub_tree';\n                    Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\n                        entag = '<div class=\"' + SubTreeClass + '\"></div>' + entag;\n                        return html + entag;\n                    });\n                }\n                this.LineBuilder = Lure.Compile(Branch, true);\n                var $this = this;\n\n                var Index = 0; //unque serial number of branch\n\n                var BuildElement = function BuildElement(obj, key, indexJ) {\n                    Index++;\n                    var extra = {\n                        $lvl: Lvl,\n                        $key: key,\n                        $index: Index,\n                        $j: indexJ\n                    };\n                    var line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\n                    line.classList.add('mtb-branch');\n                    for (var _key in obj) {\n                        var ObjItem = obj[_key];\n                        if (Array.isArray(ObjItem)) {\n                            Lvl++;\n                            for (var i = 0; i < ObjItem.length; i++) {\n                                if ($this.SubSelector === null) {\n                                    line.appendChild(BuildElement(ObjItem[i], _key, i));\n                                } else {\n                                    line.classList.add('mtb-has_tree');\n                                    if (Drop) line.classList.add('dropable');\n                                    var sub = line.querySelector($this.SubSelector);\n                                    sub.appendChild(BuildElement(ObjItem[i], _key, i));\n                                }\n                            }\n                            Lvl--;\n                        }\n                    }\n                    return line;\n                };\n                var Build = function Build() {\n                    $this.BeforeBuild();\n                    if (Array.isArray($this._Data)) {\n                        $this.Content.innerHTML = '';\n                        Lvl++;\n                        for (var j = 0; j < $this._Data.length; j++) {\n                            $this.Content.appendChild(BuildElement($this._Data[j], \"root\", 0));\n                        }Lvl--;\n                    } else {\n                        $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\n                    }\n                    Lvl = 0;\n                    Index = 0;\n                    $this.AfterBuild();\n                };\n\n                Build(this._Data);\n\n                //### METHODS\n                this.Refresh = function () {\n                    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : $this._Data;\n\n                    $this._Data = data;\n                    Build();\n                };\n            }\n\n            _createClass(TreeBuilder, [{\n                key: 'Data',\n                get: function get() {\n                    return this._Data;\n                },\n                set: function set(data) {\n                    this._Data = data;\n                }\n            }]);\n\n            return TreeBuilder;\n        }()\n    }\n};\n//register plugin\nLure.Content = Lure.Plugin.Content.Content;\n\n//Lure.Content = Lure.Content;\n\n\n//Tutorial\n//TargetButton = {string, HTMLElement} - button who start the tutor\n//TargetContent = {string, HTMLElement} - select/element where search tutors\nLure.Plugin.Tutor =\n/**\r\n *\r\n * @param {HTMLElement} TargetButton\r\n * @param {HTMLElement} TargetContent\r\n */\nfunction MonsieurTutor() {\n    var TargetButton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var TargetContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, MonsieurTutor);\n\n    //### DEFINES\n    var $this = this;\n    this.TargetButton = Lure.Select(TargetButton);\n    this.TargetContent = Lure.Select(TargetContent);\n    var MT = '<div class=\"lure-tutor\">\\n                        <div class=\"cd-caption\">\\n                            <span>\\u0428\\u0430\\u0433 </span>\\n                            <span class=\"lure-tutor_step\"></span>\\n                        </div>\\n                        <div class=\"lure-tutor_desc\"></div>\\n                        <div class=\"lure-tutor_btns\">\\n                            <button class=\"button btn-tutor btn-tutor-stop\">\\u041F\\u0440\\u0435\\u0440\\u0432\\u0430\\u0442\\u044C \\u043E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435</button>\\n                            <button class=\"button btn-tutor btn-tutor-next\">\\u0414\\u0430\\u043Be\\u0435 \\u2192</button></div>\\n                   </div>';\n    this.Content = Lure.CreateElementFromString(MT);\n    this.ContentBG = Lure.CreateElementFromString('<div class=\"lure-tutor-bg dialog-wrapper\"></div>');\n    this.Content.style.display = 'none';\n    this.ContentBG.style.display = 'none';\n    this._Description = this.Content.querySelector('.lure-tutor_desc');\n    this._Step = this.Content.querySelector('.lure-tutor_step');\n    this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\n    this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\n\n    $this.Data = [];\n    var ButtonNextText = this._ButtonNext.innerHTML;\n    var TutorPosition = 0;\n    /*get transparent*/\n    var temp = document.createElement('div');\n    temp.style.display = 'none';\n    document.body.appendChild(temp);\n    var ColorTransparent = window.getComputedStyle(temp).backgroundColor;\n    temp.remove();\n    //---\n    var ElemCssRestore = function ElemCssRestore() {\n        var Element = $this.Data[TutorPosition - 1].obj;\n        if (Element.tagName.toLowerCase() !== 'tr') {\n            Element.style.zIndex = '';\n            Element.style.position = '';\n            Element.style.outline = '';\n            Element.style.display = '';\n            Element.style.backgroundColor = '';\n            return;\n        }\n        var nElements = Element.querySelectorAll('th, td');\n        nElements.forEach(function (elem) {\n            elem.style.position = '';\n            elem.style.zIndex = '';\n        });\n    };\n    var ElemCssSet = function ElemCssSet(Element) {\n        if (Element.tagName.toLowerCase() !== 'tr') {\n            Element.style.zIndex = '11';\n            Element.style.position = 'relative';\n            Element.style.outline = '5px #bee0ff solid';\n            var style = window.getComputedStyle(Element);\n            if (style.backgroundColor === ColorTransparent) Element.style.backgroundColor = \"#fff\";\n            if (!Lure.isVisible(Element)) {\n                if (Element.tagName.toLowerCase() !== \"table\") Element.style.display = 'block';else Element.style.display = 'table';\n            }\n            /* if (Element.length > 1)\r\n             Element.eq(1).css({zIndex: '', outline: ''});*/\n            return;\n        }\n        var nElements = Element.querySelectorAll('th, td');\n        nElements.forEach(function (elem) {\n            elem.style.zIndex = \"11\";\n            elem.style.position = \"relative\";\n            var style = window.getComputedStyle(elem);\n            if (style.backgroundColor === ColorTransparent) {\n                elem.style.backgroundColor = \"#fff\";\n            }\n        });\n        /* if (Element.length > 1)\r\n         Element.eq(1).css({zIndex: '', outline: ''});*/\n    };\n    var Run = function Run() {\n        console.log(\"tutor run\");\n        if ($this.TargetContent === null) return;\n        var Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\n        if (Items.length < 1) {\n            Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\n            return;\n        }\n        // document.body.style.position = 'relative';\n\n        Items.forEach(function (item) {\n            $this.Data.push({\n                obj: item,\n                desc: item.dataset['tutor']\n            });\n        });\n        $this.Content.style.display = '';\n        $this.ContentBG.style.display = '';\n        GoStep();\n    };\n    var GoStep = function GoStep() {\n        //restore prev element's css\n        if (TutorPosition > 0) ElemCssRestore();\n        if (TutorPosition === $this.Data.length) {\n            Stop();\n            return;\n        }\n        //select next elem\n        var Element = $this.Data[TutorPosition].obj;\n        var ElementDesc = $this.Data[TutorPosition].desc;\n        // check for invisible parent\n        var ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\n        if (ElemParent !== null) {\n            ElemParent = ElemParent[1];\n            ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\n            Element = Element.closest(ElemParent);\n            $this.Data[TutorPosition].obj = Element;\n            //Element.push( );\n        }\n        //set element visible\n        ElemCssSet(Element);\n        //write new element title and desc\n        $this._Step.innerHTML = TutorPosition + 1 + \"/\" + $this.Data.length;\n        $this._Description.innerHTML = ElementDesc;\n        //caption next button\n        if (TutorPosition + 1 === $this.Data.length) {\n            $this._ButtonNext.innerHTML = 'Завершить';\n            $this._ButtonStop.style.opacity = '0';\n        }\n\n        //move tutor desc box\n        var posX = Element.offsetLeft + Element.clientWidth + 10;\n        var posY = Element.offsetTop - $this.Content.clientHeight - 10;\n        if (posY < 10) posY = 10;\n        if (posX + $this.Content.clientWidth > window.innerWidth) {\n            posX = Element.offsetLeft - $this.Content.clientWidth - 10;\n            if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth) {\n                posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\n            }\n        }\n        if (document.documentElement.scrollTop > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight) {\n            //$('html, body').animate({scrollTop: posY - 10}, 300);\n            document.documentElement.scrollTop = posY - 10 + 'px';\n        }\n        if (posX < 10) posX = 10;\n        $this.Content.style.left = posX + 'px';\n        $this.Content.style.top = posY + 'px';\n\n        TutorPosition++;\n    };\n    var Stop = function Stop() {\n        //     document.body.style.position = '';\n        ElemCssRestore();\n        $this.Content.style.display = 'none';\n        $this.ContentBG.style.display = 'none';\n        $this._ButtonNext.innerHTML = ButtonNextText;\n        $this._ButtonStop.style.opacity = '';\n        TutorPosition = 0;\n        $this.Data = [];\n    };\n    //### CONSTRUCT\n\n    this.TargetButton.onclick = Run;\n    this._ButtonNext.onclick = GoStep;\n    this._ButtonStop.onclick = Stop;\n\n    document.body.appendChild(this.Content);\n    document.body.appendChild(this.ContentBG);\n\n    //### METHODS\n    this.Run = Run;\n};\n\nLure.Plugin.Load = function () {\n    function MonsieurLoading() {\n        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            _ref5$Target = _ref5.Target,\n            Target = _ref5$Target === undefined ? 'body' : _ref5$Target;\n\n        _classCallCheck(this, MonsieurLoading);\n\n        this.Target = Lure.Select(Target);\n        this.Target.style.position = 'relative';\n        this.Content = Lure.CreateElementFromString('<div class=\"ajax-loading\" style=\"display: none\"></div>');\n        var cx = 60; //diameter\n        var cy = 60;\n        var _DoArc = function _DoArc(radius, maxAngle) {\n            var d = \" M \" + (cx + radius) + \" \" + cy;\n            for (var angle = 0; angle < maxAngle; angle++) {\n                var rad = angle * (Math.PI / 180); //deg to rad\n                var x = cx + Math.cos(rad) * radius;\n                var y = cy + Math.sin(rad) * radius;\n                d += \" L \" + x + \" \" + y;\n            }\n            return d;\n        };\n        var svg = '<svg xmlns=\"http://www.w3.org/2000/svg\">\\n                     <path d=\"' + _DoArc(45, 160) + '\" class=\"lure-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(40, 130) + '\" class=\"lure-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(35, 100) + '\" class=\"lure-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\\n                     <path d=\"' + _DoArc(30, 70) + '\"  class=\"lure-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\\n                   </svg>';\n        this.Target.appendChild(this.Content);\n        this.Content.innerHTML = svg;\n        this.Timeout = null;\n    }\n\n    _createClass(MonsieurLoading, [{\n        key: 'Show',\n        value: function Show() {\n            var $this = this;\n            this.Content.style.display = '';\n            clearTimeout(this.TimeoutHide);\n            this.Timeout = setTimeout(function () {\n                $this.Content.style.display = 'block';\n            }, 70);\n        }\n    }, {\n        key: 'Hide',\n        value: function Hide() {\n            var $this = this;\n            clearTimeout(this.Timeout);\n            this.TimeoutHide = setTimeout(function () {\n                $this.Content.style.display = 'none';\n            }, 250); //hide may be called in same time as the show()\n        }\n    }]);\n\n    return MonsieurLoading;\n}();\n\nLure.Plugin.Tooltip = function MonsieurTooltip(_ref6) {\n    var _ref6$Target = _ref6.Target,\n        Target = _ref6$Target === undefined ? document : _ref6$Target,\n        _ref6$Attribute = _ref6.Attribute,\n        Attribute = _ref6$Attribute === undefined ? \"data-tooltip\" : _ref6$Attribute,\n        _ref6$Delay = _ref6.Delay,\n        Delay = _ref6$Delay === undefined ? 400 : _ref6$Delay,\n        _ref6$Time = _ref6.Time,\n        Time = _ref6$Time === undefined ? 1100 : _ref6$Time,\n        _ref6$Cursor = _ref6.Cursor,\n        Cursor = _ref6$Cursor === undefined ? \"help\" : _ref6$Cursor,\n        _ref6$Custom = _ref6.Custom,\n        Custom = _ref6$Custom === undefined ? '<div class=\"lure-tooltip\">' : _ref6$Custom,\n        _ref6$AfterBuild = _ref6.AfterBuild,\n        AfterBuild = _ref6$AfterBuild === undefined ? function () {} : _ref6$AfterBuild;\n\n    _classCallCheck(this, MonsieurTooltip);\n\n    var $this = this;\n    this.ToolTip = Lure.CreateElementFromString(Custom);\n    var Timer = null;\n    var Destr = null;\n    this.Target = Lure.Select(Target);\n    var Show = function (text) {\n        this.ToolTip.innerHTML = text;\n        $this.Target.appendChild(this.ToolTip);\n    }.bind(this);\n    Lure.AddEventListenerGlobal('mouseover', '[' + Attribute + ']', function (e) {\n        var text = e.currentTarget.dataset[Attribute.replace('data-', '')];\n        clearTimeout(Destr);\n        Timer = setTimeout(function () {\n            Show(text);\n        }, Delay);\n    }, this.Target);\n    Lure.AddEventListenerGlobal('mouseout', '[' + Attribute + ']', function (e) {\n        clearTimeout(Timer);\n        Destr = setTimeout(function () {\n            //$this.ToolTip.remove();\n        }, Time);\n    }, this.Target);\n    setTimeout(function () {\n        AfterBuild.bind($this);\n    }, 0);\n};\n\nLure.Tutor = Lure.Plugin.Tutor;\nLure.Load = Lure.Plugin.Load;\nLure.Tooltip = Lure.Plugin.Tooltip;\n\n/*\r\n class yWatcher {\r\n constructor(target, handler, level) {\r\n let $this = this;\r\n let mirror = JSON.parse(JSON.stringify(target));\r\n let watch = {};\r\n function setGetSet(obj, prop, handler, tar) {\r\n let oldval = obj[prop];\r\n let newval = oldval;\r\n this['_'+prop] = obj[prop];\r\n let getter = function () {\r\n return this['_'+prop];\r\n };\r\n let setter = function (val) {\r\n oldval = newval;\r\n\r\n tar[prop] = val;\r\n console.log('xo', target);\r\n if (Array.isArray(val) || typeof val === typeof {}) {\r\n setWatcher(val, [prop]);\r\n }\r\n return newval = handler.call(obj, prop, oldval, val);\r\n };\r\n obj[\"_\"+prop] = obj[prop];\r\n if (delete obj[prop]) { // can't watch constants\r\n Object.defineProperty(obj, prop, {\r\n get: getter,\r\n set: setter,\r\n enumerable: true,\r\n configurable: true\r\n });\r\n\r\n }\r\n\r\n\r\n }\r\n\r\n function GetterSetter(obj, prop, deepprop) {\r\n //watch['_'+deepprop] = obj[prop];\r\n console.log('watch', watch);\r\n console.log('obdp', obj, `prop: ${prop}`, `deepprop: ${deepprop}`);\r\n let x = eval(`watch${deepprop}`);\r\n console.log('x', x);\r\n\r\n x['_'+prop] = obj[prop];\r\n let getter = function () {\r\n if (deepprop !== '')\r\n return target[deepprop][prop];\r\n return target[prop];\r\n };\r\n\r\n let setter = function (val) {\r\n let oldval;\r\n if (deepprop !== '')\r\n oldval = target[deepprop][prop];\r\n oldval = target[prop];\r\n console.log('xo', target);\r\n //if (Array.isArray(val) || typeof val === typeof {}) {\r\n //    setWatcher(val, [prop]);\r\n //}\r\n if (deepprop !== '')\r\n target[deepprop][prop] = val;\r\n target[prop] = val;\r\n return handler.call(obj, prop, oldval, val);\r\n };\r\n Object.defineProperty(x, prop, {\r\n get: getter,\r\n set: setter,\r\n enumerable: true,\r\n configurable: true\r\n });\r\n }\r\n this.GetDeep = function getOfDeep(deep){\r\n let s='';\r\n for (let i = 0; i < deep.length; i++){\r\n if (typeof deep[i] === 'undefined' || !deep[i])\r\n return s;\r\n s += `[\"${deep[i]}\"]`;\r\n }\r\n return s;\r\n };\r\n let lvl = 0;\r\n let deep = [];\r\n function setWatcher(obj,) {\r\n //      debugger;\r\n if (!Array.isArray(obj) && typeof obj === typeof {}) {\r\n for (let k in obj) {\r\n if (obj.hasOwnProperty(k)) {\r\n GetterSetter(obj, k, $this.GetDeep(deep));\r\n // setGetSet(obj, k, handler, eval('target'+$this.GetDeep(deep)));\r\n if (Array.isArray(obj[k]) || typeof obj[k] === typeof {}) {\r\n deep.push(k);\r\n lvl++;\r\n setWatcher(JSON.parse(JSON.stringify(obj[k])));\r\n // continue;\r\n }\r\n //deep.slpice(deep.length-1, 1);\r\n }\r\n }\r\n return\r\n }\r\n console.log('-array: ', obj);\r\n }\r\n setWatcher(mirror);\r\n this.o = mirror;\r\n this.watch = watch;\r\n }\r\n }\r\n //let xo = {name: \"vasan\", val: 12, a: {b:'', c: ''}, arr: [11,22]};\r\n let xo = {a: 'vasya', b: 42, c:{d: 'valued'}};\r\n let wa = new Watcher(xo, console.log);\r\n console.log('---');\r\n console.log('xo', xo);\r\n console.log('wa', wa);\r\n\r\n */\nLure.Plugin.Chart = {\n    Core: '',\n    Chart: function () {\n        function LureChart() {\n            var Target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n                _ref7$Type = _ref7.Type,\n                Type = _ref7$Type === undefined ? 'Line' : _ref7$Type,\n                _ref7$Title = _ref7.Title,\n                Title = _ref7$Title === undefined ? '' : _ref7$Title,\n                _ref7$Labels = _ref7.Labels,\n                Labels = _ref7$Labels === undefined ? {\n                Rotation: 'auto',\n                Data: []\n            } : _ref7$Labels,\n                _ref7$Grid = _ref7.Grid,\n                Grid = _ref7$Grid === undefined ? {} : _ref7$Grid,\n                _ref7$Series = _ref7.Series,\n                Series = _ref7$Series === undefined ? [] : _ref7$Series,\n                _ref7$Tooltip = _ref7.Tooltip,\n                Tooltip = _ref7$Tooltip === undefined ? {\n                Template: null\n            } : _ref7$Tooltip,\n                _ref7$AxisY = _ref7.AxisY,\n                AxisY = _ref7$AxisY === undefined ? {\n                Scale: ['auto', 'auto', 'auto'],\n                Visible: true\n            } : _ref7$AxisY,\n                _ref7$Height = _ref7.Height,\n                Height = _ref7$Height === undefined ? 400 : _ref7$Height,\n                _ref7$SeriesOptions = _ref7.SeriesOptions,\n                SeriesOptions = _ref7$SeriesOptions === undefined ? {} : _ref7$SeriesOptions;\n\n            _classCallCheck(this, LureChart);\n\n            // let pp = new Lure.Diagnostics.Perf(false);\n            /// <DEFAULTS>\n            //const Colors = ['red', 'green', 'blue'];\n            var ColorsDefault = ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange', 'tomato', 'darkblue'];\n            var TemplateDefault = {\n                Line: 'Name: {{Name}}<br>Value: {{Value}}',\n                Pie: 'Name: {{Name}}<br>Value: {{Value}}'\n            };\n            /// </DEFAULTS>\n            ///\n            Lure.Chart.Count++;\n            var chart = this;\n            this.Content = Lure.Select(Target);\n            this.Content.classList.add('mt-chart'); // mt\n            this.Content.style.position = 'relative';\n\n            this.isGraph = true;\n\n            var Prepared = [];\n            var Buffer = {\n                Legend: '',\n\n                AxisX: '',\n                AxisY: '',\n                Grid: '',\n                Svg: '',\n\n                Height: 0,\n                Width: 0,\n                Abscissa: null,\n                SeriesPoints: [],\n\n                SeriesCount: {\n                    Line: 0,\n                    Bar: 0,\n                    Pie: 0,\n                    Ring: 0\n                },\n                SeriesBar: 0,\n\n                ParametersAxisX: null\n            };\n            this._Series = Series;\n\n            this.Options = {\n                Type: Type ? Type.toLowerCase() : 'line',\n                Title: Title ? Title : '',\n                Legend: {\n                    Visible: true\n                },\n                Labels: {\n                    Visible: typeof Labels.Visible === 'undefined' || Labels.Visible,\n                    Rotation: Labels.Rotation ? Labels.Rotation : 'auto',\n                    Data: Labels.Data ? Labels.Data : [],\n                    Font: {\n                        Family: 'sans-serif',\n                        Size: '0.8rem'\n                    }\n                },\n                Grid: {\n                    Visible: typeof Grid.Visible === 'undefined' || Grid.Visible\n                },\n                Series: null,\n                SeriesOptions: {\n                    BarStack: false,\n                    BarGradient: true,\n\n                    PieStack: false,\n                    PieType: 'pie'\n                },\n                AxisY: {\n                    Font: {\n                        Family: 'sans-serif',\n                        Size: '0.8rem'\n                    },\n                    Scale: AxisY.Scale ? [Lure.isNumeric(AxisY.Scale[0]) ? AxisY.Scale[0] : 'auto', Lure.isNumeric(AxisY.Scale[1]) ? AxisY.Scale[1] : 'auto', Lure.isNumeric(AxisY.Scale[2]) ? AxisY.Scale[2] : 'auto'] : ['auto', 'auto', 'auto'],\n                    Visible: typeof AxisY.Visible === 'undefined' || AxisY.Visible\n\n                },\n                Padding: 0,\n                Tooltip: {\n                    Template: null //Tooltip.Template?Tooltip.Template : TemplateDefault.Line\n                }\n            };\n            this.Block = function () {\n                this.Content.innerHTML = '<div class=\"mt-chart col\">\\n                                        <div class=\"mt-chart-caption\">\\n                                          <div class=\\'mt-chart-title\\'>' + Title + '</div>\\n                                          <div class=\"mt-chart-legend row\"></div>\\n                                        </div>\\n                                        <div class=\"mt-chart-kek row flex-100\">\\n                                          <div class=\"mt-chart-y row\"></div>\\n                                          <div class=\"col flex-100\">\\n                                            <div class=\"mt-chart-area row flex-100\">\\n                                              <svg class=\"mt-chart-svg\"></svg>\\n                                              <div class=\"mt-chart-grid\" style=\" position: absolute;\"></div>\\n                                            </div>\\n                                            <div class=\"mt-chart-x row\"></div>\\n                                           </div>\\n                                        </div>\\n                                      </div>';\n                var _Legend = this.Content.querySelector('.mt-chart-legend');\n                var _AxisX = this.Content.querySelector('.mt-chart-x');\n                var _AxisY = this.Content.querySelector('.mt-chart-y');\n                var _ChartArea = this.Content.querySelector('.mt-chart-area');\n                var _Grid = this.Content.querySelector('.mt-chart-grid');\n                var _Svg = this.Content.querySelector('.mt-chart-svg');\n                return {\n                    get Legend() {\n                        return _Legend;\n                    },\n                    set Legend(v) {\n                        _Legend.innerHTML = v;\n                    },\n                    get AxisX() {\n                        return _AxisX;\n                    },\n                    set AxisX(v) {\n                        _AxisX.innerHTML = v;\n                    },\n                    get AxisY() {\n                        return _AxisY;\n                    },\n                    set AxisY(v) {\n                        _AxisY.innerHTML = v;\n                    },\n                    get ChartArea() {\n                        return _ChartArea;\n                    },\n                    set ChartArea(v) {\n                        _ChartArea.innerHTML = v;\n                    },\n                    get Grid() {\n                        return _Grid;\n                    },\n                    set Grid(v) {\n                        _Grid.innerHTML = v;\n                    },\n                    get Svg() {\n                        return _Svg;\n                    },\n                    set Svg(v) {\n                        _Svg.innerHTML = v;\n                    }\n                };\n            }.bind(this)();\n            /*********/\n            var Builder = {\n                Legend: function Legend() {},\n\n                AxisX: function () {\n                    if (!chart.Options.Labels.Visible) {\n                        this.Block.AxisX = '';\n                        return;\n                    }\n                    var labels = chart.Options.Labels.Data;\n                    //const style = `transform: rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px; width: ${Buffer.AxisXParams.Width}px; margin-left: ${Buffer.AxisXParams.MarginLeft}px;`;\n                    var style = 'transform: translate(' + Buffer.AxisXParams.MarginLeft + 'px) rotate(' + Buffer.AxisXParams.Angle + 'deg); margin-top: ' + Buffer.AxisXParams.MarginTop + 'px ; width: ' + Buffer.AxisXParams.Width + 'px;';\n                    var a = '';\n                    for (var i = 0; i < labels.length; i++) {\n                        a += '<div class=\"mt-chart-label mt-chart-label__x\" style=\"font-family: ' + chart.Options.Labels.Font.Family + '; font-size: ' + chart.Options.Labels.Font.Size + '\"><span style=\"' + style + '\">' + labels[i] + '</span></div>';\n                    }\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\n                    Buffer.AxisX = a;\n                    this.Block.AxisX = a;\n                    this.Block.AxisX.style.borderTop = '1px #111 solid';\n                }.bind(this),\n                AxisY: function () {\n                    !this.Options.Labels.Visible;\n                    return '';\n                }.bind(this),\n\n                Make3Legend: function Make3Legend(Serie, i) {\n                    return '<div class=\"mt-chart-legend__item row\">\\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck' + Serie.Name + i + '\">\\n                          <div class=\"mt-legend-icon\" style=\"background-color: ' + Serie.Color + '\"></div>\\n                          <label class=\"mt-legend-label\" for=\"legcheck' + Serie.Name + i + '\">' + Serie.Name + '</label>\\n                        </div>';\n                },\n                MakeAxisY: function MakeAxisY() {\n                    /*if (!scale)\r\n                     return '';\r\n                     let caption = '';\r\n                     if (i>0)\r\n                     caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${name}</div></div>`;\r\n                     let a = '';\r\n                     for (let j = 0; j< scale.length; j++){\r\n                     a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                     }\r\n                     return `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;*/\n                    var i = 0;\n                    if (!chart.Options.AxisY.Visible) {\n                        i = 1;\n                        if (chart._ScaleY.Scales.length < 2) return '';\n                    }\n                    var AxisYStyle = 'font-family: ' + chart.Options.Labels.Font.Family + '; font-size: ' + chart.Options.Labels.Font.Size + ';';\n                    var accum = '';\n                    for (i; i < chart._ScaleY.Scales.length; i++) {\n                        var index = chart._ScaleY.Dict.indexOf(i); //.filter(x=>x===i && x !==0)[0];\n                        var scale = chart._ScaleY.Scales[i];\n                        var caption = '';\n                        //let a = '';\n                        if (i > 0) caption = '<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">' + chart.Options.Series[index].Title + '</div></div>';\n                        var a = '';\n                        for (var j = 0; j < scale.length; j++) {\n                            a += '<div class=\"mt-chart-label mt-chart-label__y\"><span>' + scale[j] + '</span></div>';\n                        }\n                        if (i > 0) AxisYStyle += ' color: ' + chart.Options.Series[index].Color + '; font-weight: bold;';\n                        accum += '<div class=\"mt-chart-axis__y row\" style=\"' + AxisYStyle + '\" data-line=\"' + i + '\">' + caption + '<div class=\"mt-chart-labels col\">' + a + '</div></div>';\n                    }\n                    return accum;\n                },\n                MakeAxisX: function MakeAxisX() {\n                    if (!chart.Options.Labels.Visible) return '';\n                    var labels = chart.Options.Labels.Data;\n\n                    //const style = `transform: rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px; width: ${Buffer.AxisXParams.Width}px; margin-left: ${Buffer.AxisXParams.MarginLeft}px;`;\n                    var style = 'transform: translate(' + Buffer.AxisXParams.MarginLeft + 'px) rotate(' + Buffer.AxisXParams.Angle + 'deg); margin-top: ' + Buffer.AxisXParams.MarginTop + 'px ; width: ' + Buffer.AxisXParams.Width + 'px;';\n                    var a = '';\n                    for (var i = 0; i < labels.length; i++) {\n                        a += '<div class=\"mt-chart-label mt-chart-label__x\" style=\"font-family: ' + chart.Options.Labels.Font.Family + '; font-size: ' + chart.Options.Labels.Font.Size + '\"><span style=\"' + style + '\">' + labels[i] + '</span></div>';\n                    }\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\n                    return a;\n                },\n                MakeGrid: function MakeGrid(a, b) {\n                    if (!chart.Options.Grid.Visible) return '';\n                    return Lure.Chart.GetGrid(chart.Options.Labels.Data.length, chart._ScaleY.Scales[0].length - 1, chart.Options.Padding);\n                },\n                MakeGraph: function MakeGraph(serie, i) {\n                    var index = chart._ScaleY.Dict[i];\n                    var scale = chart._ScaleY.Scales[index];\n                    var mm = chart._ScaleY.MinMax[index];\n                    var DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\n                    var DataAbscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, chart.Width);\n                    var points = Lure.Chart.GetPoints(DataAbscissa, DataOrdinata);\n                    return Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width);\n                },\n                CalcAxi6sX: function CalcAxi6sX() {\n                    var c = Lure.CreateElementFromString('<div class=\"mt-chart-label mt-chart-label__x\"><span>' + chart.Options.Labels.Data[0] + '</span></div>');\n                    //let pp = performance.now();\n                    var size = Lure.GetInlineSize(c, getComputedStyle(Lure.Select('span')).fontSize);\n\n                    var w = chart.Width / chart.Options.Labels.Data.length;\n                    chart.Options.Padding = w / 2;\n                    chart.Block.AxisX.style.paddingLeft = w / 2 + 'px';\n                    var h = size.height;\n                    var wFact = size.width;\n                    var angle = void 0;\n\n                    if (chart.Options.Labels.Rotation !== 'auto') {\n                        angle = parseFloat(chart.Options.Labels.Rotation);\n                    } else {\n                        var cos = (w - h) / (wFact + h);\n                        if (cos < 0.1) cos = 0;\n                        if (cos > 1) cos = 1;\n                        angle = -90 * (1 - cos);\n                    }\n                    //Lure.Perf(pp, '--calcx--');\n                    return {\n                        Height: Math.round(h / 4 + Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))),\n                        Width: wFact,\n                        MarginTop: wFact > w ? Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)) - h : 0,\n                        MarginLeft: wFact > w ? -w / 2 : -wFact / 2,\n                        Angle: angle\n                    };\n                }\n            };\n\n            var Init = {\n                Tooltip: function () {\n                    if (Tooltip.Template) {\n                        this.Options.Tooltip.Template = Tooltip.Template;\n                        return;\n                    }\n                    if (this.Options.Type === 'line' || this.Options.Type === 'bar') {\n                        this.Options.Tooltip.Template = TemplateDefault.Line;\n                        return;\n                    }\n                    if (this.Options.Type === 'pie' || this.Options.Type === 'ring') {\n                        this.Options.Tooltip.Template = TemplateDefault.Pie;\n                        return;\n                    }\n\n                    //Tooltip.Template?Tooltip.Template : TemplateDefault.Line\n                }.bind(this),\n                Series: function () {\n                    var Se = [];\n                    if (this.Options.Series !== null) {\n\n                        return;\n                    }\n                    for (var i = 0; i < this._Series.length; i++) {\n                        var ep = {};\n                        ep.Name = this._Series[i].Name ? this._Series[i].Name : 'Unnamed';\n                        ep.Title = this._Series[i].Title ? this._Series[i].Title : ep.Name;\n                        ep.Color = this._Series[i].Color ? this._Series[i].Color : ColorsDefault[i] ? ColorsDefault[i] : '#000';\n                        ep.Width = this._Series[i].Width ? this._Series[i].Width : 2;\n\n                        ep.Data = this._Series[i].Data;\n\n                        ep.Type = this._Series[i].Type ? this._Series[i].Type.toLowerCase() : Type ? Type.toLowerCase() : 'line';\n                        //debugger;\n                        if (ep.Type === 'pie' || ep.Type === 'ring') {\n                            ep.Colors = this._Series[i].Colors ? this._Series[i].Colors : ColorsDefault;\n                            ep.Width = this._Series[i].Width ? this._Series[i].Width : 30;\n                            ep.Labels = this._Series[i].Labels ? this._Series[i].Labels : this.Options.Labels.Data ? this.Options.Labels.Data : false;\n                        }\n\n                        ep.Line = i;\n                        ep.isVisible = typeof this._Series[i].Visible === 'undefined' || this._Series[i].Visible; //true by default\n                        ep.OwnAxis = this._Series[i].OwnAxis;\n                        //ep.OwnAxis = Lure.Chart.CheckOwnAxis(ep);\n\n\n                        ep.Point = this._Series[i].Point;\n                        ep.Point = Lure.Chart.GetSeriePointOptions(ep);\n\n                        Buffer.Legend += Lure.Chart.MakeLegend(ep, i);\n                        Buffer.SeriesCount[ep.Type.capitalize()]++;\n                        Se.push(ep);\n                    }\n                    this.Options.Series = Se;\n                }.bind(this),\n                AxisY: function () {\n                    if (this.Width === LastRender.Width) return;\n                    var count = this.Options.AxisY.Visible ? 1 : 0;\n                    var len = 0;\n                    var width = 0;\n                    for (var i = 0; i < this.Options.Series.length; i++) {\n                        //check special Scales\n                        if (this.Options.Series[i].isVisible && this.Options.Series[i].OwnAxis) {\n                            var _len = 0;\n                            for (var j = 0; j < this.Options.Series[i].Data.length; j++) {\n                                var w = Lure.GetTextWidth(this.Options.Series[i].Data[j], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\n                                if (w > _len) _len = this.Options.Series[i].Data[j];\n                            }\n                            var lenmax = Lure.GetTextWidth(this.Options.Series[i].OwnAxis[1], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\n                            if (lenmax > _len) _len = lenmax;\n                            //debugger;\n                            //width += Lure.GetTextWidth('i'.repeat(len), this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\n                            width += _len + 8; //8px = (7px) :before.width  + (1px) border\n                            var wCapti = Lure.GetTextWidth(this.Options.Series[i].Title, this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\n                            width += wCapti > 30 ? 30 : wCapti;\n                        }\n                        //check default scale\n                        else if (this.Options.Series[i].isVisible && !Array.isArray(this.Options.Series[i].OwnAxis)) {\n                                for (var _j = 0; _j < this.Options.Series[i].Data.length; _j++) {\n                                    var _w = Lure.GetTextWidth(this.Options.Series[i].Data[_j], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\n                                    if (_w > len) len = this.Options.Series[i].Data[_j];\n                                }\n                            }\n                    }\n                    width += len + 10 + 7;\n                    Buffer.AxisYWidth = width;\n                    // console.log('->Init.AxisY:',width);\n                }.bind(this),\n                AxisX: function () {\n                    if (this.Width === LastRender.Width) return;\n                    if (!this.Options.Labels.Visible) {\n                        Buffer.AxisXParams = {\n                            Height: 0,\n                            Width: 0,\n                            MarginTop: 0,\n                            MarginLeft: 0,\n                            Angle: 0\n                        };\n                        return;\n                    }\n\n                    var maxWidth = 0;\n                    for (var i = 0; i < this.Options.Labels.Data.length; i++) {\n                        var _w2 = Lure.GetTextWidth(this.Options.Labels.Data[i], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\n                        if (_w2 > maxWidth) maxWidth = _w2;\n                    }\n                    var w = (this.Content.clientWidth - Buffer.AxisYWidth) / this.Options.Labels.Data.length;\n                    w = (this.Content.clientWidth - Buffer.AxisYWidth - w / 2) / this.Options.Labels.Data.length;\n                    //debugger;\n                    this.Options.Padding = w / 2;\n                    this.Block.AxisX.style.paddingLeft = w / 2 + 'px';\n                    var h = 0; //TODO hardcode fix\n                    var wFact = maxWidth;\n                    var angle = void 0;\n\n                    if (this.Options.Labels.Rotation !== 'auto') {\n                        angle = parseFloat(this.Options.Labels.Rotation);\n                    } else {\n                        var cos = w / wFact;\n                        if (cos < 0.15) cos = 0;\n                        if (cos > 1) cos = 1;\n                        //angle = (-90*(1-cos));\n                        //console.log('w',this.Width, w, wFact,cos);\n                        angle = -(Math.acos(cos) * 180 / Math.PI).toFixed(2);\n                        /* if (angle >0 )\r\n                             angle = -angle;*/\n                        //console.log('angleold', (-90*(1-cos)));\n                        //console.log('anglenew', h, parseFloat(getComputedStyle(this.Block.AxisX).lineHeight));\n                    }\n                    //Lure.Perf(pp, '--calcx--');\n                    Buffer.AxisXParams = {\n                        Height: Math.round(Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))) + parseFloat(getComputedStyle(this.Block.AxisX).lineHeight),\n                        Width: wFact,\n                        MarginTop: wFact > w ? Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)) - h : 0,\n                        MarginLeft: wFact > w ? -w / 2 : -wFact / 2,\n                        Angle: angle\n                    };\n                }.bind(this),\n                ScaleY: function () {\n                    this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, this.Height - Buffer.AxisXParams.Height, this);\n                    return;\n                    if (ctx.Type === 'pie') {\n                        return [];\n                    }\n                    var min = series[0].Data[0];\n                    var max = series[0].Data[0];\n                    var isAutoScale = true;\n                    var isAutoStep = true;\n                    if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto') {\n                        isAutoScale = false;\n                        min = ctx.Options.AxisY.Scale[0];\n                        max = ctx.Options.AxisY.Scale[1];\n                    }\n                    if (ctx.Options.AxisY.Scale[2] !== 'auto') isAutoStep = false;\n                    var mm = [[series[0].Data[0], series[0].Data[0]]];\n                    var index = 0;\n                    var scales = [];\n\n                    var sc = {\n                        Scales: [],\n                        Dict: [],\n                        MinMax: null\n                    };\n                    for (var i = 0; i < series.length; i++) {\n                        sc.Dict[i] = 0;\n                        if (series[i].OwnAxis) {\n                            index++;\n                            if (typeof series[i].OwnAxis[0] !== 'undefined') mm.push(series[i].OwnAxis);else mm.push([series[i].Data[0], series[i].Data[0]]);\n                            sc.Dict[i] = index;\n                        }\n                        for (var j = 0; j < series[i].Data.length; j++) {\n                            if (isAutoScale) {\n                                if (series[i].Data[j] < min) min = series[i].Data[j];\n                                if (series[i].Data[j] > max) max = series[i].Data[j];\n                            }\n                            if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined') {\n                                if (series[i].Data[j] < mm[index][0]) mm[index][0] = series[i].Data[j];\n                                if (series[i].Data[j] > mm[index][1]) mm[index][1] = series[i].Data[j];\n                            }\n                        }\n                    }\n                    mm[0] = [min, max];\n                    sc.MinMax = mm;\n                    for (var _i = 0; _i < mm.length; _i++) {\n                        var order = mm[_i][1].toString().length;\n                        var step = void 0;\n                        if (_i === 0 && !isAutoStep) {\n                            step = ctx.Options.AxisY.Scale[2];\n                        } else {\n                            step = mm[_i][2] ? mm[_i][2] : ((mm[_i][1] - mm[_i][0]) * 40 / height / Math.pow(10, order - 1) / 5).toFixed(1) * Math.pow(10, order - 1) * 5;\n                        }\n                        var s = mm[_i][0];\n                        var scale = [];\n                        if (order < 3 || true) {\n                            //debugger;\n                            while (s <= mm[_i][1] + ctx.Options.Series[_i].Width / 2) {\n                                scale.push(s);\n                                s += step;\n                            }\n                            scale.push(s);\n                            sc.Scales.push(scale);\n                        }\n                    }\n                    return sc;\n                }.bind(this)\n            };\n            /**\r\n             *\r\n             * @returns {string}\r\n             * @constructor\r\n             */\n\n            var LastRender = {\n                Width: 0,\n                Height: 0,\n                DataLength: 0\n\n            };\n\n            this.__GetPathLine = function (serie, line) {\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width) Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\n                var index = this._ScaleY.Dict[line];\n                var scale = this._ScaleY.Scales[index];\n                var mm = chart._ScaleY.MinMax[index];\n                //debugger;\n                var DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\n                var points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata, this.Options.Padding);\n                Buffer.SeriesPoints[line] = points;\n\n                var n = points.length;\n\n                var xs = []; //x\n                var ys = []; //y\n                var dys = []; //dx\n                var dxs = []; //dy\n                var ds = []; //derivative\n                var ms = []; //desired slope (m) at each point using Fritsch-Carlson method\n                for (var i = 0; i < n; i++) {\n                    xs[i] = points[i][0];\n                    ys[i] = points[i][1];\n                }\n                // Calculate deltas and derivative\n                for (var _i2 = 0; _i2 < n - 1; _i2++) {\n                    dys[_i2] = ys[_i2 + 1] - ys[_i2];\n                    dxs[_i2] = xs[_i2 + 1] - xs[_i2];\n                    ds[_i2] = dys[_i2] / dxs[_i2];\n                }\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\n                ms[0] = ds[0];\n                ms[n - 1] = ds[n - 2];\n                for (var _i3 = 1; _i3 < n - 1; _i3++) {\n                    if (ds[_i3] === 0 || ds[_i3 - 1] === 0 || ds[_i3 - 1] > 0 !== ds[_i3] > 0) {\n                        ms[_i3] = 0;\n                    } else {\n                        ms[_i3] = 3 * (dxs[_i3 - 1] + dxs[_i3]) / ((2 * dxs[_i3] + dxs[_i3 - 1]) / ds[_i3 - 1] + (dxs[_i3] + 2 * dxs[_i3 - 1]) / ds[_i3]);\n                        if (!isFinite(ms[_i3])) {\n                            ms[_i3] = 0;\n                        }\n                    }\n                }\n                var d = 'M ' + xs[0] + ',' + ys[0];\n                var dots = '<g class=\"mt-chart-dots\">';\n                for (var _i4 = 0; _i4 < n - 1; _i4++) {\n                    d += ' C ' + (xs[_i4] + dxs[_i4] / 3) + ',' + (ys[_i4] + ms[_i4] * dxs[_i4] / 3) + ' ' + (xs[_i4 + 1] - dxs[_i4] / 3) + ',' + (ys[_i4 + 1] - ms[_i4 + 1] * dxs[_i4] / 3) + ' ' + xs[_i4 + 1] + ',' + ys[_i4 + 1];\n                    if (serie.Point.Visible) dots += Lure.Chart.GetPathLineDot(xs[_i4], ys[_i4], line, _i4, serie.Color, serie.Point.Radius);\n                }\n                if (serie.Point.Visible) dots += Lure.Chart.GetPathLineDot(xs[n - 1], ys[n - 1], line, n - 1, serie.Color, serie.Point.Radius);\n                dots += '</g>';\n                return '<g class=\"mt-chart-serie\" data-type=\"Line\"><path data-line=\"' + line + '\" d=\"' + d + '\" fill=\"none\" stroke=\"' + serie.Color + '\" stroke-width=\"' + serie.Width + '\"></path> ' + dots + '</g>';\n            }.bind(this);\n            this.__GetPathBar = function (serie, line) {\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width) Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\n                var index = this._ScaleY.Dict[line];\n                var scale = this._ScaleY.Scales[index];\n                var mm = chart._ScaleY.MinMax[index];\n                //debugger;\n                var DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\n                var points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata, this.Options.Padding);\n                Buffer.SeriesPoints[line] = points;\n                var height = this.Height;\n\n                var deilmit = 1;\n                if (!this.Options.SeriesOptions.BarStack) deilmit = Buffer.SeriesCount.Bar * 0.8;\n                var wd = this.Width / this.Options.Labels.Data.length / 2 / deilmit; //serie.Width;\n                var margin = wd * 1.2 * Buffer.SeriesBar - (wd * 1.2 * Buffer.SeriesCount.Bar / 2 - wd * 1.2 / 2);\n\n                // debugger;\n\n                var bricks = '<g class=\"mt-chart-serie\" data-type=\"Bar\">';\n                var GradientId = '';\n                if (this.Options.SeriesOptions.BarGradient) {\n                    GradientId = 'lc-gradient-' + Lure.Chart.Count;\n                    bricks += '<linearGradient id=\"' + GradientId + '\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>';\n                }\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\n                var dots = '';\n                for (var i = 0; i < points.length; i++) {\n                    var d = 'M ' + (margin + points[i][0] - wd / 2) + ' ' + height + ' L ' + (margin + points[i][0] + wd / 2) + ' ' + height + ' ' + (margin + points[i][0] + wd / 2) + ' ' + points[i][1] + ' ' + (margin + points[i][0] - wd / 2) + ' ' + points[i][1] + 'Z';\n                    // debugger;\n                    bricks += '<g class=\"lc-bar-elem\"><path class=\"lc-bar-elem\" data-line=\"' + line + '\" data-item=\"' + i + '\" d=\"' + d + '\" fill=\"' + serie.Color + '\" stroke=\"#000\" stroke-width=\"0\"></path>';\n                    if (this.Options.SeriesOptions.BarGradient) bricks += '<path class=\"lc-bar-elem-gradient\"  data-line=\"' + line + '\" data-item=\"' + i + '\" d=\"' + d + '\" fill=\"url(#' + GradientId + ')\" ></path>';\n                    bricks += '<path class=\"mt-chart-tooltipable\" data-type=\"bar\" data-line=\"' + line + '\" data-item=\"' + i + '\" d=\"' + d + '\" fill=\"#fff\" fill-opacity=\"0\" stroke=\"#fff\" stroke-width=\"0\"></path>';\n                    bricks += '</g>';\n                    //dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, serie.Color, serie.Point.Radius );\n                }\n                bricks += dots + '</g>';\n                Buffer.SeriesBar++;\n                return bricks;\n            }.bind(this);\n            this.__GetSvgCasual = function () {\n                var lines = '';\n                var bars = '';\n                for (var i = 0; i < this.Options.Series.length; i++) {\n                    if (!this.Options.Series[i].isVisible) continue;\n                    switch (this.Options.Series[i].Type) {\n                        case 'line':\n                            lines += this.__GetPathLine(this.Options.Series[i], i);\n                            break;\n                        case 'bar':\n                            bars += this.__GetPathBar(this.Options.Series[i], i);\n                            break;\n                    }\n                }\n                return bars + lines;\n            }.bind(this);\n            this.__GetSvgPie = function () {\n                var sectors = '';\n                var d = this.Height < this.Width ? this.Height * 0.9 : this.Width * 0.9;\n                //r= r/4;\n                //let wd = 2*r;\n                for (var i = 0; i < this.Options.Series.length; i++) {\n                    var sum = 0;\n                    var anglestart = -45;\n                    var r = d / 4 * (this.Options.Series.length - i) / (Buffer.SeriesCount.Pie + Buffer.SeriesCount.Ring);\n                    var wd = 2 * r;\n                    if (this.Options.Series[i].Type === 'ring') {\n                        wd = this.Options.Series[i].Width;\n                        r = r * 2 - wd / 2;\n                    }\n                    for (var j = 0; j < this.Options.Series[i].Data.length; j++) {\n                        sum += this.Options.Series[i].Data[j];\n                    }\n                    for (var _j2 = 0; _j2 < this.Options.Series[i].Data.length; _j2++) {\n                        var angle = this.Options.Series[i].Data[_j2] / sum * 360;\n                        //debugger;\n                        sectors += '<g>';\n                        sectors += '<path d=\"' + Lure.Chart.PieArc(this.Width / 2, this.Height / 2, r, anglestart, anglestart + angle) + '\" fill=\"none\" stroke=\"' + this.Options.Series[i].Colors[_j2] + '\" stroke-width=\"' + wd + '\" stroke-opacity=\"1\"></path>';\n                        sectors += '<path class=\"mt-chart-tooltipable\" data-type=\"pie\" data-line=\"' + i + '\" data-item=\"' + _j2 + '\" d=\"' + Lure.Chart.PieArc(this.Width / 2, this.Height / 2, r, anglestart, anglestart + angle) + '\" fill=\"none\" stroke=\"#fff\" stroke-width=\"' + wd + '\" stroke-opacity=\"0\"></path>';\n                        sectors += '</g>';\n                        anglestart += angle;\n                        //debugger;\n                    }\n                }\n                //debugger;\n                return sectors;\n            }.bind(this);\n\n            function Refresh() {\n                Buffer.SeriesBar = 0;\n\n                //-1. check Tooltip Temptale\n                //Init.Tooltip();\n                // //pp.Perf('Check-Tooltip');\n                //0. build legend\n\n                Init.Series();\n                //pp.Perf('Init-Series');\n\n                this.Block.Legend = Buffer.Legend;\n                //pp.Perf('Render-Legend');\n\n                //1. Init Y width\n\n                Init.AxisY();\n                //pp.Perf('Init-AxisY');\n                //2. Init X height, and build AxisX cuz we have Y width.\n                //Buffer.ParametersAxisX = Builder.CalcAxisX();\n                Init.AxisX();\n                Builder.AxisX();\n                //pp.Perf('Init-AxisX');\n                //3. Init scales Y axis\n\n                Init.ScaleY();\n                //this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.ParametersAxisX.Height), this);\n                //this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.AxisXParams.Height), this);\n                //pp.Perf('Init-AxisYScales');\n\n\n                //this.Block.AxisX = Builder.MakeAxisX();\n                //this.Block.AxisX.style.height = Buffer.AxisXParams.Height+'px';\n\n\n                this.Block.Grid = Builder.MakeGrid();\n                //pp.Perf('Render-Grid');\n\n                this.Block.AxisY = Builder.MakeAxisY();\n                //pp.Perf('Render-AxisY');\n                if (this.Options.Type === 'line' || this.Options.Type === 'bar') this.Block.Svg = chart.__GetSvgCasual();\n                if (this.Options.Type === 'pie' || this.Options.Type === 'ring') this.Block.Svg = chart.__GetSvgPie();\n                this.Block.AxisY.style.height = this.Height + 'px';\n                //pp.Perf('Render-Svg');\n\n                var lines = Lure.SelectAll('.mt-chart-serie[data-type=\"Line\"] path', this.Content);\n                LastRender.Height = this.Height;\n                LastRender.Width = this.Width;\n                lines.forEach(function (item) {\n                    var dash = item.getTotalLength();\n                    item.style.strokeDasharray = dash;\n                    item.style.strokeDashoffset = dash;\n                });\n                //pp.Perf('Animations-add');\n                //pp.Elapsed('-elapsed-');\n            }\n\n            /********************************************************************************/\n            /*******/\n            /*<tooltips>*/\n            Init.Tooltip();\n            this.Tooltip = new Lure.Content({\n                Name: 'Tooltipchek',\n                Target: this.Block.ChartArea,\n                Content: '<div class=\"mt-chart-tooltip\">\\n                        <div class=\"val\">' + this.Options.Tooltip.Template + '</div>\\n                      </div>',\n                Visible: false,\n                Controller: {\n                    Data: {}\n                },\n                BeforeShow: function BeforeShow(a, b) {},\n                Prop: function Prop() {\n                    this._Timer = null;\n                    this._Timer2 = null;\n                },\n                Shower: function Shower() {\n                    clearTimeout(this._Timer);\n                    clearTimeout(this._Timer2);\n                    this.Content.style.display = '';\n                    this.Content.style.opacity = '1';\n                },\n                Hider: function Hider() {\n                    clearTimeout(this._Timer);\n                    this._Timer = setTimeout(function () {\n                        this.Content.style.opacity = '0';\n                        this._Timer2 = setTimeout(function () {\n                            this.Content.style.display = 'none';\n                        }.bind(this), 200);\n                    }.bind(this), 800);\n                },\n                Show: function Show(options) {\n                    clearTimeout(this._Timer);\n                    this.Data.Name = options.data[0];\n                    this.Data.Value = options.data[1];\n                    this.Refresh();\n                    this.Content.style.left = options.pos[0] + 7 + \"px\";\n                    this.Content.style.top = options.pos[1] - this.Content.clientHeight - 7 + \"px\";\n                    this.Content.style.backgroundColor = options.color;\n                    //this._Timer = setTimeout(this.Hide, 2000);\n                },\n                Methods: function Methods() {\n                    this.Do = function (e) {\n                        var tag = e.currentTarget.dataset['type'];\n                        switch (tag) {\n                            case 'line':\n                                this.DoCircle(e);\n                                break;\n                            case 'bar':\n                                this.DoBar(e);\n                                break;\n                            case 'pie':\n                                this.DoPie(e);\n                                break;\n\n                        }\n                    }.bind(this);\n                    this.DoCircle = function (e) {\n                        var circle = e.currentTarget;\n                        var i = parseInt(circle.dataset['line']);\n                        var j = parseInt(circle.dataset['item']);\n                        var color = circle.attributes['stroke'].value;\n                        //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\n                        var width = parseInt(circle.attributes['stroke-width'].value);\n                        circle.attributes['fill'].value = color;\n                        circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\n                        circle.attributes['stroke'].value = \"#fff\";\n\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\n                        var o = {\n                            data: [Series[i].Name, Series[i].Data[j]],\n                            color: color,\n                            pos: Buffer.SeriesPoints[i][j] //[e.offsetX, e.offsetY]\n                        };\n                        this.Show(o);\n                    }.bind(this);\n                    this.DoBar = function (e) {\n                        var bar = e.currentTarget;\n                        bar.setAttribute('fill-opacity', 0.2);\n                        var i = parseInt(bar.dataset['line']);\n                        var j = parseInt(bar.dataset['item']);\n                        // bar.attributes['stroke-width'].value = 2;\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\n                        var o = {\n                            data: [chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\n                            color: chart.Options.Series[i].Color,\n                            pos: Buffer.SeriesPoints[i][j] //[e.offsetX, e.offsetY]\n                        };\n                        this.Show(o);\n                    }.bind(this);\n                    this.DoPie = function (e) {\n                        var bar = e.currentTarget;\n                        bar.setAttribute('stroke-opacity', 0.2);\n                        var i = parseInt(bar.dataset['line']);\n                        var j = parseInt(bar.dataset['item']);\n                        // bar.attributes['stroke-width'].value = 2;\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\n                        var o = {\n                            data: [chart.Options.Series[i].Labels ? chart.Options.Series[i].Labels[j] : chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\n                            color: chart.Options.Series[i].Colors[j],\n                            pos: [e.offsetX, e.offsetY]\n                        };\n                        this.Show(o);\n                    }.bind(this);\n\n                    this.Undo = function (e) {\n                        var tag = e.currentTarget.dataset['type'];\n                        switch (tag) {\n                            case 'line':\n                                this.UndoCircle(e);\n                                break;\n                            case 'bar':\n                                this.UndoBar(e);\n                                break;\n                            case 'pie':\n                                this.UndoPie(e);\n                                break;\n                        }\n                    };\n                    this.UndoCircle = function (e) {\n                        var circle = e.currentTarget;\n                        var width = parseInt(circle.attributes['stroke-width'].value);\n                        circle.attributes['stroke'].value = circle.attributes['fill'].value;\n                        circle.attributes['fill'].value = \"#fff\";\n                        circle.attributes['r'].value -= width;\n                        this.Hide();\n                    };\n                    this.UndoBar = function (e) {\n                        var bar = e.currentTarget;\n                        bar.setAttribute('fill-opacity', 0);\n                        this.Hide();\n                    };\n                    this.UndoPie = function (e) {\n                        var pie = e.currentTarget;\n                        pie.setAttribute('stroke-opacity', 0);\n                        this.Hide();\n                    };\n                },\n                AfterBuild: function AfterBuild() {}\n            });\n            Lure.AddEventListenerGlobal('mouseover', '.mt-chart-point, .mt-chart-tooltipable', function (e) {\n                this.Tooltip.Do(e);\n            }, this.Content, this);\n            Lure.AddEventListenerGlobal('mouseout', '.mt-chart-point, .mt-chart-tooltipable', function (e) {\n                chart.Tooltip.Undo(e);\n            }, this.Content);\n            /*</tooltips>*/\n\n            this.TestB = function () {\n                var per = performance.now();\n                // Builder();\n                Lure.Perf(per, 'builder');\n            };\n            /*\r\n            this._TimerRefresh = null;\r\n            this._IntervalResponse = setInterval(function () {\r\n                if (this.Width !== LastRender.Width || this.Height !== LastRender.Height){\r\n                    clearTimeout(this._TimerRefresh);\r\n                    console.log('[changed]');\r\n                    LastRender.Height = this.Height;\r\n                    LastRender.Width = this.Width;\r\n                    this._TimerRefresh = setTimeout(function () {\r\n                        console.log('[redraw]');\r\n                        Refresh.call(this);\r\n                        }.bind(this) ,200);\r\n                }\r\n            }.bind(this), 200);\r\n            */\n            this.Buffer = Buffer;\n\n            // Init\n\n\n            this.Width; //just init\n            //this.Heigth;   //just init\n            //pp.Perf('Constructor');\n            Refresh.call(this);\n            //Refresh.call(this);\n            //**  API  **//\n\n            this.Refresh = function () {\n                Refresh.call(this);\n            }.bind(this);\n        }\n\n        _createClass(LureChart, [{\n            key: 'Height',\n            get: function get() {\n                return this.Block.Svg.clientHeight;\n            }\n        }, {\n            key: 'Width',\n            get: function get() {\n                return this.Block.Svg.clientWidth - this.Options.Padding;\n            }\n            /*statics*/\n\n        }], [{\n            key: 'GetSeriePointOptions',\n            value: function GetSeriePointOptions(serie, isGraph) {\n                var p = serie.Point ? serie.Point : {};\n                p.Visible = typeof p.Visible === 'undefined' || p.Visible;\n                p.Radius = p.Radius ? p.Radius : 4 + serie.Width / 4;\n                if (Number.isNaN(p.Radius)) debugger;\n                return p;\n            }\n        }, {\n            key: 'GetScaleY',\n            value: function GetScaleY(series, height, ctx) {\n                if (ctx.Type === 'pie') {\n                    return [];\n                }\n                var min = series[0].Data[0];\n                var max = series[0].Data[0];\n                var isAutoScale = true;\n                var isAutoStep = true;\n                if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto') {\n                    isAutoScale = false;\n                    min = ctx.Options.AxisY.Scale[0];\n                    max = ctx.Options.AxisY.Scale[1];\n                }\n                if (ctx.Options.AxisY.Scale[2] !== 'auto') isAutoStep = false;\n                var mm = [[series[0].Data[0], series[0].Data[0]]];\n                var index = 0;\n                var scales = [];\n\n                var sc = {\n                    Scales: [],\n                    Dict: [],\n                    MinMax: null\n                };\n                for (var i = 0; i < series.length; i++) {\n                    sc.Dict[i] = 0;\n                    if (series[i].OwnAxis) {\n                        index++;\n                        if (typeof series[i].OwnAxis[0] !== 'undefined') mm.push(series[i].OwnAxis);else mm.push([series[i].Data[0], series[i].Data[0]]);\n                        sc.Dict[i] = index;\n                    }\n                    for (var j = 0; j < series[i].Data.length; j++) {\n                        if (isAutoScale) {\n                            if (series[i].Data[j] < min) min = series[i].Data[j];\n                            if (series[i].Data[j] > max) max = series[i].Data[j];\n                        }\n                        if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined') {\n                            if (series[i].Data[j] < mm[index][0]) mm[index][0] = series[i].Data[j];\n                            if (series[i].Data[j] > mm[index][1]) mm[index][1] = series[i].Data[j];\n                        }\n                    }\n                }\n                mm[0] = [min, max];\n                sc.MinMax = mm;\n                for (var _i5 = 0; _i5 < mm.length; _i5++) {\n                    var order = mm[_i5][1].toString().length;\n                    var step = void 0;\n                    if (_i5 === 0 && !isAutoStep) {\n                        step = ctx.Options.AxisY.Scale[2];\n                    } else {\n                        step = mm[_i5][2] ? mm[_i5][2] : ((mm[_i5][1] - mm[_i5][0]) * 40 / height / Math.pow(10, order - 1) / 5).toFixed(1) * Math.pow(10, order - 1) * 5;\n                    }\n                    var s = mm[_i5][0];\n                    var scale = [];\n                    if (order < 3 || true) {\n                        //debugger;\n                        while (s <= mm[_i5][1] + ctx.Options.Series[_i5].Width / 2) {\n                            scale.push(s);\n                            s += step;\n                        }\n                        scale.push(s);\n                        sc.Scales.push(scale);\n                    }\n                }\n                return sc;\n            }\n        }, {\n            key: 'GetAbscissa',\n            value: function GetAbscissa(labels, width) {\n                var stepX = width / labels.length;\n                return labels.map(function (a, i) {\n                    return i * stepX;\n                });\n            }\n        }, {\n            key: 'GetOrdinata',\n            value: function GetOrdinata(serie, scale, mm, height) {\n                var min = mm[0];\n                var max = mm[1];\n                var scaleCoefficient = scale[scale.length - 1] / max;\n                var ordinata = [];\n                for (var j = 0; j < serie.length; j++) {\n                    ordinata.push(height - (serie[j] - min) * height / (max - min) / scaleCoefficient);\n                }\n                //console.log('Y', Y);\n                //console.log('ordinate', ordinate);\n                //console.log(`min=${min} max=${max}`, height);\n                //ordinata.push(ordinate);\n                //console.log('ordinata', ordinata);\n                return ordinata;\n            }\n        }, {\n            key: 'GetPoints',\n            value: function GetPoints(X, Y) {\n                var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n                var points = [];\n                //let length = X.length >= Y.length ? X.length:Y.length;\n                for (var i = 0; i < Y.length; i++) {\n                    points.push([X[i] + padding, Y[i]]);\n                }\n                return points;\n            }\n        }, {\n            key: 'aGetPath',\n            value: function aGetPath(points, type, line, color, width) {\n                switch (type) {\n                    case 'line':\n                        return Lure.Chart.GetPathLine(points, line, color, width);\n                    case 'bar':\n                        return Lure.Chart.GetPathBar(points, line, color, width);\n                    case 'pie':\n                        return '';\n                }\n            }\n        }, {\n            key: 'aGetPathLine',\n            value: function aGetPathLine(points, line, color, width) {\n                var isDots = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n                var n = points.length;\n\n                var xs = []; //x\n                var ys = []; //y\n                var dys = []; //dx\n                var dxs = []; //dy\n                var ds = []; //derivative\n                var ms = []; //desired slope (m) at each point using Fritsch-Carlson method\n                for (var i = 0; i < n; i++) {\n                    xs[i] = points[i][0];\n                    ys[i] = points[i][1];\n                }\n                // Calculate deltas and derivative\n                for (var _i6 = 0; _i6 < n - 1; _i6++) {\n                    dys[_i6] = ys[_i6 + 1] - ys[_i6];\n                    dxs[_i6] = xs[_i6 + 1] - xs[_i6];\n                    ds[_i6] = dys[_i6] / dxs[_i6];\n                }\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\n                ms[0] = ds[0];\n                ms[n - 1] = ds[n - 2];\n                for (var _i7 = 1; _i7 < n - 1; _i7++) {\n                    if (ds[_i7] === 0 || ds[_i7 - 1] === 0 || ds[_i7 - 1] > 0 !== ds[_i7] > 0) {\n                        ms[_i7] = 0;\n                    } else {\n                        ms[_i7] = 3 * (dxs[_i7 - 1] + dxs[_i7]) / ((2 * dxs[_i7] + dxs[_i7 - 1]) / ds[_i7 - 1] + (dxs[_i7] + 2 * dxs[_i7 - 1]) / ds[_i7]);\n                        if (!isFinite(ms[_i7])) {\n                            ms[_i7] = 0;\n                        }\n                    }\n                }\n                var d = 'M ' + xs[0] + ',' + ys[0];\n                var dots = '<g class=\"mt-chart-dots\">';\n                for (var _i8 = 0; _i8 < n - 1; _i8++) {\n                    //console.log(d);\n                    d += ' C ' + (xs[_i8] + dxs[_i8] / 3) + ',' + (ys[_i8] + ms[_i8] * dxs[_i8] / 3) + ' ' + (xs[_i8 + 1] - dxs[_i8] / 3) + ',' + (ys[_i8 + 1] - ms[_i8 + 1] * dxs[_i8] / 3) + ' ' + xs[_i8 + 1] + ',' + ys[_i8 + 1];\n                    if (isDots) dots += Lure.Chart.GetPathLineDot(xs[_i8], ys[_i8], line, _i8, color, width);\n                }\n                dots += '</g>';\n                //return d;\n                //console.log(d);\n                return '<g class=\"mt-chart-serie\"><path data-line=\"' + line + '\" d=\"' + d + '\" fill=\"none\" stroke=\"' + color + '\" stroke-width=\"' + width + '\"></path> ' + dots + '</g>';\n            }\n        }, {\n            key: 'GetPathLineDot',\n            value: function GetPathLineDot(x, y, i, j, color, width) {\n                return '<circle class=\"mt-chart-point\" data-type=\"line\" data-line=\"' + i + '\" data-item=\"' + j + '\" cx=\"' + x + '\" cy=\"' + y + '\" r=\"' + width + '\" stroke=\"' + color + '\" stroke-width=\"2\" fill=\"#fff\" ></circle>';\n            }\n        }, {\n            key: 'aGetPathBar',\n            value: function aGetPathBar(points, line, color, width) {\n                var wd = 30;\n                console.log('GetPathBar', points);\n                // return '';\n                var p = '<path data-line=\"' + line + '\" d=' + 0 + ' fill=\"' + color + '\" stroke=\"' + color + '\" stroke-width=\"' + width + '\"></path>';\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\n                var dots = '';\n                for (var i = 0; i < points.length; i++) {\n                    var d = 'M ' + points[i][0] + ' ' + points[i][1] + ' L ' + points[i][0] + ' ' + points[i][1];\n                    //dots += Lure.Chart.GetPatwehLineDot(points[i][0] , points[i][1], line, i, color, width );\n                }\n                // debugger;\n                return do2ts;\n            }\n        }, {\n            key: 'PolarToCartesius',\n            value: function PolarToCartesius(centerX, centerY, radius, angleInDegrees) {\n                var angleInRadians = (angleInDegrees - 0) * Math.PI / 180;\n\n                return {\n                    x: centerX + radius * Math.cos(angleInRadians),\n                    y: centerY + radius * Math.sin(angleInRadians)\n                };\n            }\n        }, {\n            key: 'PieArc',\n            value: function PieArc(x, y, radius, startAngle, endAngle) {\n                //debugger;\n                var start = Lure.Chart.PolarToCartesius(x, y, radius, endAngle);\n                var end = Lure.Chart.PolarToCartesius(x, y, radius, startAngle);\n\n                var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n                var d = [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(\" \");\n\n                return d;\n            }\n        }, {\n            key: 'CheckOwnAxis',\n            value: function CheckOwnAxis(ep) {\n                if (!ep.OwnAxis) return false;\n                if (Array.isArray(ep.OwnAxis)) {\n                    var min = false;\n                    var max = false;\n                    if (ep.OwnAxis[0] !== 'auto' || typeof ep.OwnAxis[0] !== 'undefined') min = ep.Data[0];\n                    if (ep.OwnAxis[1] !== 'auto' || typeof ep.OwnAxis[1] !== 'undefined') max = ep.Data[1];\n                    if (!min && !max) return ep.OwnAxis;\n\n                    for (var i = 0; i < ep.Data.length; i++) {\n                        if (ep.Data[i] < min) min = ep.Data[i];\n                        if (ep.Data[i] > max) max = ep.Data[i];\n                    }\n                }\n            }\n            /*builder*/\n\n        }, {\n            key: 'MakeLegend',\n            value: function MakeLegend(Serie, i) {\n                var id = 'lc-legeng_ch' + Lure.Chart.Count;\n                return '<div class=\"mt-chart-legend__item row\">\\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" ' + (Serie.isVisible ? 'checked=\"cheched\"' : '') + ' id=\"' + id + '\">\\n                          <div class=\"mt-legend-icon\" style=\"background-color: ' + Serie.Color + '\"></div>\\n                          <label class=\"mt-legend-label\" for=\"' + id + '\">' + Serie.Name + '</label>\\n                        </div>';\n            }\n        }, {\n            key: 'GetGrid',\n            value: function GetGrid(sizeX, sizeY) {\n                var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n                var grid = '';\n                for (var i = 0; i < sizeY; i++) {\n                    grid += '<div class=\"mt-chart__grid-line row flex-100 flex-between\" >';\n                    for (var j = 0; j < sizeX; j++) {\n                        if (j === 0) grid += '<div class=\\'mt-chart__grid-item flex-100\\' style=\"width: ' + padding + 'px; max-width: ' + padding + 'px\"></div>';\n                        grid += '<div class=\\'mt-chart__grid-item flex-100\\'></div>';\n                    }\n                    grid += '</div>';\n                }\n                grid += '';\n                return grid;\n            }\n        }]);\n\n        return LureChart;\n    }()\n};\n\nLure.Chart = Lure.Plugin.Chart.Chart;\nLure.Chart.Count = 0;\n\nLure._GenerateString = function () {\n    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    var gen = prefix + (Math.random().toString(36) + Math.random().toString(36) + Math.random().toString(36)).replace(\"0.\", '').replace(/[\\d]+/, '').substring(0, 1);\n    if (Lure.Select('#' + gen)) {\n        gen = Lure._GenerateString(prefix);\n    }\n    return gen;\n};","//\r\n// Lure Framework v0.9.1 [29.08.2017]\r\n//\r\n//<utils>;\r\nif (!Date.prototype.format){\r\n    Date.prototype.format = function (format) {\r\n        return Lure._DateFormat(this, format);\r\n    }\r\n}\r\n//</utils>\r\nlet Lure = (function(){\r\n    class LureClass {\r\n        constructor() {\r\n            this.Plugin = {};\r\n            let $this = this;\r\n            this.Debug = false;\r\n            this.isEditableEventsEnabled = false;\r\n            //regexes\r\n            const regexEach = new RegExp(/{{#each\\s+([^}]+)}}/g);\r\n            const regexIfOuter = new RegExp(/{{#if\\s+([^}]+)}}([\\s\\S]*?){{#endif}}/g);\r\n            const regexIfInner = new RegExp(/{{#if([\\s\\S]*?)}}/g);\r\n            const regexExpressions = new RegExp(/{{([^#}]+)}}/g);\r\n            const regexEditable = new RegExp(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/g);\r\n            //compile helpers\r\n            const spaces = \"    \";\r\n            const preCompileIfOuter = function(s){\r\n                s = s\r\n                    .replace(/#IF/g, '#if')\r\n                    .replace(/#ENDIF/g, '#endif')\r\n                    .replace(regexIfOuter, function (bkt, condition, expression ) {\r\n                        return `\\`+\r\n/* OUTER \"IF\" */\r\n(function($this){\r\n    if (${preParseObjectChecker(condition)}) {\r\n        return \\`${expression}\\`;\r\n    }\r\n    return '';\r\n})($this)+\\``;\r\n                    });\r\n                return s;\r\n            };\r\n            const preCompileIfInner = function(s){\r\n                s = s.replace(regexIfInner, function (s, condition) {\r\n                    condition = condition\r\n                        .replace(/&gt;/g,  \">\")\r\n                        .replace(/&lt;/g,  \"<\")\r\n                        .replace(/#less/g, \" < \")\r\n                        .replace(/#more/g, \" > \")\r\n                        .replace(/&amp;/g, \"&\")\r\n                        .replace(/\\|/g,    '\"');\r\n                    return `\\`+\r\n    /* LOCAL \"IF\" */\r\n    (function(){\r\n        return (${condition}); \r\n        return '';})()+\\``;\r\n                });\r\n                return s;\r\n            };\r\n            const preCompileEach = function(s){\r\n                s = s\r\n                    .replace(/{{#EACH/g, \"{{#each\")\r\n                    .replace(/{{#ENDEACH/g, \"{{#endeach\");\r\n                let EachList = s.match(regexEach);\r\n                let lvl = 0;\r\n                if (EachList !== null){\r\n                    for (let i = EachList.length-1; i >= 0; i--){\r\n                        let current = EachList[i];\r\n                        let isInnerEach = false;\r\n                        lvl++;\r\n                        let StartPoint = s.indexOf(current);\r\n                        let EndPoint   = s.indexOf(\"{{#endeach}}\", StartPoint);\r\n\r\n                        let prevStarts = s.slice(0, StartPoint).match(regexEach);\r\n                        prevStarts = prevStarts!==null ? prevStarts.length: 0;\r\n                        let prevEnds = s.slice(0, StartPoint).match(/{{#endeach}}/g);\r\n                        prevEnds = prevEnds!==null ? prevEnds.length: 0;\r\n                        if ( (prevStarts > prevEnds ))\r\n                        {\r\n                            isInnerEach = true;\r\n                            lvl = 0;\r\n                        }\r\n                        ////\r\n                        let string_Each = s.slice(StartPoint, EndPoint+12);\r\n                        let expression  = string_Each.slice(current.length, string_Each.length-12);\r\n                        let ObjectName = current.replace(/{{#each\\s+([\\s\\S]+)}}/, function(a,name){\r\n                            return name;\r\n                        });\r\n                        ObjectName = preParseObjectChecker(ObjectName);\r\n                        //the each template\r\n                        let eachComplied = '`+' +\r\n                            spaces.repeat(lvl)+'/* EACH */(function(inner, $parent){                                                                   \\r\\n' +\r\n                            spaces.repeat(lvl)+'    if (!inner || (Object.keys(inner).length === 0 && inner.constructor === Object && isNaN(inner)))   \\r\\n' +\r\n                            spaces.repeat(lvl)+'        return \"\";                                                                                     \\r\\n' +\r\n                            spaces.repeat(lvl)+'    let string_result= \"\";                                                                             \\r\\n' +\r\n                            spaces.repeat(lvl)+'    for(let j = 0; j < inner.length; j++){                                                             \\r\\n' +\r\n                            spaces.repeat(lvl)+'        let $this = inner[j];                                                                          \\r\\n' +\r\n                            spaces.repeat(lvl)+'        let o = inner[j];                                                                              \\r\\n' +\r\n                            spaces.repeat(lvl)+'        string_result = string_result + \\`'+preParse(expression) + '\\`;                                \\r\\n' +\r\n                            spaces.repeat(lvl)+'    }                                                                                                  \\r\\n' +\r\n                            spaces.repeat(lvl)+'    return string_result;                                                                              \\r\\n' +\r\n                            spaces.repeat(lvl)+'})('+ObjectName+', {$parent: typeof $parent !== \"undefined\"?$parent:null, $this: $this, i: i} ) +`         ';\r\n                        s = s.replace(string_Each, eachComplied)\r\n\r\n                    }\r\n                }\r\n                return s;\r\n            };\r\n            const preCompileEditable = function(s){\r\n                return  s.replace(regexEditable, function (match, editable, content) {\r\n                    match = match.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                        return a.replace(b, ` data-line=\"{{i}}\" data-property=\"${content.replace('{{','').replace('}}','')}\">`);\r\n                    });\r\n                    return match.replace(content, `<div class=\"editable-helper editable-value\">${content}</div><div class=\"editable-helper editable-icon\"></div>`);\r\n                });\r\n\r\n            };\r\n            const preParseObjectChecker = function (ObjectName) {\r\n                //ok check if it's expression\r\n                if (ObjectName.indexOf('Available + Dis')>-1)\r\n                    ;//debugger;\r\n                function checking(c) {\r\n\r\n                    let s = c.replace(/\\s/g, \"\");\r\n                    let containsSpecialObject = (s.indexOf('$item')> -1 || s.indexOf('$this') > -1 || s.indexOf('$parent') > -1 ) ;\r\n                    let containsSpecialObjectTreeBuiler = (s.indexOf('$index')> -1 || s.indexOf('$j')> -1 || s.indexOf('$key') > -1 || s.indexOf('$lvl') > -1 || s.indexOf('$g.') > -1 ) ;\r\n                    let isSpecialSymbol = (s === \"?\" || s.indexOf(\"=\") > -1 || s.indexOf(\">\") > -1|| s.indexOf(\"<\") > -1);\r\n                    let isString = s.match(/^[\"'\\\\][\\s\\S]*[\"'\\\\]$/) !== null;\r\n                    let isIterator = s === \"i\" || s === \"j\";\r\n                    let isNumber = !isNaN(s);\r\n                    if (containsSpecialObject || containsSpecialObjectTreeBuiler || isIterator || isNumber || isString ||isSpecialSymbol){\r\n                        if (s.indexOf('$g.') > -1){ //if global object\r\n                            return s.replace('$g.', '');\r\n                        }\r\n                        return c;\r\n                    }\r\n                    return \"o.\"+s;\r\n                }\r\n                ObjectName = ObjectName.replace(/[^\\-+\\/%()*]+/g, function (c) {\r\n                    let parent = c.match(/&/g);\r\n                    if (parent !== null){\r\n                        for (let i = 0; i < parent.length; i++){\r\n                            if (i < parent.length-1)\r\n                                c = c.replace('&', \"$parent\");\r\n                            else\r\n                                c = c.replace('&', \"$parent.$this\");\r\n                        }\r\n                        return c;\r\n                    }\r\n                    else {\r\n                        return checking(c);\r\n                    }\r\n                });\r\n                ObjectName = ObjectName.replace(/\\\\'/g,\"'\");\r\n                ObjectName = \"(\"+ObjectName+\")\"; //fucking concatenation shell\r\n                return ObjectName;\r\n            };\r\n            const preParse = function(c, isCheckExpression = true){\r\n                return c.replace(regexExpressions, function(bkt, expression){\r\n                    if (isCheckExpression)\r\n                        return '${'+preParseObjectChecker(expression)+'}';\r\n                    else\r\n                        return '${'+expression+'}';\r\n                });\r\n            };\r\n            /**\r\n             * Template compiler\r\n             * @param {string} DomString\r\n             * @param {boolean} isListElement\r\n             * @return {Function}\r\n             * @constructor\r\n             */\r\n            this.Compile = function(DomString, isListElement) {\r\n                DomString = DomString.replace(/[\\n]+/g, \" \").replace(/[ ]{3,}/g, '');\r\n                //shell '\r\n                DomString = DomString.replace(/'/g, \"\\\\'\");\r\n                //.replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&amp;/g, \"&\");\r\n                if (isListElement)\r\n                {\r\n                    DomString = preCompileEditable(DomString);\r\n                    DomString = preCompileIfOuter(DomString);\r\n                    DomString = preCompileEach(DomString);\r\n                }\r\n\r\n                DomString = preParse(DomString);\r\n                DomString = preCompileIfInner(DomString);\r\n                let string_Function = `\r\nlet $this = o;\r\nlet $item = o;\r\nlet $num = i+1;\r\nlet $denum = length-i;\r\n//treebuilder's\r\nlet $index;\r\nlet $key;\r\nlet $lvl;\r\nlet $j;\r\nif (extra){\r\n    $index = extra.$index;\r\n    $key = extra.$key;\r\n    $lvl = extra.$lvl;\r\n    $j = extra.$j;\r\n}\r\nlet string_Result = \"\";\r\nif (o === undefined || (Object.keys(o).length === 0 && o.constructor === Object && isNaN(o)) ) \r\n    return '';\r\nreturn \\``;\r\n                string_Function += DomString +'`;';\r\n                //if ie\r\n                //let isUnbrowser = true;\r\n                //if (isUnbrowser){\r\n                    string_Function = string_Function\r\n                        .replace(/`/g, `'`)\r\n                        .replace(/\\$\\{([^}]*)\\}/g, function(match, val){\r\n                        return `'+${val}+'`\r\n                    });\r\n                //}\r\n\r\n                let function_f;\r\n                try {\r\n                    function_f = new Function('o', 'i', 'length', 'extra', string_Function);\r\n                }\r\n                catch (e){\r\n                    console.info(string_Function);\r\n                    console.error(e);\r\n                }\r\n                //console.log('Compiled:');\r\n                //console.log(f);\r\n                return function_f;\r\n            };\r\n            this._EditablesEventListenerRun = function(content){\r\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget);\r\n                }, content);\r\n                $this.AddEventListenerGlobal('click', '.editable-icon', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget.closest('.editable'));\r\n                }, content);\r\n                $this.AddEventListenerGlobal('dblclick', '.editable', function (e) {\r\n                    $this.Editable.RemoveEdits();\r\n                    $this.Editable.AddEdits(e.currentTarget);\r\n                }, content);\r\n                //editing\r\n                $this.AddEventListenerGlobal('change', '.editable-editor', function (e) {\r\n                    let val = e.currentTarget.value;\r\n                    let valPrev = e.currentTarget.parentElement.dataset['value'];\r\n                    if (val !== valPrev)\r\n                        e.currentTarget.parentElement.classList.add('editable-waiting');\r\n                    else\r\n                        e.currentTarget.parentElement.classList.remove('editable-waiting');\r\n                }, content);\r\n\r\n                $this.AddEventListenerGlobal('keyup', '.editable-textbox', function (e) {\r\n                    if(e.keyCode === 13) {\r\n                        $this.Editable.Save(e.currentTarget.closest('.editable'),  e.currentTarget.value);\r\n                        return false;\r\n                    }\r\n\r\n                    let val = e.currentTarget.value;\r\n                    let valPrev = e.currentTarget.parentElement.dataset['value'];\r\n                    if (val !== valPrev)\r\n                        e.currentTarget.parentElement.classList.add('editable-waiting');\r\n                    else\r\n                        e.currentTarget.parentElement.classList.remove('editable-waiting');\r\n\r\n                }, content);\r\n\r\n                //save\r\n                $this.AddEventListenerGlobal('click', '.editable-save-button', function (e) {\r\n                    let EditableElement = e.currentTarget.closest('.editable');\r\n                    $this.Editable.Save(e.currentTarget.closest('.editable'),  EditableElement.querySelector('.editable-editor').value);\r\n                }, content);\r\n\r\n\r\n\r\n                if ($this.isHasEditablesEventsEnabled)\r\n                    return;\r\n                document.addEventListener('click', function (e) {\r\n                    if ( e.target.classList.contains('editable-helper') && document.querySelectorAll('.editable-helper, .editable-editing') !== null)\r\n                    {\r\n                        return;\r\n                    }\r\n                    $this.Editable.RemoveEdits();\r\n                });\r\n                $this.isHasEditablesEventsEnabled = true;\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {DocumentFragment}\r\n             * @constructor\r\n             */\r\n            this.CreateElementFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                return frag.childNodes[0];\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} string\r\n             * @param {string} ownerTagName\r\n             * @return {Array}\r\n             * @constructor\r\n             */\r\n            this.CreateElementsFromString = function(string, ownerTagName = \"div\"){\r\n                let frag = document.createDocumentFragment();\r\n                let elem = document.createElement(ownerTagName);\r\n                elem.innerHTML = string;\r\n                while (elem.childNodes[0]) {\r\n                    frag.appendChild(elem.childNodes[0]);\r\n                }\r\n                if (frag.childNodes.length > 0)\r\n                {\r\n                    let nodes = [];\r\n                    for (let i = 0; i < frag.childNodes.length; i++)\r\n                        nodes.push(frag.childNodes[i]);\r\n                    return nodes;\r\n                }\r\n                return null;\r\n            };\r\n            /**\r\n             *\r\n             * @param {css, HTMLElement} query\r\n             * @param parent\r\n             * @return {HTMLElement}\r\n             * @constructor\r\n             */\r\n            this.Select = function(query, parent = document){\r\n                if (query === '' || query === null)\r\n                    return null;\r\n                return query instanceof Node ? query : parent.querySelector(query);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} Selector\r\n             * @param {HTMLElement} parent\r\n             * @return {NodeList}\r\n             * @constructor\r\n             */\r\n            this.SelectAll = function(Selector, parent = document){\r\n                if (typeof Selector === 'undefined')\r\n                    return [];\r\n                if (typeof Selector.tagName !== 'undefined' || Selector === document)\r\n                    return [Selector];\r\n                return parent.querySelectorAll(Selector);\r\n            };\r\n            /**\r\n             *\r\n             * @param {string} eventName\r\n             * @param {string} selector\r\n             * @param {function} handler\r\n             * @param {HTMLElement} parent\r\n             * @param {Lure.Content} thisArg\r\n             * @constructor\r\n             */\r\n            this.AddEventListenerGlobal = function(eventName, selector, handler, parent = document, thisArg){\r\n                parent.addEventListener(eventName, function(e) {\r\n                    let target = e.target;\r\n                    let isIt = false;\r\n                    let event = Lure._EventClone(e);\r\n                    let elems = parent.querySelectorAll(selector);\r\n                    if (elems[0] === target)\r\n                    {\r\n                        event.currentTarget = target;\r\n                        isIt = true;\r\n                    }\r\n                    if (!isIt){\r\n                        for (let i = 0; i < elems.length; i++){\r\n                            if (elems[i].contains(target)){\r\n                                isIt = true;\r\n                                event.currentTarget = target.closest(selector);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (isIt){\r\n                        handler.call(thisArg? thisArg : event.currentTarget, event);\r\n                    }\r\n                });\r\n            };\r\n            /**\r\n             *\r\n             * @param {HTMLElement} HTMLElement\r\n             * @return {boolean}\r\n             */\r\n            this.isVisible = function (HTMLElement){\r\n                //check invisible state;\r\n                let isVisibleSelf = function(element){\r\n                    let ContentStyle = window.getComputedStyle(element);\r\n                    if ( (ContentStyle.display === \"none\") || (ContentStyle.opacity === \"0\") || (ContentStyle.visibility === \"hidden\") )\r\n                        return false;\r\n                    //check for null-size\r\n                    if ( (parseInt(ContentStyle.minWidth) === 0 || ContentStyle.minWidth === \"auto\")  && parseInt(ContentStyle.width) === 0)\r\n                        return false;\r\n                    if ( (parseInt(ContentStyle.minHeight) === 0 || ContentStyle.minHeight === \"auto\") && parseInt(ContentStyle.height) === 0)\r\n                        return false;\r\n                    return true;\r\n                };\r\n                let isVisibleParent = function (element) {\r\n                    while (element.parentElement){\r\n                        if (!isVisibleSelf(element.parentElement))\r\n                        {\r\n                            return false;\r\n                        }\r\n                        element = element.parentElement;\r\n                    }\r\n                    return true;\r\n                };\r\n                if (!isVisibleSelf(HTMLElement))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                return isVisibleParent(HTMLElement);\r\n\r\n                return true;\r\n            };\r\n            /**\r\n             *\r\n             * @param e\r\n             * @return {ClonedEvent}\r\n             * @constructor\r\n             */\r\n            this._EventClone = function(e) {\r\n                function ClonedEvent() {}\r\n                let clone=new ClonedEvent();\r\n                for (let p in e) {\r\n                    let d = Object.getOwnPropertyDescriptor(e, p);\r\n                    if (d && (!d.writable || !d.configurable || !d.enumerable || d.get || d.set)) {\r\n                        Object.defineProperty(clone, p, d);\r\n                    }\r\n                    else {\r\n                        clone[p] = e[p];\r\n                    }\r\n                }\r\n                Object.setPrototypeOf(clone, e);\r\n                return clone;\r\n            };\r\n\r\n            this.GetFileText = function (url) {\r\n                return new Promise(function (resolve, reject) {\r\n                    let xhr = new XMLHttpRequest();\r\n                    xhr.onload = function () {\r\n                        resolve( xhr.response);\r\n                    };\r\n                    xhr.onerror = function () {\r\n                        reject(new Error(\r\n                            'XMLHttpRequest Error: '+this.statusText));\r\n                    };\r\n                    if (url.indexOf('..') > -1)\r\n                        url = url.replace('..', document.location.protocol + \"//\" + document.location.host);\r\n                    else {\r\n                        url = document.location.href.substring(0, document.location.href.lastIndexOf('/')+1) + url;\r\n                    }\r\n                    console.log('Lure.GetFileText', url);\r\n                    xhr.open('GET', url);\r\n                    //xhr.setRequestHeader('Content-Type',\"text/plain; charset=x-user-defined\");\r\n                    xhr.send();\r\n                });\r\n\r\n\r\n            };\r\n            this.GetTextWidth = function(txt, fontname, fontsize){\r\n                if(this.c === undefined){\r\n                    this.c=document.createElement('canvas');\r\n                    this.ctx=this.c.getContext('2d');\r\n                }\r\n                this.ctx.font = fontsize + ' ' + fontname;\r\n                return this.ctx.measureText(txt).width;\r\n            };\r\n            this.GetInlineSize = function(elem, fontSize='1rem'){\r\n                const hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\r\n                const clone = document.createElement('div');\r\n                for (let k in elem.style) {\r\n                    try {\r\n                        if ((elem.style[k] !== '') && (elem.style[k].indexOf(\":\") > 0)) {\r\n                            clone.style[k] = elem.style[k];\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\r\n                clone.style.fontSize = fontSize;\r\n                clone.innerHTML = elem.innerHTML;\r\n                parent.document.body.appendChild(clone);\r\n                const sizes = {width:clone.clientWidth,height:clone.clientHeight};\r\n                parent.document.body.removeChild(clone);\r\n                return sizes;\r\n            };\r\n            this.GetInlineSize1 = function(elem, fontSize='12px//'){\r\n                let pp = performance.now();\r\n                const hiddenStyle = \"left:-10000px;top:-10000px;height:auto;width:auto;position:absolute;\";\r\n                const clone = document.createElement('div');\r\n                for (let k in elem.style) {\r\n                    try {\r\n                        if ((elem.style[k] !== '') && (elem.style[k].indexOf(\":\") > 0)) {\r\n                            clone.style[k] = elem.style[k];\r\n                        }\r\n                    } catch (e) {}\r\n                }\r\n                document.all ? clone.style.setAttribute('cssText', hiddenStyle) : clone.setAttribute('style', hiddenStyle);\r\n                clone.style.fontSize = fontSize;\r\n                clone.innerHTML = elem.innerHTML;\r\n                parent.document.body.appendChild(clone);\r\n                let xx = getComputedStyle(clone);\r\n                let ps = performance.now();\r\n                let sizes = {width: $this.GetTextWidth(elem.innerText, xx.getPropertyValue('font-family'), xx.getPropertyValue(\"font-size\")), height: 12};\r\n                Lure.Perf(ps, '--size');\r\n                parent.document.body.removeChild(clone);\r\n                console.log('sizes', sizes, xx);\r\n                Lure.Perf(pp, '--calxXwidth');\r\n                return sizes;\r\n            };\r\n            this.isNumeric = function(n) {\r\n                return !isNaN(parseFloat(n)) && isFinite(n);\r\n            };\r\n            //this.Content = Lure.Content;\r\n            //this.Templator = Templator;\r\n            /*editable*/\r\n            //this.Editables = '.editable-waiting';\r\n            this._DateFormat = function (date, format = \"DD.MM.YYYY HH:mm:ss\") {\r\n                if (date === null || typeof date === 'undefined')\r\n                    return '';\r\n                let data = date.getDate();\r\n                let mo = date.getMonth();\r\n                let year = date.getFullYear();\r\n                let hour = date.getHours();\r\n                let min = date.getMinutes();\r\n                let sec = date.getSeconds();\r\n\r\n                return format\r\n                    .replace('DD', data.toString().length < 2? `0${data}`: data )\r\n                    .replace('D', data )\r\n                    .replace('MMM', $this.Culture.MonthNames[mo] )\r\n                    .replace('MM', mo.toString().length < 2 ? `0${mo}`:mo )\r\n                    .replace('M', mo )\r\n                    .replace('YYYY',year )\r\n                    .replace('YY',year.toString().substring(2,2) )\r\n                    .replace('Y',year )\r\n                    .replace('HH',hour.toString().length < 2 ? `0${hour}`:hour )\r\n                    .replace('hh',hour )\r\n                    .replace('mm',min.toString().length < 2 ? `0${min}`:min )\r\n                    .replace('ss',sec.toString().length < 2 ? `0${sec}`:sec );\r\n            };\r\n            this.Editable = {\r\n                EditMode: false,\r\n                RemoveWaiting(){\r\n                    let waiedites = document.querySelectorAll('.editable-waiting');\r\n                    waiedites.forEach(function (item) {\r\n                        item.classList.remove('editable-waiting');\r\n                    });\r\n                },\r\n                RemoveEdits(){\r\n                    if ($this.Editable.EditMode)\r\n                        return;\r\n                    let editables = document.querySelectorAll('.editable-editing');\r\n                    editables.forEach(function (item) {\r\n                        item.innerHTML = item._innerHTML;\r\n                        item.classList.remove('editable-editing');\r\n                    });\r\n                    $this.Editable.RemoveWaiting();\r\n                },\r\n                AddEdits(EditableElement){\r\n                    EditableElement._innerHTML = EditableElement.innerHTML;\r\n                    let ValuePrev = EditableElement.querySelector('.editable-value').innerHTML;\r\n                    EditableElement.classList.add('editable-editing');\r\n                    EditableElement.dataset['value'] = ValuePrev;\r\n                   // EditableElement.style.paddingBottom = '0px';\r\n                    //EditableElement.style.paddingTop = '0px';\r\n                    let SaveButton = $this.Editable.EditMode? '': `<div class=\"editable-helper editable-save-button\"></div>`;\r\n                    if (!EditableElement.dataset['object']) //if no selectable data, just text editor is needed\r\n                    {\r\n                        let EditType = EditableElement.dataset['type'];\r\n                        if (typeof EditType === 'undefined')\r\n                            EditType = 'text';\r\n                        EditableElement.innerHTML = `<input class=\"textbox editable-helper editable-editor editable-textbox\" type=\"${EditType}\" value=\"${ValuePrev}\"> ${SaveButton}`;\r\n                        EditableElement.querySelector('.editable-editor').focus();\r\n                        EditableElement.querySelector('.editable-editor').select();\r\n                    }\r\n                    else    //selectable data\r\n                    {\r\n                        let string_Select = `<select class=\"select editable-helper editable-editor editable-select\">`;\r\n                        let SelectData = eval(EditableElement.dataset['object']);\r\n                        //console.log('-SelectData data-', SelectData);\r\n                        let Property = EditableElement.dataset['property'];\r\n                        let SelectOptions = '';\r\n                        SelectData.forEach(function (item) {\r\n                            //SelectOptions += ``\r\n                            let attributes = '';\r\n                            if (typeof item === typeof {}){\r\n                                for (let key in item)\r\n                                {\r\n                                    attributes += ` data-property_${key}=\"${item[key]}\"`;\r\n                                }\r\n                                string_Select += `<option class=\"editable-helper\" ${attributes}>${item[Property]}</option>`;\r\n                            }\r\n                            else{\r\n                                string_Select += `<option class=\"editable-helper\" ${(item === ValuePrev)? \"selected\":\"\"}>${item}</option>`;\r\n                            }\r\n                        });\r\n                        string_Select += `</select>${SaveButton}</div>`;\r\n                        //let Select = Lure.CreateElementFromString(string_Select);\r\n                        //Select.value = ValuePrev;\r\n                        EditableElement.innerHTML = string_Select;\r\n\r\n                    }\r\n\r\n\r\n                },\r\n                Save(EditableElement, ValueNew){\r\n                    let Content = EditableElement.closest('.mt-content');\r\n                    let Controller = Content.MonsieurController;\r\n                    let i = EditableElement.dataset['line'];\r\n                    let Property = EditableElement.dataset['property'];\r\n                    let DataObject = Controller.Data[i];\r\n                    if (ValueNew === '' || ValueNew === null || typeof ValueNew === 'undefined'){\r\n                        console.info('New Value is empty');\r\n                        Lure.ErrorHint(EditableElement, \"Пустое поле или неправильные данные\");\r\n                        return;\r\n                    }\r\n                    EditableElement.innerHTML = EditableElement._innerHTML;\r\n                    EditableElement.dataset['value'] = ValueNew;\r\n                    EditableElement.querySelector('.editable-value').innerHTML = ValueNew;\r\n                    EditableElement.classList.remove('editable-editing');\r\n                    if (Property !== '$this' && Property !== \"$item\")\r\n                        DataObject[Property] = ValueNew;\r\n                    else\r\n                        DataObject = ValueNew;\r\n\r\n\r\n                    //so server now\r\n                    Controller.LineSave(i, Property, ValueNew, function () {\r\n                        Lure.Editable.RemoveWaiting();\r\n                        if (Property !== '$this' && Property !== \"$item\")\r\n                            Controller.Data[i][Property] = ValueNew;\r\n                        else\r\n                            Controller.Data[i] = ValueNew;\r\n                    });\r\n                }\r\n            };\r\n            ///\r\n            this.Settings = {\r\n                DialogBlur: null,                    //{string, jQuery, HTMLElement} - where blur on dialog\r\n                DialogAnimation: 'lure-animation-dialog', //{string} -  css-animation class\r\n                EditableClass:  'editable',\r\n                EditableWaiting:  'editable-waiting',\r\n            };\r\n            this.Culture = {\r\n                MonthNames: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"],\r\n                MonthNamesShort: [\"янв.\", \"фев.\", \"мар.\", \"апр.\", \"май\", \"июн.\", \"июл.\", \"авг.\", \"сен.\", \"окт.\", \"ноя.\", \"дек.\"],\r\n                WeekDays: [\"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\", \"Воскресенье\"],\r\n                WeekDaysShort: [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"],\r\n            };\r\n            this.TemplatorList = [];\r\n            this.ContentList = {};\r\n\r\n            /////\r\n            this._DialogCount = 0;\r\n        };\r\n\r\n        Perf(perfStart, text='Perf'){\r\n            const x = Math.floor((window.performance.now()-perfStart)*100)/100;\r\n            console.info(\"[\" + text + \"]: \" + x + \"ms\");\r\n            return x;\r\n        }\r\n\r\n        /**\r\n         * Confirmation dialog\r\n         * @param Caption\r\n         * @param Message\r\n         * @param CaptionColor\r\n         * @param CaptionBackground\r\n         * @param OnAgree\r\n         * @param OnCancel\r\n         * @constructor\r\n         */\r\n        Confirm(Caption  = \"Achtung\", Message = '', {\r\n            CaptionColor =  '',\r\n            CaptionBackground = '',\r\n            OnAgree = () => {},\r\n            OnCancel = null\r\n        } = {})\r\n        {\r\n\r\n            document.activeElement.blur();\r\n\r\n\r\n            let dialog = document.createElement('div');\r\n            dialog.classList.add('lure-confirm');\r\n            if (Lure.Settings.DialogAnimation)\r\n                dialog.classList.add(Lure.Settings.DialogAnimation);\r\n            //###title\r\n            let title = document.createElement(\"div\");\r\n            title.classList.add('cd-caption');\r\n            title.innerHTML = Caption;\r\n            title.style.color = CaptionColor;\r\n            title.style.background = CaptionBackground;\r\n            dialog.appendChild(title);\r\n            //###message field\r\n            let msg = document.createElement(\"div\");\r\n            msg.classList.add('cd-text');\r\n            msg.innerHTML = Message;\r\n            dialog.appendChild(msg);\r\n            //###buttonfield\r\n            let buttons = document.createElement(\"div\");\r\n            buttons.classList.add(\"cd-buttons\");\r\n            dialog.appendChild(buttons);\r\n            //###button confirm\r\n            let btnOk = document.createElement(\"div\");\r\n            btnOk.classList.add(\"button\", \"cd-button\", \"btn-diag-confirm\");\r\n            btnOk.innerHTML = \"Ok\";\r\n            btnOk.onclick = function(){\r\n                Lure._DialogCount--;\r\n                if (OnAgree !== null && OnAgree !== undefined)\r\n                    OnAgree();\r\n                if (Lure.Settings.DialogBlur && Lure._DialogCount < 1 )\r\n                    Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\r\n                //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\r\n                wrap.remove();\r\n                dialog.remove();\r\n\r\n            };\r\n            dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnOk);\r\n            //###button cancel\r\n            if (OnCancel !== null)\r\n            {\r\n                let btnCancel = document.createElement(\"div\");\r\n                btnCancel.classList.add(\"button\", \"cd-button\", \"btn-diag-cancel\");\r\n                btnCancel.innerHTML = \"Отмена\";\r\n                btnCancel.onclick = function(){\r\n                    Lure._DialogCount--;\r\n                    if (OnCancel !== null)\r\n                        OnCancel();\r\n                    if (Lure.Settings.DialogBlur  && Lure._DialogCount < 1)\r\n                        Lure.Select(Lure.Settings.DialogBlur).classList.remove('lure-blur');\r\n                    //$(Lure.Settings.DialogBlur).removeClass('lure-blur');\r\n                    wrap.remove();\r\n                    dialog.remove();\r\n\r\n                };\r\n                dialog.getElementsByClassName(\"cd-buttons\")[0].appendChild(btnCancel);\r\n            }\r\n            //### Dialog-Wrapper\r\n            let wrap = document.createElement(\"div\");\r\n            wrap.classList.add('ConfirmDialog-wrapper');\r\n            document.body.appendChild(wrap);\r\n            document.body.appendChild(dialog);\r\n            Lure._DialogCount++;\r\n            if (Lure.Settings.DialogBlur)\r\n            {\r\n                wrap.style.background = 'none';\r\n                Lure.Select(Lure.Settings.DialogBlur).classList.add('lure-blur');\r\n                //$(Lure.Settings.DialogBlur).addClass('lure-blur');\r\n            }\r\n        }\r\n        //Confirmation dialog teamplate just\r\n        NoFeature(name = \"\"){\r\n            if (name !== \"\")\r\n                name = \"\\\"\"+name+\"\\\"\";\r\n            this.Confirm(\r\n                \"Error\",\r\n                \"Sorry, function \"+name+\" is not available yet\"\r\n            )\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param object\r\n         * @param msg\r\n         * @constructor\r\n         */\r\n        ErrorHint(object, msg) {\r\n            if (!msg)\r\n                msg = \"Поле не может быть пустым\";\r\n            let div = document.createElement('div');\r\n            div.classList.add('lure-error-hint');\r\n            div.innerHTML = msg;\r\n            object.parentElement.style.position = 'relative';\r\n            object.parentElement.appendChild(div);\r\n            div.style.display = 'block';\r\n            try {\r\n                div.animate({opacity: [0, 1]}, {duration : 300});\r\n            }\r\n            catch (e){}\r\n\r\n            setTimeout(function(){\r\n\r\n                try {\r\n                    div.animate({opacity: [1, 0]}, {duration : 300})\r\n                        .onfinish = ()=>{div.style.display = 'none'};\r\n                }\r\n                catch (e){\r\n                    div.style.display = 'none';\r\n                }\r\n                //TODO CHECK FADEIN FADEOUT\r\n                setTimeout(function(){\r\n                    object.parentElement.style.position = '';\r\n                    div.remove();\r\n                }, 500)\r\n            }, 2000)\r\n        }\r\n    }\r\n    return new LureClass();\r\n})();\r\nLure.Diagnostics = {};\r\nLure.Diagnostics.Perf = class LurePerf{\r\n    constructor(enabled=true){\r\n        let Started = performance.now();\r\n        let Stepped = Started;\r\n\r\n        /**\r\n         *\r\n         * @returns {number}\r\n         * @constructor\r\n         */\r\n        this.Reset = function () {\r\n            Started = performance.now();\r\n            Stepped = Started;\r\n            return 0;\r\n        };\r\n        /**\r\n         *\r\n         * @param name\r\n         * @returns {string}\r\n         * @constructor\r\n         */\r\n        this.Elapsed = function (name='Perf') {\r\n            if (!enabled)\r\n                return 0;\r\n            let v = (performance.now() - Started).toFixed(2);\r\n            console.info(`[${name}]: ${ v }ms`);\r\n            return v;\r\n        };\r\n        /**\r\n         *\r\n         * @param name\r\n         * @returns {string}\r\n         * @constructor\r\n         */\r\n        this.Perf = function (name='Perf') {\r\n            if (!enabled)\r\n                return 0;\r\n            let step = performance.now();\r\n            let v = (step - Stepped).toFixed(2);\r\n            console.info(`[${name}]: ${ v }ms`);\r\n            Stepped = step;\r\n            return v;\r\n        };\r\n    }\r\n};","//sets = {\r\n//  SubContent: [\r\n//      {sets},                             -same object to create subs\r\n// ],\r\n//\r\n// Controller:{                                   - if needs some Template master\r\n//    Type: Templator,                                    - class link [optional] Templator by default\r\n//    Target: {string|HTMLElement}                        -[optional] if Controller.Target is undefined, Controller.Target = sets.Target\r\n//    Data: {array|object},                               - data array [optional] Data === [] by default\r\n//    ListElement: {string|HTMLElement},                  - repeated element\r\n//    EmptyMessage: \"no items\",                           - render if Data.length === 0;\r\n\r\n//  Control: {\r\n//    Target: {string, jQuery, HTMLElement},\r\n//    Global: {bool}                               - set global event listener. Set true if control renders after init or it renders dynamicly\r\n//    OnClick: {function}                          - here this === current Lure.Content\r\n//    OnChange: {function}                         - here this === current Lure.Content\r\n// },}\r\n\r\nLure.Plugin.Content = {\r\n    Version: '0.9.1',\r\n    Content: class LureContent {\r\n        constructor({                       //--Lure.Content Settings--\r\n                        Target     = null,              //{string, HTMLElement} - where to render       [by default this.Parent.Content];\r\n                        Content    = null,              //{string}  - html content string, if           [by default this.Target.innerHTML]\r\n                        CSS        = '',                //{string}  - css classes string\r\n                        Name       = null,              //{string}  - Lure.Content's name. Need for search content by .GetContent(contentName)\r\n                        Global     = false,             //{bool}    - actual for SubContent. Set true, if SubContent is outside of Parent\r\n                        Title      = \"\",                //{string}  -  header element, contains name/caption/title of content\r\n                        Type       = \"Untyped\",         //{string}  - if has - this.Content will be invisible by default, if need be visible set next property:\r\n                        Visible    = undefined,         //{bool}    - make visible by default (if has no Type - visible by default)\r\n                        SubContent = [],                //{Array} of Lure.Content Settings\r\n                        Dialog     = false,             //{bool} - make dialog absolute window with dialog wrapper\r\n                        DialogWrapper = true,           //{bool} - show dialog  wrapper bg\r\n                        DialogBlur = null,              //{string, jQuery, HTMLElement} target background for blur when dialog\r\n                        DialogAnimation = null,         //{string} - css animation name\r\n                        Show       = null,              //{function} - show action\r\n                        Hide       = null,              //{function} - hide action\r\n                        Shower     = function(){this.Content.style.display = '';},       //custom show handler [calls before .Show]\r\n                        Hider      = function(){this.Content.style.display = 'none';},   //custom hide handler [calls before .Hide]\r\n                        BeforeShow = function(){},      //{function} - calls before .Shower and .Show\r\n                        Refresh    = function(data, i){\r\n                            if (this.Controller)\r\n                                this.Controller.Refresh(data, i)\r\n                        },                              //{function} - refresh content, may be call on page resize for example\r\n                        Sorting    = false,             //{object}   - sort controls by field like 'field' -> '{css|HTMLElement}'  ex.: { count: '.head .count'}\r\n                        Filtering  = false,             //{object}   - like sorting, but fast filter textbox would be\r\n                        OnClick    = null,              //{function} - this.Content.onclick event\r\n                        Controller = null,              //{object} contoller settings(Templator or TreeBuilder)\r\n                        Control    = null,              //{object} (help upper)\r\n\r\n\r\n                        Props      = function(){},      //{function}  - recomented for extra fields  for Lure.Content (this.Extrafield =...)\r\n                        Methods    = function(){},      //{function}  - recomented for extra methods for Lure.Content (this.ExtraMethod = function(){...} )\r\n                        GetSet     = {},                //{function}  - recomenter for extra getters and setters for Lure.Content\r\n                        AfterBuild = function(){},      //{function} - calls after Lure.Content init\r\n                        Disabled   = false,             //debugging,\r\n                        Parent     = null               //link to parent Lure.Content of SubContent\r\n                    })\r\n\r\n        {\r\n            if (Disabled)\r\n                return;\r\n            let $this = this;\r\n            this.isContent = true;\r\n            this.isActive = true;\r\n            if (Name  === 'Tooltipchek')\r\n                ;//debugger;\r\n\r\n            this.Parent = Parent;\r\n            if (Parent !== null){\r\n                this.Target = Global? Lure.Select(Target) : Lure.Select(Target, this.Parent.Content);\r\n                if (this.Target === null)\r\n                    this.Target = this.Parent.Content;\r\n            }\r\n            else if (Target !== null){\r\n                this.Target = Lure.Select(Target);\r\n            }\r\n            // debugger;\r\n            ////\r\n            if (Content === null){\r\n                this.Content = this.Target;\r\n                construct.call($this);\r\n            }else{\r\n                if (Content.match(/<[^>]+>/) === null) {//if not dom string\r\n                    console.log('get load');\r\n                    Lure.GetFileText(Content).then(x => {\r\n                        // debugger;\r\n                        //     console.log('x', x);\r\n                        MakeContent.call($this, x);\r\n                        construct.call($this);\r\n                    });\r\n                }else {\r\n                    MakeContent.call($this, Content);\r\n                    construct.call($this);\r\n                }\r\n\r\n\r\n            }\r\n            function MakeContent(Content){\r\n                if (Controller === null || Array.isArray(Controller.Data))\r\n                {\r\n                    this.Content = Lure.CreateElementFromString(Content);\r\n                }\r\n                else if (Controller !== null && !Array.isArray(Controller.Data))\r\n                {\r\n                    /*Content = Content.replace(/<[^>]+>([^<]*{{([^#}]+)}}[^<]*)<[^>]+>/g, function (match, group) {\r\n                     let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                     return match.replace(match, `<span>${match}</span>`);\r\n                     });\r\n                     return  match.replace(group, newGroup);\r\n                     });*/\r\n                    Content = Content.replace(/>[^>]*({{[^#}]+}})[^>]*</g, function (match, group) {\r\n                        /*let newGroup = group.replace(/{{[^#}]+}}/g, function (match) {\r\n                         return match.replace(match, `<span>${match}</span>`);\r\n                         });*/\r\n                        const x = match.replace(/{{[^#}]+}}/g, function (matche) {\r\n                            return `<span>${matche}</span>`\r\n                        });\r\n                        return x;// match.replace(group, `<span>${group}</span>`);\r\n                    });\r\n                    this.Content = Lure.CreateElementFromString(Content);\r\n                }\r\n                //this._Content = Content;\r\n                this.Target.appendChild(this.Content);\r\n            }\r\n\r\n            /////\r\n            if (this.Content === null || this.Target === null)\r\n            {\r\n                this.isContent = false;\r\n                return;\r\n            }\r\n\r\n\r\n\r\n\r\n            //### CONSTRUCTION\r\n            if (CSS !== ''){\r\n                let node = document.createElement('style');\r\n                node.innerHTML = CSS;\r\n                document.body.appendChild(node);\r\n            }\r\n            function construct(){\r\n                this.Type = Type;\r\n                this.Name = Name;\r\n                this.AllContents = Lure.ContentList;\r\n\r\n\r\n                //### METHODS\r\n                /**\r\n                 * @param {object} Data\r\n                 * @param {int} index\r\n                 */\r\n                this.Refresh = Refresh.bind(this);\r\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {HTMLElement}\r\n                 * @constructor\r\n                 */\r\n                this.Select = function(s){\r\n                    return Lure.Select(s, $this.Content)\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {selector|HTMLElement} s\r\n                 * @returns {NodeList}\r\n                 * @constructor\r\n                 */\r\n                this.SelectAll = function(s){\r\n                    return Lure.SelectAll(s, $this.Content)\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\r\n                this.GetParent = function(stringName='root'){\r\n                    let content = $this;\r\n                    while (content.Parent !== null && content.Name !== stringName)\r\n                        content = content.Parent;\r\n                    return content;\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string}stringName\r\n                 * @constructor\r\n                 * @returns {Lure.Content}\r\n                 */\r\n                this.GetContent = function (stringName='root') {\r\n                    let parent = this.GetParent(stringName);\r\n                    if (parent.Name === stringName)\r\n                        return parent;\r\n                    // let root = parent;\r\n                    let found = parent;\r\n                    if (stringName === 'root')\r\n                        return found;\r\n                    let searcher0 = function (content) {\r\n                        if (content.isContent && content.__private.ContentNames)\r\n\r\n                            for( let i = 0; i < content.__private.ContentNames.length; i++){\r\n                                let name = content.__private.ContentNames[i];\r\n                                if (name === stringName)\r\n                                    return content[name];\r\n                                found = searcher(content[name])\r\n                            }\r\n                        return found;\r\n                    };\r\n                    let searcher = function (content) {\r\n                        // debugger;\r\n                        for(let key in content){\r\n                            if (key !== \"Parent\" && !!content[key] && content[key].isContent){\r\n\r\n                                if (content[key].Name === stringName)\r\n                                    return content[key];\r\n                                found = searcher(content[key]);\r\n                            }\r\n\r\n                        }\r\n                        return found;\r\n                    };\r\n                    return searcher(found);\r\n\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {HTMLElement|string} HTMLElement\r\n                 * @returns {number|Number}\r\n                 * @constructor\r\n                 */\r\n                this.GetIndex = function (HTMLElement) {\r\n                    HTMLElement = $this.Select(HTMLElement);\r\n                    return Array.prototype.slice.call( HTMLElement.parentElement.children ).indexOf(HTMLElement);\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string} eventName\r\n                 * @param {string} selector\r\n                 * @param {function} func\r\n                 * @constructor\r\n                 */\r\n                this.AddEventListener = function (eventName, selector, func) {\r\n                    Lure.AddEventListenerGlobal(eventName,selector,func, $this.Content, $this);\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {string|HTMLElement} buttonTutorStarter\r\n                 * @constructor\r\n                 */\r\n                this.AddTutor = function (buttonTutorStarter) {\r\n                    $this.MonsieurTutor = new MonsieurTutor($this.Select(buttonTutorStarter), $this.Content);\r\n                };\r\n                //private\r\n                this._SortBy = function(f, data, isSorted = false){\r\n                    if (data.length < 2)\r\n                        return;\r\n                    console.log('sort by', f);\r\n                    data.sort(function (a, b) {\r\n                        if      ((a[f] < b[f]) && $this._Sorting[f].Sorted)\r\n                            return 1;\r\n                        else if ((a[f] > b[f]) && $this._Sorting[f].Sorted)\r\n                            return -1;\r\n                        else if ((a[f] < b[f]) && !$this._Sorting[f].Sorted)\r\n                            return -1;\r\n                        else if ((a[f] > b[f]) && !$this._Sorting[f].Sorted)\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    $this._Sorting[f].Sorted = !$this._Sorting[f].Sorted;\r\n                    for (let kf in $this._Sorting){\r\n                        if ($this._Sorting.hasOwnProperty(kf) && kf !== '_sorter'){\r\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-up');\r\n                            $this._Sorting[kf].Target.classList.remove('mt-sorting-down');\r\n                            if (f !==kf)\r\n                                $this._Sorting[kf].Sorted = false;\r\n                        }\r\n                    }\r\n                    $this._Sorting[f].Target.classList.add($this._Sorting[f].Sorted ? 'mt-sorting-down':'mt-sorting-up');\r\n                    $this.Refresh();\r\n                };\r\n                this._FilterBy = function () {\r\n                    let p = performance.now();\r\n                    let filters = 0;\r\n                    let _d = $this._Filter._DataDefault.slice(0);\r\n                    for (let f in $this._Filter){\r\n                        if ($this._Filter.hasOwnProperty(f) && $this._Filter[f].Filter && $this._Filter[f].Filter !==''){\r\n                            _d = _d.filter(x=>x[f].toString().toLowerCase().indexOf($this._Filter[f].Filter) > -1);\r\n                            filters++;\r\n                        }\r\n                    }\r\n                    console.log(_d);\r\n                    if (filters === 0)\r\n                    {\r\n                        if ($this._Sorting._sorter){\r\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                            $this._SortBy($this._Sorting._sorter, $this.Controller._Data);\r\n                        }\r\n                        $this.Controller.Refresh();\r\n                    }\r\n                    else\r\n                    {\r\n                        if ($this._Sorting._sorter){\r\n                            $this._Sorting[$this._Sorting._sorter].Sorted = !$this._Sorting[$this._Sorting._sorter].Sorted;\r\n                            $this._SortBy($this._Sorting._sorter, _d);\r\n                        }\r\n                        $this.Controller.PageSize = $this._PageSize;\r\n                        $this.Controller._PageCursor = 0;\r\n                        $this.Controller._Rebuilder(_d);\r\n\r\n                    }\r\n\r\n                    mr.PerformanceNow(p, 'FilterBy')\r\n                };\r\n\r\n                //extra properties\r\n                Props.call(this);\r\n                //extra getters/setters\r\n                for(let k in GetSet){\r\n                    Object.defineProperty($this, k, Object.getOwnPropertyDescriptor(GetSet, k));\r\n                }\r\n                //extra methods\r\n                Methods.call(this);\r\n                //--\r\n                this.Show = function(e) {\r\n                    this.isActive = true;\r\n                    if (this.Control)\r\n                        this.Control.Active();\r\n                    let style = window.getComputedStyle($this.Content);\r\n                    let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    if (duration < durationAni)\r\n                        duration = durationAni;\r\n                    duration++;\r\n                    if ($this.Type !== \"Untyped\" && !$this.isVisible)\r\n                    {\r\n                        Lure.ContentList[$this.Type].forEach((item) =>\r\n                        {\r\n                            if ((item) !== $this && item.isActive)\r\n                                item.Hide();\r\n                        });\r\n                    }\r\n                    if (Dialog){\r\n                        Lure._DialogCount++;\r\n                        $this.Content.classList.add('lure-dialog');\r\n                        //    console.log('DialogWrapper', DialogWrapper);\r\n                        if (DialogWrapper){\r\n                            $this.DialogWrapper = Lure.CreateElementFromString('<div class=\"dialog-wrapper\">');\r\n                            document.body.appendChild($this.DialogWrapper);\r\n                            $this.DialogWrapper.onclick = $this.Hide.bind($this);\r\n\r\n                            let zIndexWrapper = parseInt(window.getComputedStyle($this.DialogWrapper).zIndex);\r\n                            let zIndexContent = parseInt(window.getComputedStyle($this.Content).zIndex);\r\n                            if (Number.isNaN(zIndexContent) || zIndexContent < zIndexWrapper)\r\n                                $this.Content.style.zIndex = zIndexWrapper+1;\r\n                        }\r\n\r\n                        if (DialogBlur)\r\n                        {\r\n                            $this.DialogWrapper.style.background = 'none';\r\n                            Lure.Select(DialogBlur).classList.add('lure-blur');\r\n                        }\r\n                        if (DialogAnimation){\r\n                            $this.Content.classList.add(DialogAnimation);\r\n                        }\r\n                    }\r\n                    BeforeShow.call($this, e);\r\n                    Shower.call($this, e);\r\n                    $this.Content.style.display = '';\r\n                    clearTimeout($this.__private.ToggleTimer);\r\n                    //this.Content.addEventListener('transitionend', Show.bind($this, e));\r\n                    if (Show !== null) {\r\n                        $this.__private.ToggleTimer = setTimeout(function() {\r\n                            Show.call($this, e);\r\n                        },duration);\r\n                    }\r\n                };\r\n                this.Hide = function(e) {\r\n                    this.isActive = false;\r\n                    if (this.Control)\r\n                        this.Control.Disactive();\r\n                    let style = window.getComputedStyle($this.Content);\r\n                    let duration = eval(style.transitionDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    let durationAni = eval(style.animationDuration.replace('ms', '*1').replace('s', '*1000'));\r\n                    if (duration < durationAni)\r\n                        duration = durationAni;\r\n                    duration++;\r\n                    if (Dialog)\r\n                    {\r\n                        Lure._DialogCount--;\r\n                        if ($this.DialogWrapper)\r\n                            $this.DialogWrapper.remove();\r\n                        if (DialogBlur  && Lure._DialogCount < 1)\r\n                            Lure.Select(DialogBlur).classList.remove('lure-blur');\r\n                    }\r\n\r\n                    Hider.call($this, e);\r\n                    clearTimeout($this.__private.ToggleTimer);\r\n                    if (Hide !== null)\r\n                        $this.__private.ToggleTimer = setTimeout(function () {\r\n                            Hide.call($this, e);\r\n                        }, duration);\r\n\r\n                };\r\n                this.Toggle = function(e){\r\n                    if ($this.isVisible)\r\n                        $this.Hide(e);\r\n                    else\r\n                        $this.Show(e);\r\n                };\r\n\r\n                this.__private = {};\r\n                this.__private.ToggleTimer = null;\r\n                this.Control = new Lure.Plugin.Content.Control(Control, $this);\r\n                this.Content.onclick = OnClick? OnClick.bind($this) : null;\r\n                //SubContent\r\n                if (Array.isArray(SubContent)){\r\n                    for (let i = 0; i < SubContent.length; i++){\r\n                        {\r\n                            if (!SubContent[i].Parent)\r\n                                SubContent[i].Parent = $this;\r\n                            //  $this.__private.ContentNames.push(SubContent[i].Name);\r\n                            $this[SubContent[i].Name] = new Lure.Content( SubContent[i] );\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (let cname in SubContent){\r\n                        SubContent[cname].Parent = $this;\r\n                        SubContent[cname].Name = cname;\r\n                        //       $this.__private.ContentNames.push(cname);\r\n                        $this[cname] = new Lure.Content(SubContent[cname]);\r\n                    }\r\n                }\r\n                //title\r\n                this.TitleContent = Lure.Select(Title, this.Content);\r\n\r\n                if ( (Type === \"Untyped\" && Visible !== false) && !Dialog)\r\n                    Visible = true;\r\n                else if ( (Type !== \"Untyped\" && Visible !== true) || ( Dialog && Visible !== true) )\r\n                    Visible = false;\r\n                //if (Typed) Content is Visible\r\n                if (Visible){\r\n                    this.Content.style.display = '';\r\n                    if (this.Control)\r\n                        this.Control.Active();\r\n                }\r\n                else { //not undefined\r\n                    this.isActive = false;\r\n                    this.Content.style.display = 'none';\r\n                }\r\n                if (Controller){\r\n                    if (Controller.isController){\r\n                        this.Controller = Controller;\r\n                        this.Controller.Parent = this;\r\n                    }\r\n                    else{\r\n                        if (!Controller.Target)\r\n                            Controller.Target = this.Content;\r\n                        if (!Controller.Type)\r\n                            Controller.Type = \"Templator\";\r\n                        Controller.Parent = this;\r\n                        this.Controller = new Lure.Plugin.Content.Controller[Controller.Type](Controller);\r\n                    }\r\n                    if (this.Controller.isHasEditable)\r\n                    {\r\n                        Lure._EditablesEventListenerRun($this.Content);\r\n                    }\r\n                }\r\n\r\n                if (Sorting){\r\n                    $this._Sorting = {};\r\n                    $this._Sorting._sorter = null;\r\n                    for (let f in Sorting){\r\n                        if (Sorting.hasOwnProperty(f) && f !== '_sorter'){\r\n                            $this._Sorting[f] = {\r\n                                Target: $this.Select(Sorting[f]),\r\n                                Sorted: false,\r\n                            };\r\n                            $this._Sorting[f].Target.classList.add('mt-sorting');\r\n                            $this._Sorting[f].Target.addEventListener('click', function () {\r\n                                $this._Sorting._sorter = f;\r\n                                $this._SortBy(f, $this.Controller._Data);\r\n                            })\r\n                        }\r\n                    }\r\n                    console.info('mt-sortable', $this._Sorting);\r\n                }\r\n                if (Filtering){\r\n                    $this._Filter = {};\r\n                    $this._Filter._DataDefault = $this.Controller._Data.slice(0);\r\n                    for (let f in Filtering){\r\n                        if (Filtering.hasOwnProperty(f) && f !== '_format'){\r\n                            $this._Filter[f] = {\r\n                                Target: $this.Select(Filtering[f]),\r\n                                Filter: '',\r\n                            };\r\n                            $this._Filter[f].Target.classList.add('mt-filtering');\r\n                            $this._Filter[f].Target.innerHTML = '<input type=\"text\" class=\"mt-filtering-input\">';\r\n                            $this._Filter[f].Target.querySelector('.mt-filtering-input').addEventListener('keyup', function (e) {\r\n                                //$this._SortBy(f);\r\n                                $this._Filter[f].Filter = e.target.value.toLowerCase();\r\n                                $this._FilterBy();\r\n\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n                if (!Lure.ContentList[$this.Type]) //if list is empty, create it, else just add\r\n                    Lure.ContentList[$this.Type] = [];\r\n                Lure.ContentList[$this.Type].push(this);\r\n\r\n                //close button\r\n                Array.from(this.Content.children).forEach(function(item){\r\n                    if (item.classList.contains(\"close\"))\r\n                        item.onclick = function (e) {\r\n                            $this.Hide(e);\r\n                        }\r\n                });\r\n\r\n                setTimeout(function () {\r\n                    AfterBuild.call($this);\r\n                }, 1);\r\n            }\r\n\r\n        }\r\n        get isVisible(){\r\n            return Lure.isVisible(this.Content);\r\n        }\r\n        get Title(){\r\n            return this.TitleContent.innerHTML;\r\n        }\r\n        set Title(t){\r\n            this.TitleContent.innerHTML = t;\r\n        }\r\n        get Data(){\r\n            if (this.Controller)\r\n                return this.Controller.Data;\r\n            return null;\r\n        }\r\n        set Data(data){\r\n            if (this.Controller)\r\n                this.Controller.Data = data;\r\n        }\r\n        get Items(){\r\n            if (this.Controller)\r\n                return this.Controller.Items;\r\n            return null;\r\n        }\r\n        RefreshOne(i){\r\n            if (this.Controller)\r\n                this.Controller.RefreshOne(i);\r\n        }\r\n        Remove(i, removeData){\r\n            if (this.Controller)\r\n                this.Controller.Remove(i, removeData);\r\n        }\r\n        Add(itemData, extraclass = false, isPrepend = false, addData = true){\r\n            if (this.Controller)\r\n                this.Controller.Add(itemData, extraclass, isPrepend, addData);\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {object} itemData\r\n         * @param {int} index\r\n         * @constructor\r\n         */\r\n        Edit(itemData, index){\r\n            if (this.Controller)\r\n                this.Controller.Edit(itemData, index);\r\n        }\r\n        Dispose(){\r\n            this.Content.remove();\r\n            this.Control.Disactive();\r\n            delete this.Controller;\r\n            delete this.Control;\r\n        }\r\n    },\r\n    Control: class LureControl{\r\n        constructor(control, owner){\r\n            if (control === null)\r\n                return;\r\n            if (control.length > 0) //if control list not empty\r\n            {\r\n                let controls = this;\r\n                for (let i = 0; i < control.length; i++)\r\n                {\r\n                    if (!control[i].Name)\r\n                        control[i].Name = \"unnamed_\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);\r\n                    controls[control[i].Name] = {\r\n                        Content: Lure.SelectAll(control[i].Target),\r\n                        _Content: control[i].Target,\r\n                        Type: control[i].Type ? control[i].Type : \"Untyped\",\r\n                        isGlobal: control[i].Global,\r\n                        OnClick: control[i].OnClick ? control[i].OnClick : owner.Show,\r\n                        OnChange: control[i].OnChange,\r\n                        Active: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.add('active');\r\n                            })\r\n                        },\r\n                        Disactive: function(){\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                        }\r\n\r\n                    };\r\n                    //onclick\r\n                    controls[control[i].Name].Content.forEach(function (item) {\r\n                        item.classList.add('pointer');\r\n                    });\r\n                    if (control[i].Global){\r\n\r\n                        Lure.AddEventListenerGlobal('click', control[i].Target, function (e) {\r\n                            Lure.SelectAll(control[i].Target).forEach(function (item) {\r\n                                item.classList.remove('active');\r\n                            });\r\n                            e.target.classList.add('active');\r\n                            if (controls[control[i].Name].OnClick)\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                        });\r\n                    }\r\n                    else{\r\n                        controls[control[i].Name].Content.forEach(function (item) {\r\n                            item.onclick = function (e) {\r\n                                Lure.ContentList[owner.Type].forEach((item) =>\r\n                                {\r\n                                    if ((item) !== owner)\r\n                                    {\r\n                                        if (item.Control)\r\n                                            item.Control.Disactive();\r\n                                    }\r\n                                });\r\n                                //console.log('remover', e);\r\n                                controls[control[i].Name].Content.forEach(function (item) {\r\n                                    item.classList.remove('active');\r\n                                });\r\n                                e.currentTarget.classList.add('active');\r\n                                controls[control[i].Name].OnClick.call(owner, e);\r\n                            };\r\n\r\n                        })\r\n                    }\r\n\r\n                    if (control[i].OnChange)\r\n                    {\r\n                        if (control[i].Global){\r\n                            Lure.AddEventListenerGlobal('change', control[i].Target, function (e) {\r\n                                control[i].OnChange.call(owner, e);\r\n                            } )\r\n                        }\r\n                        else{\r\n                            controls[control[i].Name].Content.forEach(function (item) {\r\n                                item.onchange = function (e) {\r\n                                    control[i].OnChange.call(owner, e);\r\n                                };\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Active(type = \"Untyped\"){\r\n            for (let k in this)\r\n                if (this[k].Type === type)\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.add('active')\r\n                    })\r\n        }\r\n        Disactive(type = \"Untyped\"){\r\n            for (let k in this)\r\n                if (this[k].Type === type)\r\n                {\r\n                    this[k].Content.forEach(function (item) {\r\n                        item.classList.remove('active');\r\n                    });\r\n                    if (this[k].isGlobal)\r\n                        Lure.SelectAll(this[k]._Content).forEach(function(item){\r\n                            item.classList.remove('active');\r\n                        })\r\n                }\r\n\r\n        }\r\n    },\r\n    Controller: {\r\n        Templator: class Templator{\r\n            constructor(\r\n                {\r\n                    Target = null,                              //{HTMLelement}\r\n                    Data = [],                                  // {object}, {array} - if object Templator would be refresh, if array - rebuild\r\n                    ListElement = \".list_element\",              //{string} - css selector or dom string\r\n                    //ListElementOnClick = null,                //{function} -\r\n                    EmptyMessage = \"\",\r\n                    EmptyHide = false,      //{bool} - Templator.Content would be hidden if Data.length = 0\r\n                    //DataType = \"untyped\",  //--BAD EXPERIENCE-- ODO when refresh one of typed Templator, would be refreshed/added/removed all of same type Templators (exclude untyped ofcourse)\r\n\r\n                    PageSize = -1,\r\n                    DataCount = -1,         //if > 0 PageGet is requied!!!\r\n                    PageGet = null,         //{function} - requied if DataCount > 0\r\n\r\n                    ShowAllButton = true,\r\n\r\n                    LineSave = function(line, property, newValue, callback=()=>{}){setTimeout(()=>{callback()}, 500)},            // callback would remove editable-waiting css class;\r\n                    LineAdd = function(dataObject, callback=()=>{}){setTimeout(()=>{ callback()}, 500)},                     // callback would remove editable-waiting css class;\r\n                    EditModeSwitch = null,     //checkbox, which toggle to edit mode\r\n                    DataSaveAll = function(){},//TODO\r\n\r\n                    //Sortable = false, //sort data columns\r\n\r\n                    NoAnimation = false,    //TODO\r\n                    NoBuild = false,\r\n\r\n                    BeforeBuild = function(){},\r\n                    AfterBuild = function(){},\r\n                    AfterAdd = function(){},\r\n                    Parent = null           //Lure.Content, which owns this Controller\r\n\r\n                } = {})\r\n            {\r\n                //### DEFINES\r\n                let $this = this;\r\n                this.isController = true;\r\n                if (Parent !== null)\r\n                    this.Content = Lure.Select(Target, Parent.Content);\r\n                else\r\n                    this.Content = Lure.Select(Target);\r\n                this.Target = this.Content;\r\n                this._Data = Data;\r\n                this.EmptyMessage = EmptyMessage;\r\n                this.ListElement = \"\";\r\n\r\n                this.BeforeBuild = BeforeBuild.bind(this);\r\n                this.AfterBuild = AfterBuild.bind(this);\r\n                this.AfterAdd = AfterAdd.bind(this);\r\n                this.Parent = Parent;\r\n                //paginating\r\n                this.PageSize = PageSize;\r\n                this._PageSize = PageSize;\r\n                this._DataCount = DataCount > 0 ? DataCount : this._Data.length ;\r\n                this._PageCursor = 0;\r\n                this._PageGet = PageGet;\r\n\r\n                //server handling\r\n                this.LineAdd = LineAdd;\r\n                this.LineSave = LineSave;\r\n                this.Type = null; // Refresh or ItemList\r\n\r\n                //settings\r\n                this.isShowAllButton = ShowAllButton;\r\n                this.isNoAnimaton = NoAnimation;\r\n                this.isEmptyHide = EmptyHide;\r\n\r\n                //fields to refresh (for refresh type)\r\n                let Dictionary = [];\r\n                this._Dictionary = Dictionary;\r\n                const Refresher = function () {\r\n                    //TODO refresh only changes\r\n                    if (!$this._Data)\r\n                        $this._Data = {};\r\n                    for (let i = 0; i < Dictionary.length; i++)\r\n                    {\r\n\r\n                        for (let j = 0; j < Dictionary[i].fields.length; j++)\r\n                        {\r\n                            let isAttribute = Dictionary[i].fields[j].Target.indexOf('attributes') > -1;\r\n                            let NewValue = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                            if (isAttribute)\r\n                            {\r\n\r\n                                Dictionary[i].obj.attributes[Dictionary[i].fields[j].Target.split(\".\")[1]].value = NewValue;\r\n                            }\r\n                            else {\r\n                                Dictionary[i].obj[Dictionary[i].fields[j].Target] = Dictionary[i].fields[j].BuildValue($this._Data);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                };\r\n                this._Rebuilder = function (data = $this._Data) {\r\n                    let lines = \"\";\r\n                    //$this.Content.style.display = '';\r\n                    if ($this._PageCursor === 0 )\r\n                        $this.Content.querySelectorAll('.mt-line, .mt-paginator, .mt-empty').forEach(function(item) {item.remove();});\r\n                    //pagination check\r\n                    let NextCount;\r\n                    //let line;\r\n                    let Limit = data.length;\r\n                    $this._DataCount = DataCount > 0 ? DataCount : Limit ;\r\n                    if ($this.PageSize > 0)\r\n                    {\r\n                        //  debugger;\r\n                        $this._DataCount = $this._DataCount > 0 ? $this._DataCount : data.length ;\r\n                        let paginator = $this.Content.querySelector('.mt-paginator');\r\n                        if (paginator !== null)\r\n                            paginator.remove();\r\n                        Limit = parseInt($this._PageCursor) + parseInt($this.PageSize);\r\n                        if (Limit > $this._DataCount && $this._DataCount > 0)\r\n                            Limit = $this._DataCount;\r\n                        //how much will be load in next step\r\n                        NextCount = $this._DataCount - Limit;\r\n                        if (NextCount > $this.PageSize)\r\n                            NextCount = $this.PageSize;\r\n                    }\r\n                    if ($this.Type === \"ItemList\" && data.length === 0 && $this.EmptyMessage !== \"\" && !$this.isEmptyHide)\r\n                    {\r\n                        let tag = $this.ListElement.match(/\\s?([\\w]+) /)[0].replace(/\\s/g, \"\");\r\n                        let empty = document.createElement(tag);\r\n                        empty.classList.add('mt-empty');\r\n                        empty.innerHTML = $this.EmptyMessage;\r\n                        $this.Content.appendChild(empty);\r\n                        return;\r\n                    }\r\n                    else if ($this.Type === \"ItemList\" && data.length === 0 && $this.isEmptyHide){\r\n                        $this.Content.style.display = 'none';\r\n                        return;\r\n                    }\r\n                    else if (data.length === 0) {\r\n                        return;\r\n                    }\r\n                    //linebuilding\r\n                    for (let i = $this._PageCursor; i < Limit; i++)\r\n                        lines += $this._LineBuilder(data[i], i, data.length);\r\n                    //appending\r\n                    //   debugger;\r\n                    if ($this.Content.children.length < 1)\r\n                    {\r\n                        $this.Content.innerHTML = lines;\r\n                    }\r\n                    else{\r\n                        lines = Lure.CreateElementsFromString(lines, $this.Content.tagName);\r\n                        if (lines !== null)\r\n                            lines.forEach(function (item) {\r\n                                $this.Content.appendChild(item);\r\n                            });\r\n                    }\r\n                    /*{\r\n                     lines += $this._LineBuilder(data[i], i, data.length);\r\n                     //if should to save changed class list after rebuild\r\n                     if (data[i] && data[i].$classlist)\r\n                     {\r\n                     line = $(line);\r\n                     line.attr('class', data[i].$classlist);\r\n                     lines +=line[0].outerHTML;\r\n                     }\r\n                     else{\r\n                     lines += line;\r\n                     }\r\n                     }*/\r\n                    //save cursor index\r\n                    if ($this.PageSize > 0)\r\n                        $this._PageCursor = Limit;\r\n                    //PAGINATION BUILD\r\n                    //limit data case\r\n                    if ($this.PageSize > 0 && $this._PageCursor < $this._DataCount){\r\n                        let also;\r\n                        let showAll = `<span>  (Не загружено ${($this._DataCount- $this._PageCursor)}) </span>`;\r\n                        if ($this.isShowAllButton)\r\n                        {\r\n                            showAll = `<span> или </span><span class=\"mt-btn-nextAll dotted pointer\"> Все ( ${($this._DataCount - $this._PageCursor)} )</span>`;\r\n                        }\r\n                        let isTable = $this.Content.tagName === 'table' || $this.Content.tagName === 'thead' || $this.Content.tagName === 'tbody';\r\n                        if (isTable)\r\n                        {\r\n                            let colspan = $this.Content.querySelector(\"tr:first-child th\").length + 1;\r\n\r\n                            also = `<tr class=\"mt-paginator\"><td colspan=\"${colspan}\" class=\"element block-head\"><span class=\"tpltr-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</td></tr>`;\r\n                            also = Lure.CreateElementFromString(also, $this.Content.tagName);\r\n                        }\r\n                        else {\r\n                            also = Lure.CreateElementFromString(`<div class='mt-paginator'><span class=\"mt-btn-next dotted pointer\">Показать еще ${NextCount}</span>${showAll}</div>`);\r\n\r\n                        }\r\n                        let btnNext = also.querySelector('.mt-btn-next');\r\n                        //console.log('btnNext', btnNext);\r\n                        btnNext.onclick = function(){\r\n                            if ($this._PageCursor >= data.length)\r\n                                $this._PageGet($this._PageCursor, $this.PageSize, BuildWithIt);\r\n                            else\r\n                                Build();\r\n\r\n                        };\r\n                        let btnNextAll = also.querySelector('.mt-btn-nextAll');\r\n                        btnNextAll.onclick = function(){\r\n                            $this.PageSize = $this._DataCount;\r\n                            if ($this._PageGet !== null)\r\n                                $this._PageGet($this._PageCursor, ($this._DataCount - $this._PageCursor), BuildWithIt);\r\n                            else\r\n                                Build();\r\n                        };\r\n                        $this.Content.appendChild(also);\r\n\r\n                    }\r\n\r\n                };\r\n                const Build = function () {\r\n                    $this.BeforeBuild();\r\n\r\n                    if ($this.Type === \"Refresh\")\r\n                        Refresher();\r\n                    else if ($this.Type === \"ItemList\"/* && $this._Data.length > 0*/)\r\n                        $this._Rebuilder();\r\n\r\n\r\n                    $this.AfterBuild();\r\n                };\r\n                const BuildWithIt = function (data) {\r\n                    for (let i = 0; i < data.length; i++)\r\n                        $this._Data.push(data[i]);\r\n                    Build();\r\n                };\r\n                // = Rebuild1er;\r\n\r\n                //#### METHODS\r\n                this.FieldAdd = function (element) {\r\n                    let elemAttributes = element.attributes;\r\n                    let fields = [];\r\n                    let WhatFields = -1; // 0-att only, 1-innerHTML only, 2-both\r\n                    //find fields in attributes\r\n                    for (let i = 0; i < elemAttributes.length; i++)\r\n                    {\r\n                        if (elemAttributes[i].value.indexOf(\"{{\") > -1)\r\n                        {\r\n                            if (elemAttributes[i].name !== 'value')\r\n                                fields.push({\r\n                                    Target: 'attributes.'+elemAttributes[i].name,\r\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                                });\r\n                            else {\r\n                                fields.push({\r\n                                    Target: elemAttributes[i].name,\r\n                                    BuildValue: Lure.Compile(elemAttributes[i].value)\r\n                                });\r\n                            }\r\n                            WhatFields = 0;\r\n                        }\r\n                    }\r\n                    //innerHTML check\r\n                    if (element.childNodes.length < 2)\r\n                    {\r\n                        if (element.innerHTML.indexOf(\"{{\") > -1)\r\n                        {\r\n                            fields.push({\r\n                                Target: \"innerHTML\",\r\n                                BuildValue: Lure.Compile(element.innerHTML)\r\n                            });\r\n                            WhatFields = WhatFields !==0 ? 1:2; //1 if no att, 2 if att exists\r\n\r\n                        }\r\n\r\n                    }\r\n                    if (WhatFields > -1)\r\n                    {\r\n                        Dictionary.push( {\r\n                            obj: element,\r\n                            fields: fields\r\n                        } );\r\n                    }\r\n                };\r\n                this.Refresh = function(data = null, index = null){\r\n                    $this.PageSize = $this._PageSize;\r\n                    $this._PageCursor = 0;\r\n                    if (data !== null)\r\n                        $this._Data = data;\r\n                    $this.PageCursor = 0;\r\n                    if (index === null)\r\n                        Build();\r\n                    else\r\n                        $this.RefreshOne(index);\r\n                };\r\n                this.RefreshOne = function (i) {\r\n                    let newItem = Lure.CreateElementFromString($this._LineBuilder($this._Data[i], i, $this._Data.length), $this.Content.tagName);\r\n                    let itemOld = $this.Items[i];\r\n                    $this.Items[i].parentNode.replaceChild(newItem, itemOld);\r\n                };\r\n                this.Add = function(item, extraclass = false, isPrepend = false, addData = true){\r\n                    if ($this._Data.length === 0 && $this.Content.querySelector(\".mt-empty\") !== null)\r\n                        $this.Content.querySelector(\".mt-empty\").remove();\r\n                    let fragment = document.createDocumentFragment();\r\n                    let elem = document.createElement($this.Content.tagName);\r\n                    let i;\r\n                    if (!isPrepend)\r\n                    {\r\n                        i = $this._Data.length;\r\n                        if (!addData)\r\n                            i--;\r\n                        elem.innerHTML = $this._LineBuilder(item, i, i+1);\r\n                        while (elem.childNodes[0]) {\r\n                            fragment.appendChild(elem.childNodes[0]);\r\n                        }\r\n                        if (extraclass)\r\n                            fragment.children[0].classList.add(extraclass);\r\n                        if (addData)\r\n                            $this._Data.push(item);\r\n                        $this.Content.appendChild(fragment);\r\n                    }\r\n                    else{\r\n                        i = 0;\r\n                        //change data-line attributes\r\n                        $this.Items.forEach(function (item) {\r\n                            console.log(item);\r\n                            console.log(item.dataset['line']);\r\n                            item.dataset['line'] =  parseInt( item.dataset['line'] ) + 1;\r\n                        });\r\n                        //TODO rendered indexes not changings\r\n\r\n                        elem.innerHTML =  $this._LineBuilder(item, 0, $this._Data.length+1);\r\n                        while (elem.childNodes[0]) {\r\n                            fragment.appendChild(elem.childNodes[0]);\r\n                        }\r\n                        if (extraclass)\r\n                            fragment.children[0].classList.add(extraclass);\r\n                        if (addData)\r\n                            $this._Data.unshift(item);\r\n                        $this.Content.prepend(fragment);\r\n                    }\r\n                    //server saver\r\n                    if ($this.LineAdd !== null)\r\n                    {\r\n                        $this.LineAdd(item, function () { //remove extraclass callback\r\n                            let x = $this.Content.querySelector('.'+extraclass);\r\n                            if (x)\r\n                                x.classList.remove(extraclass);\r\n                        });\r\n                    }\r\n                    $this.AfterAdd(item, i);\r\n                };\r\n                this.Edit = function (itemData, i){\r\n                    console.log('edit itemData', i, itemData);\r\n                    Array.from($this.Items).filter(x => parseInt(x.dataset['line'])===i)[0].classList.add('editable-waiting');\r\n                    $this.LineSave(i, '$this', itemData,\r\n                        function () {\r\n                            $this._Data[i] = itemData;\r\n                            $this.RefreshOne(i);\r\n                        });\r\n\r\n                };\r\n                /**\r\n                 *\r\n                 * @param {int} index\r\n                 * @param {bool} removeData\r\n                 * @constructor\r\n                 */\r\n                this.Remove = function(index, removeData = true){\r\n                    //TODO rendered indexes not changings\r\n                    $this.Content.querySelector(`.mt-line[data-line=\"${index}\"]`).remove();\r\n                    for (let j = index; j < $this.Items.length; j++){\r\n                        $this.Items[j].dataset['line'] =  parseInt( $this.Items[j].dataset['line'] ) - 1;\r\n                        $this.Items[j].querySelectorAll('[data-line]').forEach(function (item) {\r\n                            item.dataset['line'] = parseInt( item.dataset['line'] ) - 1;\r\n                        })\r\n                    }\r\n                    if (removeData)\r\n                        $this._Data.splice(index, 1);\r\n                    if ($this._Data.length === 0)\r\n                        $this.Refresh();\r\n                };\r\n                this.SwitchToEditMode = function () {\r\n                    Lure.Editable.EditMode = true;\r\n                    Lure.SelectAll('.editable', $this.Content).forEach(function (item) {\r\n                        // console.log(item);\r\n                        Lure.Editable.AddEdits(item);\r\n                    });\r\n                };\r\n\r\n                //### CONSTRUCTOR\r\n                if ( Array.isArray(this._Data) ){\r\n                    this.Type = \"ItemList\";\r\n                    const isListElementCssSelector = ListElement.match(/^[a-zA-Z0-9.,\\-_ *#]+$/g) !== null;\r\n                    if (isListElementCssSelector){\r\n                        let element = this.Content.querySelector(ListElement);\r\n                        element.classList.add('mt-line');\r\n                        ListElement = element.outerHTML;\r\n                        element.remove();\r\n                    }\r\n                    else{\r\n                        let list_element = ListElement.match(/<[^>]+>/)[0];\r\n                        let list_elementClassed;\r\n                        let pos = list_element.indexOf('class=\"');\r\n                        if (pos < 0)\r\n                        {\r\n                            list_elementClassed = list_element.substr(0,list_element.length - 1) + ' class=\"mt-line\"' + list_element.substr(list_element.length-1);\r\n                        }\r\n                        else\r\n                        {\r\n                            pos = list_element.indexOf('\"', pos+8);\r\n                            list_elementClassed = list_element.substr(0,pos) + \" mt-line\" + list_element.substr(pos);\r\n                        }\r\n                        ListElement = ListElement.replace(list_element, list_elementClassed);\r\n                    }\r\n                    //add data-line attribute\r\n                    ListElement = ListElement.replace(/<[\\s\\S]+?(>)/, function (a, b) {\r\n                        return a.replace(b, ' data-line=\"{{i}}\">')\r\n                    });\r\n                    this.ListElement = ListElement;\r\n                    this._LineBuilder = Lure.Compile(ListElement, true);\r\n                    if (ListElement.match(/<[^>]+class=['\"][\\w\\d\\s-]*(editable)[\\w\\d\\s-]*['\"][^>]*>([^<]*)<[^>]*>/) !== null)\r\n                    {\r\n                        this.isHasEditable = true;\r\n                        if (EditModeSwitch !== null)\r\n                            Lure.Select(EditModeSwitch).addEventListener('change', function (e) {\r\n                                if ( e.currentTarget.checked ){\r\n                                    $this.SwitchToEditMode();\r\n                                }\r\n                                else{\r\n                                    Lure.Editable.EditMode = false;\r\n                                    document.body.click();\r\n                                }\r\n                            });\r\n                    }\r\n                    this.Content.MonsieurController = this;\r\n                    this.Content.classList.add('mt-content');\r\n\r\n                }\r\n                else {\r\n                    this.Type = \"Refresh\";\r\n                    let AllChildren = Array.prototype.slice.call( this.Content.querySelectorAll('*:not(g):not(path):not(clipPath):not(text):not(br)'));\r\n                    AllChildren.push( this.Content);\r\n                    AllChildren.forEach(function (item) {\r\n                        $this.FieldAdd(item);\r\n                    })\r\n                }\r\n                Lure.TemplatorList.push(this);\r\n                if (!NoBuild)\r\n                    Build();\r\n            }\r\n            get Data(){\r\n                return this._Data;\r\n            }\r\n            set Data(data){\r\n                this._Data = data;\r\n            }\r\n            get Items(){\r\n                return this.Content.querySelectorAll('.mt-line');\r\n            }\r\n        },\r\n        TreeBuilder: class TreeBuilder{\r\n            constructor(\r\n                {\r\n                    Target = null,                          //{string, HTMLElement}\r\n                    Data = [],\r\n                    ListElement = null,\r\n                    Drop = false,                       //{bool}   - horisontal menu with drop down subtrees;\r\n                    SubSelector = null,                 //{string} - cssselector of element, where put branches\r\n                    SubSelectorHandler = function(){},  //{function} - click handle on SubSelector Element (hide/show branch for exaple)\r\n\r\n                    BeforeBuild = function(){},\r\n                    AfterBuild = function(){},\r\n\r\n                    Parent = null               //Lure.Content, which owns this Controller\r\n                }\r\n            )\r\n            {\r\n                //### DEFINES\r\n                this.isController = true;\r\n                this.Content = Lure.Select(Target);\r\n                this.Target = this.Content;\r\n                this.Parent = Parent;\r\n                this._Data = Data;\r\n                this.SubSelector = SubSelector;\r\n                this.SubSelectorHandler = SubSelectorHandler.bind(this);\r\n                this.BeforeBuild = BeforeBuild.bind(this);\r\n                this.AfterBuild = AfterBuild.bind(this);\r\n                let SubTreeClass = Drop ? 'mtb-sub_tree dropable':'mtb-sub_tree';\r\n                let Lvl = 0;\r\n                let Branch = ListElement === null ? this.Content.innerHTML : ListElement;\r\n                if (this.SubSelector === null){\r\n                    this.SubSelector = '.mtb-sub_tree';\r\n                    Branch = Branch.replace(/^([\\s\\S]*)(<\\/\\w+>)$/, function (match, html, entag) {\r\n                        entag = `<div class=\"${SubTreeClass}\"></div>${entag}`;\r\n                        return html+entag\r\n                    })\r\n                }\r\n                this.LineBuilder = Lure.Compile(Branch, true);\r\n                let $this = this;\r\n\r\n                let Index = 0;          //unque serial number of branch\r\n\r\n                let BuildElement = function(obj, key, indexJ) {\r\n                    Index++;\r\n                    let extra = {\r\n                        $lvl: Lvl,\r\n                        $key: key,\r\n                        $index: Index,\r\n                        $j: indexJ\r\n                    };\r\n                    let line = Lure.CreateElementFromString($this.LineBuilder(obj, Index, null, extra));\r\n                    line.classList.add('mtb-branch');\r\n                    for (let key in obj)\r\n                    {\r\n                        let ObjItem = obj[key];\r\n                        if (Array.isArray(ObjItem))\r\n                        {\r\n                            Lvl++;\r\n                            for (let i = 0; i < ObjItem.length; i++)\r\n                            {\r\n                                if ($this.SubSelector === null)\r\n                                {\r\n                                    line.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                }\r\n                                else\r\n                                {\r\n                                    line.classList.add('mtb-has_tree');\r\n                                    if (Drop)\r\n                                        line.classList.add('dropable');\r\n                                    let sub = line.querySelector($this.SubSelector);\r\n                                    sub.appendChild(  BuildElement(ObjItem[i], key, i) );\r\n                                }\r\n                            }\r\n                            Lvl--;\r\n                        }\r\n                    }\r\n                    return line;\r\n                };\r\n                let Build = function () {\r\n                    $this.BeforeBuild();\r\n                    if (Array.isArray($this._Data))\r\n                    {\r\n                        $this.Content.innerHTML = '';\r\n                        Lvl++;\r\n                        for (let j = 0; j < $this._Data.length; j++)\r\n                            $this.Content.appendChild(  BuildElement($this._Data[j], \"root\", 0) );\r\n                        Lvl--;\r\n                    }\r\n                    else{\r\n                        $this.Content.appendChild(BuildElement($this._Data, \"root\", 0));\r\n                    }\r\n                    Lvl = 0;\r\n                    Index = 0;\r\n                    $this.AfterBuild();\r\n\r\n                };\r\n\r\n                Build(this._Data);\r\n\r\n                //### METHODS\r\n                this.Refresh = function (data=$this._Data) {\r\n                    $this._Data = data;\r\n                    Build();\r\n                }\r\n\r\n            }\r\n            get Data(){\r\n                return this._Data;\r\n            }\r\n            set Data(data){\r\n                this._Data = data;\r\n            }\r\n        }\r\n    }\r\n};\r\n//register plugin\r\nLure.Content = Lure.Plugin.Content.Content;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Lure.Content = Lure.Content;\r\n\r\n","//Tutorial\r\n//TargetButton = {string, HTMLElement} - button who start the tutor\r\n//TargetContent = {string, HTMLElement} - select/element where search tutors\r\nLure.Plugin.Tutor = class MonsieurTutor{\r\n    /**\r\n     *\r\n     * @param {HTMLElement} TargetButton\r\n     * @param {HTMLElement} TargetContent\r\n     */\r\n    constructor(TargetButton = null, TargetContent = null){\r\n        //### DEFINES\r\n        let $this = this;\r\n        this.TargetButton = Lure.Select(TargetButton);\r\n        this.TargetContent = Lure.Select(TargetContent);\r\n        const MT = `<div class=\"lure-tutor\">\r\n                        <div class=\"cd-caption\">\r\n                            <span>Шаг </span>\r\n                            <span class=\"lure-tutor_step\"></span>\r\n                        </div>\r\n                        <div class=\"lure-tutor_desc\"></div>\r\n                        <div class=\"lure-tutor_btns\">\r\n                            <button class=\"button btn-tutor btn-tutor-stop\">Прервать обучение</button>\r\n                            <button class=\"button btn-tutor btn-tutor-next\">Далeе →</button></div>\r\n                   </div>`;\r\n        this.Content = Lure.CreateElementFromString(MT);\r\n        this.ContentBG = Lure.CreateElementFromString('<div class=\"lure-tutor-bg dialog-wrapper\"></div>');\r\n        this.Content.style.display = 'none';\r\n        this.ContentBG.style.display = 'none';\r\n        this._Description = this.Content.querySelector('.lure-tutor_desc');\r\n        this._Step = this.Content.querySelector('.lure-tutor_step');\r\n        this._ButtonNext = this.Content.querySelector('.btn-tutor-next');\r\n        this._ButtonStop = this.Content.querySelector('.btn-tutor-stop');\r\n\r\n        $this.Data = [];\r\n        const ButtonNextText = this._ButtonNext.innerHTML;\r\n        let TutorPosition = 0;\r\n        /*get transparent*/\r\n        let temp = document.createElement('div');\r\n        temp.style.display = 'none';\r\n        document.body.appendChild(temp);\r\n        const ColorTransparent = window.getComputedStyle(temp).backgroundColor;\r\n        temp.remove();\r\n        //---\r\n        const ElemCssRestore = function () {\r\n            let Element = $this.Data[TutorPosition-1].obj;\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '';\r\n                Element.style.position = '';\r\n                Element.style.outline = '';\r\n                Element.style.display = '';\r\n                Element.style.backgroundColor = '';\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.position = '';\r\n                elem.style.zIndex = '';\r\n            });\r\n        };\r\n        const ElemCssSet = function (Element) {\r\n            if (Element.tagName.toLowerCase() !== 'tr')\r\n            {\r\n                Element.style.zIndex = '11';\r\n                Element.style.position = 'relative';\r\n                Element.style.outline = '5px #bee0ff solid';\r\n                let style = window.getComputedStyle(Element);\r\n                if (style.backgroundColor === ColorTransparent)\r\n                    Element.style.backgroundColor = \"#fff\";\r\n                if (!Lure.isVisible(Element) )\r\n                {\r\n                    if (Element.tagName.toLowerCase() !== \"table\" )\r\n                        Element.style.display = 'block';\r\n                    else\r\n                        Element.style.display = 'table';\r\n                }\r\n                /* if (Element.length > 1)\r\n                 Element.eq(1).css({zIndex: '', outline: ''});*/\r\n                return;\r\n            }\r\n            let nElements = Element.querySelectorAll('th, td');\r\n            nElements.forEach(function (elem) {\r\n                elem.style.zIndex = \"11\";\r\n                elem.style.position = \"relative\";\r\n                let style = window.getComputedStyle(elem);\r\n                if (style.backgroundColor === ColorTransparent){\r\n                    elem.style.backgroundColor = \"#fff\";\r\n                }\r\n            });\r\n            /* if (Element.length > 1)\r\n             Element.eq(1).css({zIndex: '', outline: ''});*/\r\n        };\r\n        const Run = function () {\r\n            console.log(\"tutor run\");\r\n            if ($this.TargetContent === null)\r\n                return;\r\n            let Items = $this.TargetContent.querySelectorAll('*[data-tutor]:not([data-line]), *[data-tutor][data-line=\"0\"]');\r\n            if (Items.length < 1){\r\n                Lure.Confirm(\"Сообщение\", \"На этом экране нет подсказок\");\r\n                return;\r\n            }\r\n            // document.body.style.position = 'relative';\r\n\r\n            Items.forEach(function (item) {\r\n                $this.Data.push({\r\n                    obj: item,\r\n                    desc: item.dataset['tutor']\r\n                })\r\n            });\r\n            $this.Content.style.display = '';\r\n            $this.ContentBG.style.display = '';\r\n            GoStep();\r\n        };\r\n        const GoStep = function () {\r\n            //restore prev element's css\r\n            if (TutorPosition > 0)\r\n                ElemCssRestore();\r\n            if (TutorPosition === $this.Data.length)\r\n            {\r\n                Stop();\r\n                return;\r\n            }\r\n            //select next elem\r\n            let Element = $this.Data[TutorPosition].obj;\r\n            let ElementDesc = $this.Data[TutorPosition].desc;\r\n            // check for invisible parent\r\n            let ElemParent = ElementDesc.match(/{([\\s\\S]+)}/);\r\n            if (ElemParent !== null)\r\n            {\r\n                ElemParent = ElemParent[1];\r\n                ElementDesc = ElementDesc.replace(/{([\\s\\S]+)}/, '');\r\n                Element = Element.closest(ElemParent);\r\n                $this.Data[TutorPosition].obj = Element;\r\n                //Element.push( );\r\n            }\r\n            //set element visible\r\n            ElemCssSet(Element);\r\n            //write new element title and desc\r\n            $this._Step.innerHTML = (TutorPosition+1) + \"/\"+$this.Data.length;\r\n            $this._Description.innerHTML = ElementDesc;\r\n            //caption next button\r\n            if ((TutorPosition+1) === $this.Data.length)\r\n            {\r\n                $this._ButtonNext.innerHTML = 'Завершить';\r\n                $this._ButtonStop.style.opacity = '0';\r\n            }\r\n\r\n            //move tutor desc box\r\n            let posX = Element.offsetLeft + Element.clientWidth + 10;\r\n            let posY = Element.offsetTop - $this.Content.clientHeight - 10;\r\n            if (posY < 10)\r\n                posY = 10;\r\n            if ( (posX + $this.Content.clientWidth) > window.innerWidth )\r\n            {\r\n                posX = Element.offsetLeft - $this.Content.clientWidth - 10;\r\n                if (window.innerWidth < $this.Content.clientWidth + Element.clientWidth)\r\n                {\r\n                    posX = Element.offsetLeft + Element.clientWidth - $this.Content.clientWidth - 20;\r\n                }\r\n\r\n            }\r\n            if (document.documentElement.scrollTop  > posY || document.documentElement.scrollTop + window.innerHeight < Element.offsetTop + Element.offsetHeight)\r\n            {\r\n                //$('html, body').animate({scrollTop: posY - 10}, 300);\r\n                document.documentElement.scrollTop =  (posY - 10)  +'px';\r\n            }\r\n            if (posX < 10)\r\n                posX = 10;\r\n            $this.Content.style.left = posX +'px';\r\n            $this.Content.style.top = posY +'px';\r\n\r\n            TutorPosition++;\r\n        };\r\n        const Stop = function () {\r\n            //     document.body.style.position = '';\r\n            ElemCssRestore();\r\n            $this.Content.style.display = 'none';\r\n            $this.ContentBG.style.display = 'none';\r\n            $this._ButtonNext.innerHTML = ButtonNextText;\r\n            $this._ButtonStop.style.opacity = '';\r\n            TutorPosition = 0;\r\n            $this.Data = [];\r\n        };\r\n        //### CONSTRUCT\r\n\r\n        this.TargetButton.onclick = Run;\r\n        this._ButtonNext.onclick = GoStep;\r\n        this._ButtonStop.onclick = Stop;\r\n\r\n        document.body.appendChild(this.Content);\r\n        document.body.appendChild(this.ContentBG);\r\n\r\n        //### METHODS\r\n        this.Run = Run;\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nLure.Plugin.Load = class MonsieurLoading{\r\n    constructor(\r\n        {\r\n            Target = 'body'\r\n        } = {}\r\n    ){\r\n        this.Target = Lure.Select(Target);\r\n        this.Target.style.position = 'relative';\r\n        this.Content = Lure.CreateElementFromString(`<div class=\"ajax-loading\" style=\"display: none\"></div>`);\r\n        let cx = 60; //diameter\r\n        let cy = 60;\r\n        let _DoArc = function(radius, maxAngle){\r\n            let d = \" M \"+ (cx + radius) + \" \" + cy;\r\n            for (let angle = 0; angle < maxAngle; angle++)\r\n            {\r\n                let rad = angle * (Math.PI / 180);  //deg to rad\r\n                let x = cx + Math.cos(rad) * radius;\r\n                let y = cy + Math.sin(rad) * radius;\r\n                d += \" L \"+x + \" \" + y;\r\n            }\r\n            return d;\r\n        };\r\n        let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\">\r\n                     <path d=\"${_DoArc(45, 160)}\" class=\"lure-arc1\" fill=\"none\" stroke=\"#449b22\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(40, 130)}\" class=\"lure-arc2\" fill=\"none\" stroke=\"#61c8de\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(35, 100)}\" class=\"lure-arc3\" fill=\"none\" stroke=\"#761c19\" stroke-width=\"5\"></path>\r\n                     <path d=\"${_DoArc(30, 70)}\"  class=\"lure-arc4\" fill=\"none\" stroke=\"#333333\" stroke-width=\"5\"></path>\r\n                   </svg>`;\r\n        this.Target.appendChild(this.Content);\r\n        this.Content.innerHTML = svg;\r\n        this.Timeout = null;\r\n    }\r\n    Show(){\r\n        let $this = this;\r\n        this.Content.style.display = '';\r\n        clearTimeout(this.TimeoutHide);\r\n        this.Timeout = setTimeout(function(){\r\n            $this.Content.style.display = 'block';\r\n        }, 70);\r\n    }\r\n    Hide(){\r\n        let $this = this;\r\n        clearTimeout(this.Timeout);\r\n        this.TimeoutHide = setTimeout(function(){\r\n            $this.Content.style.display = 'none';\r\n        }, 250); //hide may be called in same time as the show()\r\n    }\r\n};\r\n\r\nLure.Plugin.Tooltip = class MonsieurTooltip{\r\n    constructor({\r\n                    Target    = document,           //Target-listener (global document by default)\r\n                    Attribute = \"data-tooltip\",     // data-tooltip=\"Help text here\"\r\n                    Delay     = 400,                //delay before tooltip show\r\n                    Time      = 1100,               //showing time\r\n                    Cursor    = \"help\",             //item:hover cursor\r\n                    Custom    = `<div class=\"lure-tooltip\">`,               //custom html of tooltip\r\n                    AfterBuild = function(){}\r\n\r\n                })\r\n    {\r\n        let $this = this;\r\n        this.ToolTip = Lure.CreateElementFromString(Custom);\r\n        let Timer = null;\r\n        let Destr = null;\r\n        this.Target = Lure.Select(Target);\r\n        const Show = function (text){\r\n            this.ToolTip.innerHTML = text;\r\n            $this.Target.appendChild(this.ToolTip);\r\n\r\n        }.bind(this);\r\n        Lure.AddEventListenerGlobal('mouseover', `[${Attribute}]`, function (e) {\r\n            let text = e.currentTarget.dataset[Attribute.replace('data-', '')];\r\n            clearTimeout(Destr);\r\n            Timer = setTimeout(function(){\r\n                Show(text);\r\n            }, Delay);\r\n        }, this.Target);\r\n        Lure.AddEventListenerGlobal('mouseout', `[${Attribute}]`, function (e) {\r\n            clearTimeout(Timer);\r\n            Destr = setTimeout(function () {\r\n                //$this.ToolTip.remove();\r\n            }, Time)\r\n        }, this.Target);\r\n        setTimeout(function () {\r\n            AfterBuild.bind($this);\r\n        }, 0)\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\nLure.Tutor = Lure.Plugin.Tutor;\r\nLure.Load = Lure.Plugin.Load;\r\nLure.Tooltip = Lure.Plugin.Tooltip;\r\n\r\n\r\n\r\n\r\n/*\r\n class yWatcher {\r\n constructor(target, handler, level) {\r\n let $this = this;\r\n let mirror = JSON.parse(JSON.stringify(target));\r\n let watch = {};\r\n function setGetSet(obj, prop, handler, tar) {\r\n let oldval = obj[prop];\r\n let newval = oldval;\r\n this['_'+prop] = obj[prop];\r\n let getter = function () {\r\n return this['_'+prop];\r\n };\r\n let setter = function (val) {\r\n oldval = newval;\r\n\r\n tar[prop] = val;\r\n console.log('xo', target);\r\n if (Array.isArray(val) || typeof val === typeof {}) {\r\n setWatcher(val, [prop]);\r\n }\r\n return newval = handler.call(obj, prop, oldval, val);\r\n };\r\n obj[\"_\"+prop] = obj[prop];\r\n if (delete obj[prop]) { // can't watch constants\r\n Object.defineProperty(obj, prop, {\r\n get: getter,\r\n set: setter,\r\n enumerable: true,\r\n configurable: true\r\n });\r\n\r\n }\r\n\r\n\r\n }\r\n\r\n function GetterSetter(obj, prop, deepprop) {\r\n //watch['_'+deepprop] = obj[prop];\r\n console.log('watch', watch);\r\n console.log('obdp', obj, `prop: ${prop}`, `deepprop: ${deepprop}`);\r\n let x = eval(`watch${deepprop}`);\r\n console.log('x', x);\r\n\r\n x['_'+prop] = obj[prop];\r\n let getter = function () {\r\n if (deepprop !== '')\r\n return target[deepprop][prop];\r\n return target[prop];\r\n };\r\n\r\n let setter = function (val) {\r\n let oldval;\r\n if (deepprop !== '')\r\n oldval = target[deepprop][prop];\r\n oldval = target[prop];\r\n console.log('xo', target);\r\n //if (Array.isArray(val) || typeof val === typeof {}) {\r\n //    setWatcher(val, [prop]);\r\n //}\r\n if (deepprop !== '')\r\n target[deepprop][prop] = val;\r\n target[prop] = val;\r\n return handler.call(obj, prop, oldval, val);\r\n };\r\n Object.defineProperty(x, prop, {\r\n get: getter,\r\n set: setter,\r\n enumerable: true,\r\n configurable: true\r\n });\r\n }\r\n this.GetDeep = function getOfDeep(deep){\r\n let s='';\r\n for (let i = 0; i < deep.length; i++){\r\n if (typeof deep[i] === 'undefined' || !deep[i])\r\n return s;\r\n s += `[\"${deep[i]}\"]`;\r\n }\r\n return s;\r\n };\r\n let lvl = 0;\r\n let deep = [];\r\n function setWatcher(obj,) {\r\n //      debugger;\r\n if (!Array.isArray(obj) && typeof obj === typeof {}) {\r\n for (let k in obj) {\r\n if (obj.hasOwnProperty(k)) {\r\n GetterSetter(obj, k, $this.GetDeep(deep));\r\n // setGetSet(obj, k, handler, eval('target'+$this.GetDeep(deep)));\r\n if (Array.isArray(obj[k]) || typeof obj[k] === typeof {}) {\r\n deep.push(k);\r\n lvl++;\r\n setWatcher(JSON.parse(JSON.stringify(obj[k])));\r\n // continue;\r\n }\r\n //deep.slpice(deep.length-1, 1);\r\n }\r\n }\r\n return\r\n }\r\n console.log('-array: ', obj);\r\n }\r\n setWatcher(mirror);\r\n this.o = mirror;\r\n this.watch = watch;\r\n }\r\n }\r\n //let xo = {name: \"vasan\", val: 12, a: {b:'', c: ''}, arr: [11,22]};\r\n let xo = {a: 'vasya', b: 42, c:{d: 'valued'}};\r\n let wa = new Watcher(xo, console.log);\r\n console.log('---');\r\n console.log('xo', xo);\r\n console.log('wa', wa);\r\n\r\n */","Lure.Plugin.Chart = {\r\n    Core: '',\r\n    Chart: class LureChart{\r\n        constructor(\r\n            Target = null,      //where render chart\r\n            {\r\n                Type = 'Line',  //Line Bar Pie\r\n                Title = '',\r\n                Labels = {\r\n                    Rotation: 'auto',\r\n                    Data: []\r\n                },\r\n                Grid = {},\r\n                Series = [],\r\n                Tooltip = {\r\n                    Template: null,\r\n                },\r\n                AxisY = {\r\n                    Scale: ['auto', 'auto', 'auto'],\r\n                    Visible: true,\r\n                },\r\n                Height = 400,\r\n                SeriesOptions = {},\r\n            }={},\r\n        ){\r\n           // let pp = new Lure.Diagnostics.Perf(false);\r\n            /// <DEFAULTS>\r\n            //const Colors = ['red', 'green', 'blue'];\r\n            const ColorsDefault = ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange', 'tomato', 'darkblue'];\r\n            const TemplateDefault = {\r\n                Line: 'Name: {{Name}}<br>Value: {{Value}}',\r\n                Pie: 'Name: {{Name}}<br>Value: {{Value}}'\r\n            };\r\n            /// </DEFAULTS>\r\n            ///\r\n            Lure.Chart.Count++;\r\n            let chart = this;\r\n            this.Content = Lure.Select(Target);\r\n            this.Content.classList.add('mt-chart'); // mt\r\n            this.Content.style.position = 'relative';\r\n\r\n            this.isGraph = true;\r\n\r\n\r\n            let Prepared = [];\r\n            let Buffer = {\r\n                Legend: '',\r\n\r\n                AxisX: '',\r\n                AxisY: '',\r\n                Grid: '',\r\n                Svg: '',\r\n\r\n                Height: 0,\r\n                Width: 0,\r\n                Abscissa: null,\r\n                SeriesPoints: [],\r\n\r\n                SeriesCount:{\r\n                    Line: 0,\r\n                    Bar: 0,\r\n                    Pie: 0,\r\n                    Ring: 0,\r\n                },\r\n                SeriesBar: 0,\r\n\r\n                ParametersAxisX: null,\r\n            };\r\n            this._Series = Series;\r\n\r\n            this.Options = {\r\n                Type: Type? Type.toLowerCase(): 'line',\r\n                Title: Title? Title: '',\r\n                Legend: {\r\n                    Visible: true,\r\n                },\r\n                Labels: {\r\n                    Visible: (typeof Labels.Visible === 'undefined' || Labels.Visible),\r\n                    Rotation: Labels.Rotation? Labels.Rotation: 'auto',\r\n                    Data: Labels.Data? Labels.Data: [],\r\n                    Font: {\r\n                        Family: 'sans-serif',\r\n                        Size: '0.8rem',\r\n                    }\r\n                },\r\n                Grid: {\r\n                    Visible: (typeof Grid.Visible === 'undefined' || Grid.Visible),\r\n                },\r\n                Series: null,\r\n                SeriesOptions: {\r\n                    BarStack: false,\r\n                    BarGradient: true,\r\n\r\n                    PieStack: false,\r\n                    PieType: 'pie'\r\n                },\r\n                AxisY: {\r\n                    Font: {\r\n                        Family: 'sans-serif',\r\n                        Size: '0.8rem',\r\n                    },\r\n                    Scale: AxisY.Scale? ([Lure.isNumeric(AxisY.Scale[0])? AxisY.Scale[0]:'auto', Lure.isNumeric(AxisY.Scale[1])? AxisY.Scale[1]:'auto', Lure.isNumeric(AxisY.Scale[2])? AxisY.Scale[2]:'auto']):['auto', 'auto', 'auto'],\r\n                    Visible: (typeof AxisY.Visible === 'undefined' || AxisY.Visible),\r\n\r\n                },\r\n                Padding: 0,\r\n                Tooltip: {\r\n                    Template: null, //Tooltip.Template?Tooltip.Template : TemplateDefault.Line\r\n                }\r\n            };\r\n            this.Block = (function () {\r\n                this.Content.innerHTML = `<div class=\"mt-chart col\">\r\n                                        <div class=\"mt-chart-caption\">\r\n                                          <div class='mt-chart-title'>${Title}</div>\r\n                                          <div class=\"mt-chart-legend row\"></div>\r\n                                        </div>\r\n                                        <div class=\"mt-chart-kek row flex-100\">\r\n                                          <div class=\"mt-chart-y row\"></div>\r\n                                          <div class=\"col flex-100\">\r\n                                            <div class=\"mt-chart-area row flex-100\">\r\n                                              <svg class=\"mt-chart-svg\"></svg>\r\n                                              <div class=\"mt-chart-grid\" style=\" position: absolute;\"></div>\r\n                                            </div>\r\n                                            <div class=\"mt-chart-x row\"></div>\r\n                                           </div>\r\n                                        </div>\r\n                                      </div>`;\r\n                const _Legend     = this.Content.querySelector('.mt-chart-legend');\r\n                const _AxisX      = this.Content.querySelector('.mt-chart-x');\r\n                const _AxisY      = this.Content.querySelector('.mt-chart-y');\r\n                const _ChartArea  = this.Content.querySelector('.mt-chart-area');\r\n                const _Grid       = this.Content.querySelector('.mt-chart-grid');\r\n                const _Svg        = this.Content.querySelector('.mt-chart-svg');\r\n                return {\r\n                    get Legend(){\r\n                        return _Legend;\r\n                    },\r\n                    set Legend(v){\r\n                        _Legend.innerHTML = v;\r\n                    },\r\n                    get AxisX(){\r\n                        return _AxisX;\r\n                    },\r\n                    set AxisX(v){\r\n                        _AxisX.innerHTML = v;\r\n                    },\r\n                    get AxisY(){\r\n                        return _AxisY;\r\n                    },\r\n                    set AxisY(v){\r\n                        _AxisY.innerHTML = v;\r\n                    },\r\n                    get ChartArea(){\r\n                        return _ChartArea;\r\n                    },\r\n                    set ChartArea(v){\r\n                        _ChartArea.innerHTML = v;\r\n                    },\r\n                    get Grid(){\r\n                        return _Grid;\r\n                    },\r\n                    set Grid(v){\r\n                        _Grid.innerHTML = v;\r\n                    },\r\n                    get Svg(){\r\n                        return _Svg;\r\n                    },\r\n                    set Svg(v){\r\n                        _Svg.innerHTML = v;\r\n                    },\r\n                }\r\n            }.bind(this))();\r\n            /*********/\r\n            const Builder = {\r\n                Legend(){\r\n\r\n                },\r\n                AxisX: function(){\r\n                    if (!chart.Options.Labels.Visible)\r\n                    {\r\n                        this.Block.AxisX = '';\r\n                        return;\r\n                    }\r\n                    let labels = chart.Options.Labels.Data;\r\n                    //const style = `transform: rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px; width: ${Buffer.AxisXParams.Width}px; margin-left: ${Buffer.AxisXParams.MarginLeft}px;`;\r\n                    const style = `transform: translate(${Buffer.AxisXParams.MarginLeft}px) rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px ; width: ${Buffer.AxisXParams.Width}px;`;\r\n                    let a = '';\r\n                    for (let i = 0 ; i < labels.length; i++){\r\n                        a += `<div class=\"mt-chart-label mt-chart-label__x\" style=\"font-family: ${chart.Options.Labels.Font.Family}; font-size: ${chart.Options.Labels.Font.Size}\"><span style=\"${style}\">${labels[i]}</span></div>`\r\n                    }\r\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\r\n                    Buffer.AxisX = a;\r\n                    this.Block.AxisX = a;\r\n                    this.Block.AxisX.style.borderTop = '1px #111 solid';\r\n                }.bind(this),\r\n                AxisY: function () {\r\n                    !this.Options.Labels.Visible\r\n                    return '';\r\n\r\n                }.bind(this),\r\n\r\n\r\n                Make3Legend(Serie, i){\r\n                    return `<div class=\"mt-chart-legend__item row\">\r\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" checked=\"checked\" id=\"legcheck${Serie.Name}${i}\">\r\n                          <div class=\"mt-legend-icon\" style=\"background-color: ${Serie.Color}\"></div>\r\n                          <label class=\"mt-legend-label\" for=\"legcheck${Serie.Name}${i}\">${Serie.Name}</label>\r\n                        </div>`;\r\n                },\r\n                MakeAxisY(){\r\n                    /*if (!scale)\r\n                     return '';\r\n                     let caption = '';\r\n                     if (i>0)\r\n                     caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${name}</div></div>`;\r\n                     let a = '';\r\n                     for (let j = 0; j< scale.length; j++){\r\n                     a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                     }\r\n                     return `<div class=\"mt-chart-axis__y row\" ${(i>0)? ('style=\"color: '+color+'; font-weight: bold;\"'):''} data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;*/\r\n                    let i = 0;\r\n                    if (!chart.Options.AxisY.Visible){\r\n                        i = 1;\r\n                        if (chart._ScaleY.Scales.length < 2)\r\n                            return '';\r\n                    }\r\n                    let AxisYStyle = `font-family: ${chart.Options.Labels.Font.Family}; font-size: ${chart.Options.Labels.Font.Size};`;\r\n                    let accum = '';\r\n                    for (i; i <chart._ScaleY.Scales.length; i++){\r\n                        let index = chart._ScaleY.Dict.indexOf(i);//.filter(x=>x===i && x !==0)[0];\r\n                        let scale = chart._ScaleY.Scales[i];\r\n                        let caption = '';\r\n                        //let a = '';\r\n                        if (i>0)\r\n                            caption = `<div class=\"mt-chart-axis-caption\"><div style=\"transform: rotate(-90deg)\">${chart.Options.Series[index].Title}</div></div>`;\r\n                        let a = '';\r\n                        for (let j = 0; j< scale.length; j++){\r\n                            a += `<div class=\"mt-chart-label mt-chart-label__y\"><span>${scale[j]}</span></div>`;\r\n                        }\r\n                        if (i>0)\r\n                            AxisYStyle += ` color: ${chart.Options.Series[index].Color}; font-weight: bold;`;\r\n                        accum += `<div class=\"mt-chart-axis__y row\" style=\"${AxisYStyle}\" data-line=\"${i}\">${caption}<div class=\"mt-chart-labels col\">${a}</div></div>`;\r\n\r\n                    }\r\n                    return accum;\r\n                },\r\n                MakeAxisX(){\r\n                    if (!chart.Options.Labels.Visible)\r\n                        return '';\r\n                    let labels = chart.Options.Labels.Data;\r\n\r\n                    //const style = `transform: rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px; width: ${Buffer.AxisXParams.Width}px; margin-left: ${Buffer.AxisXParams.MarginLeft}px;`;\r\n                    const style = `transform: translate(${Buffer.AxisXParams.MarginLeft}px) rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px ; width: ${Buffer.AxisXParams.Width}px;`;\r\n                    let a = '';\r\n                    for (let i = 0 ; i < labels.length; i++){\r\n                        a += `<div class=\"mt-chart-label mt-chart-label__x\" style=\"font-family: ${chart.Options.Labels.Font.Family}; font-size: ${chart.Options.Labels.Font.Size}\"><span style=\"${style}\">${labels[i]}</span></div>`\r\n                    }\r\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\r\n                    return a;\r\n                },\r\n                MakeGrid(a,b){\r\n                    if (!chart.Options.Grid.Visible)\r\n                        return '';\r\n                    return Lure.Chart.GetGrid(chart.Options.Labels.Data.length, chart._ScaleY.Scales[0].length-1, chart.Options.Padding);\r\n                },\r\n                MakeGraph(serie, i){\r\n                    let index = chart._ScaleY.Dict[i];\r\n                    let scale = chart._ScaleY.Scales[index];\r\n                    let mm = chart._ScaleY.MinMax[index];\r\n                    let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                    let DataAbscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, chart.Width);\r\n                    let points = Lure.Chart.GetPoints(DataAbscissa, DataOrdinata);\r\n                    return Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width);\r\n                },\r\n                CalcAxi6sX(){\r\n                    let c = Lure.CreateElementFromString(`<div class=\"mt-chart-label mt-chart-label__x\"><span>${chart.Options.Labels.Data[0]}</span></div>`);\r\n                    //let pp = performance.now();\r\n                    let size = Lure.GetInlineSize(c, getComputedStyle(Lure.Select('span')).fontSize);\r\n\r\n                    let w = chart.Width/chart.Options.Labels.Data.length;\r\n                    chart.Options.Padding = w/2;\r\n                    chart.Block.AxisX.style.paddingLeft = w/2+'px';\r\n                    let h = size.height;\r\n                    let wFact = size.width;\r\n                    let angle;\r\n\r\n                    if (chart.Options.Labels.Rotation !== 'auto'){\r\n                        angle = parseFloat(chart.Options.Labels.Rotation);\r\n                    }\r\n                    else{\r\n                        let cos = (w-h)/(wFact+h);\r\n                        if (cos < 0.1)\r\n                            cos = 0;\r\n                        if (cos > 1)\r\n                            cos = 1;\r\n                        angle = (-90*(1-cos));\r\n                    }\r\n                    //Lure.Perf(pp, '--calcx--');\r\n                    return {\r\n                        Height: Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)))),\r\n                        Width: wFact,\r\n                        MarginTop:  (wFact>w)? ((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))) - h) : 0,\r\n                        MarginLeft: (wFact>w)? (-w/2):(-wFact/2),\r\n                        Angle: angle,\r\n                    }\r\n\r\n                }\r\n            };\r\n\r\n            const Init = {\r\n                Tooltip: function () {\r\n                    if (Tooltip.Template)\r\n                    {\r\n                        this.Options.Tooltip.Template = Tooltip.Template;\r\n                        return;\r\n                    }\r\n                    if (this.Options.Type === 'line' || this.Options.Type === 'bar'){\r\n                        this.Options.Tooltip.Template = TemplateDefault.Line;\r\n                        return;\r\n                    }\r\n                    if (this.Options.Type === 'pie' || this.Options.Type === 'ring'){\r\n                        this.Options.Tooltip.Template = TemplateDefault.Pie;\r\n                        return;\r\n                    }\r\n\r\n                    //Tooltip.Template?Tooltip.Template : TemplateDefault.Line\r\n                }.bind(this),\r\n                Series: function(){\r\n                    let Se = [];\r\n                    if (this.Options.Series !== null){\r\n\r\n                        return;\r\n                    }\r\n                    for (let i = 0; i < this._Series.length; i++){\r\n                        let ep = {};\r\n                        ep.Name    = this._Series[i].Name ? this._Series[i].Name                : 'Unnamed';\r\n                        ep.Title   = this._Series[i].Title? this._Series[i].Title               : ep.Name;\r\n                        ep.Color   = this._Series[i].Color? this._Series[i].Color: ColorsDefault[i]?ColorsDefault[i]:'#000';\r\n                        ep.Width   = this._Series[i].Width? this._Series[i].Width               : 2;\r\n\r\n                        ep.Data    = this._Series[i].Data;\r\n\r\n                        ep.Type    = this._Series[i].Type ? this._Series[i].Type.toLowerCase()  : (Type?Type.toLowerCase():'line');\r\n                        //debugger;\r\n                        if (ep.Type === 'pie' || ep.Type === 'ring'){\r\n                            ep.Colors = this._Series[i].Colors? this._Series[i].Colors: ColorsDefault;\r\n                            ep.Width   = this._Series[i].Width? this._Series[i].Width               : 30;\r\n                            ep.Labels  = this._Series[i].Labels? this._Series[i].Labels: (this.Options.Labels.Data?this.Options.Labels.Data: false);\r\n\r\n                        }\r\n\r\n\r\n                        ep.Line    = i;\r\n                        ep.isVisible = (typeof this._Series[i].Visible === 'undefined' || this._Series[i].Visible); //true by default\r\n                        ep.OwnAxis = this._Series[i].OwnAxis;\r\n                        //ep.OwnAxis = Lure.Chart.CheckOwnAxis(ep);\r\n\r\n\r\n                        ep.Point   = this._Series[i].Point;\r\n                        ep.Point   = Lure.Chart.GetSeriePointOptions(ep);\r\n\r\n                        Buffer.Legend += Lure.Chart.MakeLegend(ep, i);\r\n                        Buffer.SeriesCount[ep.Type.capitalize()]++;\r\n                        Se.push(ep);\r\n                    }\r\n                    this.Options.Series = Se;\r\n                }.bind(this),\r\n                AxisY: function () {\r\n                    if (this.Width === LastRender.Width)\r\n                        return;\r\n                    let count = this.Options.AxisY.Visible? 1:0;\r\n                    let len = 0;\r\n                    let width = 0;\r\n                    for (let i = 0; i < this.Options.Series.length; i++){\r\n                        //check special Scales\r\n                        if (this.Options.Series[i].isVisible && this.Options.Series[i].OwnAxis){\r\n                            let len = 0;\r\n                            for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                                let w = Lure.GetTextWidth(this.Options.Series[i].Data[j], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                                if (w > len)\r\n                                    len = this.Options.Series[i].Data[j];\r\n                            }\r\n                            let lenmax = Lure.GetTextWidth(this.Options.Series[i].OwnAxis[1], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                            if (lenmax > len)\r\n                                len = lenmax;\r\n                            //debugger;\r\n                            //width += Lure.GetTextWidth('i'.repeat(len), this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                            width += len + 8;  //8px = (7px) :before.width  + (1px) border\r\n                            let wCapti = Lure.GetTextWidth(this.Options.Series[i].Title, this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                            width += wCapti > 30 ? 30: wCapti;\r\n                        }\r\n                        //check default scale\r\n                        else if (this.Options.Series[i].isVisible && !Array.isArray(this.Options.Series[i].OwnAxis)){\r\n                            for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                                let w = Lure.GetTextWidth(this.Options.Series[i].Data[j], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                                if (w > len)\r\n                                    len = this.Options.Series[i].Data[j];\r\n                            }\r\n                        }\r\n                    }\r\n                    width += len + 10 +7;\r\n                    Buffer.AxisYWidth = width;\r\n                   // console.log('->Init.AxisY:',width);\r\n                }.bind(this),\r\n                AxisX: function () {\r\n                    if (this.Width === LastRender.Width)\r\n                        return;\r\n                    if (!this.Options.Labels.Visible){\r\n                        Buffer.AxisXParams = {\r\n                            Height: 0,\r\n                            Width: 0,\r\n                            MarginTop:  0,\r\n                            MarginLeft: 0,\r\n                            Angle: 0,\r\n                        };\r\n                        return;\r\n                    }\r\n\r\n                    let maxWidth = 0;\r\n                    for (let i = 0; i < this.Options.Labels.Data.length; i++){\r\n                        let w = Lure.GetTextWidth(this.Options.Labels.Data[i], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                        if (w > maxWidth)\r\n                            maxWidth = w;\r\n                    }\r\n                    let w = (this.Content.clientWidth - Buffer.AxisYWidth) / this.Options.Labels.Data.length;\r\n                    w = (this.Content.clientWidth - Buffer.AxisYWidth - w/2) / this.Options.Labels.Data.length;\r\n                    //debugger;\r\n                    this.Options.Padding = w/2;\r\n                    this.Block.AxisX.style.paddingLeft = w/2+'px';\r\n                    let h = 0; //TODO hardcode fix\r\n                    let wFact = maxWidth;\r\n                    let angle;\r\n\r\n                    if (this.Options.Labels.Rotation !== 'auto'){\r\n                        angle = parseFloat(this.Options.Labels.Rotation);\r\n                    }\r\n                    else{\r\n                        let cos = (w)/(wFact);\r\n                        if (cos < 0.15)\r\n                            cos = 0;\r\n                        if (cos > 1)\r\n                            cos = 1;\r\n                        //angle = (-90*(1-cos));\r\n                        //console.log('w',this.Width, w, wFact,cos);\r\n                        angle = -(Math.acos(cos)*180/Math.PI).toFixed(2);\r\n                       /* if (angle >0 )\r\n                            angle = -angle;*/\r\n                        //console.log('angleold', (-90*(1-cos)));\r\n                        //console.log('anglenew', h, parseFloat(getComputedStyle(this.Block.AxisX).lineHeight));\r\n                    }\r\n                    //Lure.Perf(pp, '--calcx--');\r\n                    Buffer.AxisXParams = {\r\n                        Height: Math.round((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)))) + parseFloat(getComputedStyle(this.Block.AxisX).lineHeight),\r\n                        Width: wFact,\r\n                        MarginTop:  (wFact>w)? ((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))) - h) : 0,\r\n                        MarginLeft: (wFact>w)? (-w/2):(-(wFact)/2),\r\n                        Angle: angle,\r\n                    }\r\n\r\n\r\n\r\n                }.bind(this),\r\n                ScaleY: function () {\r\n                    this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.AxisXParams.Height), this);\r\n                    return;\r\n                    if (ctx.Type === 'pie'){\r\n                        return [];\r\n                    }\r\n                    let min = series[0].Data[0];\r\n                    let max = series[0].Data[0];\r\n                    let isAutoScale = true;\r\n                    let isAutoStep = true;\r\n                    if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto')\r\n                    {\r\n                        isAutoScale = false;\r\n                        min = ctx.Options.AxisY.Scale[0];\r\n                        max = ctx.Options.AxisY.Scale[1];\r\n                    }\r\n                    if (ctx.Options.AxisY.Scale[2] !== 'auto')\r\n                        isAutoStep = false;\r\n                    let mm = [ [series[0].Data[0],series[0].Data[0]] ];\r\n                    let index = 0;\r\n                    let scales = [];\r\n\r\n                    let sc = {\r\n                        Scales: [],\r\n                        Dict: [],\r\n                        MinMax: null\r\n                    };\r\n                    for (let i = 0; i < series.length; i++){\r\n                        sc.Dict[i] = 0;\r\n                        if (series[i].OwnAxis){\r\n                            index++;\r\n                            if (typeof series[i].OwnAxis[0] !== 'undefined')\r\n                                mm.push(series[i].OwnAxis);\r\n                            else\r\n                                mm.push([series[i].Data[0],series[i].Data[0]]);\r\n                            sc.Dict[i] = index;\r\n                        }\r\n                        for (let j = 0; j < series[i].Data.length; j++){\r\n                            if (isAutoScale){\r\n                                if (series[i].Data[j] < min)\r\n                                    min = series[i].Data[j];\r\n                                if (series[i].Data[j] > max)\r\n                                    max = series[i].Data[j];\r\n                            }\r\n                            if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined'){\r\n                                if (series[i].Data[j] < mm[index][0])\r\n                                    mm[index][0] = series[i].Data[j];\r\n                                if (series[i].Data[j] > mm[index][1])\r\n                                    mm[index][1] = series[i].Data[j];\r\n                            }\r\n                        }\r\n                    }\r\n                    mm[0] = [min, max];\r\n                    sc.MinMax = mm;\r\n                    for (let i = 0; i < mm.length; i++){\r\n                        let order = mm[i][1].toString().length;\r\n                        let step;\r\n                        if (i===0 && !isAutoStep){\r\n                            step = ctx.Options.AxisY.Scale[2];\r\n                        }\r\n                        else{\r\n                            step = mm[i][2]? mm[i][2] : ( (mm[i][1]-mm[i][0] )*40 /height / (Math.pow(10, order-1))/5 ).toFixed(1) * Math.pow(10, order-1)*5;\r\n                        }\r\n                        let s = mm[i][0];\r\n                        let scale = [];\r\n                        if (order < 3 || true){\r\n                            //debugger;\r\n                            while (s <= mm[i][1] + ctx.Options.Series[i].Width/2){\r\n                                scale.push(s);\r\n                                s += step;\r\n                            }\r\n                            scale.push(s);\r\n                            sc.Scales.push(scale);\r\n                        }\r\n                    }\r\n                    return sc;\r\n                }.bind(this)\r\n            };\r\n            /**\r\n             *\r\n             * @returns {string}\r\n             * @constructor\r\n             */\r\n\r\n\r\n            let LastRender = {\r\n                Width: 0,\r\n                Height: 0,\r\n                DataLength: 0,\r\n\r\n            };\r\n\r\n\r\n            this.__GetPathLine = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata, this.Options.Padding);\r\n                Buffer.SeriesPoints[line] = points;\r\n\r\n                const n = points.length;\r\n\r\n                let xs = [];        //x\r\n                let ys = [];        //y\r\n                let dys = [];       //dx\r\n                let dxs = [];       //dy\r\n                let ds = [];        //derivative\r\n                let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n                for(let i = 0; i < n; i++) {\r\n                    xs[i] = points[i][0];\r\n                    ys[i] = points[i][1];\r\n                }\r\n                // Calculate deltas and derivative\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    dys[i] = ys[i + 1] - ys[i];\r\n                    dxs[i] = xs[i + 1] - xs[i];\r\n                    ds[i] = dys[i] / dxs[i];\r\n                }\r\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n                ms[0] = ds[0];\r\n                ms[n - 1] = ds[n - 2];\r\n                for(let i = 1; i < n - 1; i++) {\r\n                    if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                        ms[i] = 0;\r\n                    } else {\r\n                        ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                            (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                            (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                        if(!isFinite(ms[i])) {\r\n                            ms[i] = 0;\r\n                        }\r\n                    }\r\n                }\r\n                let d = `M ${xs[0]},${ys[0]}`;\r\n                let dots = '<g class=\"mt-chart-dots\">';\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                    if (serie.Point.Visible)\r\n                        dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                if (serie.Point.Visible)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[n-1] , ys[n-1], line, n-1, serie.Color, serie.Point.Radius );\r\n                dots += '</g>';\r\n                return `<g class=\"mt-chart-serie\" data-type=\"Line\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${serie.Color}\" stroke-width=\"${serie.Width}\"></path> ${dots}</g>`;\r\n\r\n            }.bind(this);\r\n            this.__GetPathBar = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata, this.Options.Padding);\r\n                Buffer.SeriesPoints[line] = points;\r\n                let height = this.Height;\r\n\r\n                let deilmit = 1;\r\n                if (!this.Options.SeriesOptions.BarStack)\r\n                    deilmit = Buffer.SeriesCount.Bar * 0.8;\r\n                let wd = this.Width/this.Options.Labels.Data.length/2 / deilmit;        //serie.Width;\r\n                let margin = ((wd*1.2) * (Buffer.SeriesBar)) - (  (wd*1.2) *Buffer.SeriesCount.Bar /2 - (wd*1.2)/2) ;\r\n\r\n               // debugger;\r\n\r\n                let bricks = '<g class=\"mt-chart-serie\" data-type=\"Bar\">';\r\n                let GradientId = '';\r\n                if (this.Options.SeriesOptions.BarGradient){\r\n                    GradientId = `lc-gradient-${Lure.Chart.Count}`;\r\n                    bricks += `<linearGradient id=\"${GradientId}\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>`;\r\n                }\r\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n                let dots = '';\r\n                for (let i = 0; i < points.length; i++){\r\n                    let d =`M ${margin+points[i][0]-wd/2} ${height} L ${(margin+points[i][0]+wd/2)} ${height} ${(margin+points[i][0]+wd/2)} ${points[i][1]} ${margin+points[i][0]-wd/2} ${points[i][1]}Z`;\r\n                    // debugger;\r\n                    bricks += `<g class=\"lc-bar-elem\"><path class=\"lc-bar-elem\" data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"${serie.Color}\" stroke=\"#000\" stroke-width=\"0\"></path>`;\r\n                    if (this.Options.SeriesOptions.BarGradient)\r\n                        bricks += `<path class=\"lc-bar-elem-gradient\"  data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"url(#${GradientId})\" ></path>`;\r\n                    bricks += `<path class=\"mt-chart-tooltipable\" data-type=\"bar\" data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"#fff\" fill-opacity=\"0\" stroke=\"#fff\" stroke-width=\"0\"></path>`;\r\n                    bricks +='</g>';\r\n                    //dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                bricks += dots+'</g>';\r\n                Buffer.SeriesBar++;\r\n                return bricks;\r\n            }.bind(this);\r\n            this.__GetSvgCasual = function () {\r\n                let lines = '';\r\n                let bars  = '';\r\n                for (let i = 0; i < this.Options.Series.length; i++){\r\n                    if (!this.Options.Series[i].isVisible)\r\n                        continue;\r\n                    switch (this.Options.Series[i].Type){\r\n                        case 'line':\r\n                            lines += this.__GetPathLine(this.Options.Series[i], i);\r\n                            break;\r\n                        case 'bar':\r\n                            bars += this.__GetPathBar(this.Options.Series[i], i);\r\n                            break;\r\n                    }\r\n                }\r\n                return bars+lines;\r\n            }.bind(this);\r\n            this.__GetSvgPie = function () {\r\n                let sectors = '';\r\n                let d = this.Height< this.Width? this.Height*0.9:this.Width*0.9;\r\n                //r= r/4;\r\n                //let wd = 2*r;\r\n                for (let i = 0; i < this.Options.Series.length; i++){\r\n                    let sum = 0;\r\n                    let anglestart = -45;\r\n                    let r = d/4 * (this.Options.Series.length-i)/(Buffer.SeriesCount.Pie+Buffer.SeriesCount.Ring);\r\n                    let wd = 2*r;\r\n                    if (this.Options.Series[i].Type === 'ring'){\r\n                        wd = this.Options.Series[i].Width;\r\n                        r = r*2 - wd/2;\r\n\r\n                    }\r\n                    for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                        sum += this.Options.Series[i].Data[j];\r\n                    }\r\n                    for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                        let angle = this.Options.Series[i].Data[j]/sum * 360;\r\n                        //debugger;\r\n                        sectors += `<g>`;\r\n                        sectors += `<path d=\"${Lure.Chart.PieArc(this.Width/2, this.Height/2, r, anglestart, anglestart+angle)}\" fill=\"none\" stroke=\"${this.Options.Series[i].Colors[j]}\" stroke-width=\"${wd}\" stroke-opacity=\"1\"></path>`;\r\n                        sectors += `<path class=\"mt-chart-tooltipable\" data-type=\"pie\" data-line=\"${i}\" data-item=\"${j}\" d=\"${Lure.Chart.PieArc(this.Width/2, this.Height/2, r, anglestart, anglestart+angle)}\" fill=\"none\" stroke=\"#fff\" stroke-width=\"${wd}\" stroke-opacity=\"0\"></path>`;\r\n                        sectors += `</g>`;\r\n                        anglestart += angle;\r\n                        //debugger;\r\n                    }\r\n                }\r\n                //debugger;\r\n                return sectors;\r\n            }.bind(this);\r\n\r\n\r\n\r\n\r\n\r\n            function Refresh(){\r\n                Buffer.SeriesBar = 0;\r\n\r\n                //-1. check Tooltip Temptale\r\n                //Init.Tooltip();\r\n               // //pp.Perf('Check-Tooltip');\r\n                //0. build legend\r\n\r\n                Init.Series();\r\n                //pp.Perf('Init-Series');\r\n\r\n                this.Block.Legend = Buffer.Legend;\r\n                //pp.Perf('Render-Legend');\r\n\r\n                //1. Init Y width\r\n\r\n                Init.AxisY();\r\n                //pp.Perf('Init-AxisY');\r\n                //2. Init X height, and build AxisX cuz we have Y width.\r\n                //Buffer.ParametersAxisX = Builder.CalcAxisX();\r\n                Init.AxisX();\r\n                Builder.AxisX();\r\n                //pp.Perf('Init-AxisX');\r\n                //3. Init scales Y axis\r\n\r\n                Init.ScaleY();\r\n                //this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.ParametersAxisX.Height), this);\r\n                //this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.AxisXParams.Height), this);\r\n                //pp.Perf('Init-AxisYScales');\r\n\r\n\r\n                //this.Block.AxisX = Builder.MakeAxisX();\r\n                //this.Block.AxisX.style.height = Buffer.AxisXParams.Height+'px';\r\n\r\n\r\n                this.Block.Grid  = Builder.MakeGrid();\r\n                //pp.Perf('Render-Grid');\r\n\r\n                this.Block.AxisY = Builder.MakeAxisY();\r\n                //pp.Perf('Render-AxisY');\r\n                if (this.Options.Type === 'line' || this.Options.Type === 'bar')\r\n                    this.Block.Svg   = chart.__GetSvgCasual();\r\n                if (this.Options.Type === 'pie' || this.Options.Type === 'ring')\r\n                    this.Block.Svg   = chart.__GetSvgPie();\r\n                this.Block.AxisY.style.height = this.Height+'px';\r\n                //pp.Perf('Render-Svg');\r\n\r\n                let lines = Lure.SelectAll('.mt-chart-serie[data-type=\"Line\"] path', this.Content);\r\n                LastRender.Height = this.Height;\r\n                LastRender.Width = this.Width;\r\n                lines.forEach(function (item) {\r\n                    const dash = item.getTotalLength();\r\n                    item.style.strokeDasharray = dash;\r\n                    item.style.strokeDashoffset = dash;\r\n                });\r\n                //pp.Perf('Animations-add');\r\n                //pp.Elapsed('-elapsed-');\r\n            }\r\n\r\n\r\n            /********************************************************************************/\r\n            /*******/\r\n            /*<tooltips>*/\r\n            Init.Tooltip();\r\n            this.Tooltip = new Lure.Content({\r\n                Name: 'Tooltipchek',\r\n                Target: this.Block.ChartArea,\r\n                Content: `<div class=\"mt-chart-tooltip\">\r\n                        <div class=\"val\">${this.Options.Tooltip.Template}</div>\r\n                      </div>`,\r\n                Visible: false,\r\n                Controller: {\r\n                    Data: {},\r\n                },\r\n                BeforeShow: function (a,b) {\r\n\r\n                },\r\n                Prop: function () {\r\n                    this._Timer = null;\r\n                    this._Timer2 = null;\r\n                },\r\n                Shower: function () {\r\n                    clearTimeout(this._Timer);\r\n                    clearTimeout(this._Timer2);\r\n                    this.Content.style.display = '';\r\n                    this.Content.style.opacity = '1';\r\n                },\r\n                Hider: function () {\r\n                    clearTimeout(this._Timer);\r\n                    this._Timer = setTimeout(\r\n                        function () {\r\n                            this.Content.style.opacity = '0';\r\n                            this._Timer2 = setTimeout(function () {\r\n                                this.Content.style.display = 'none';\r\n                            }.bind(this), 200)\r\n\r\n                        }.bind(this), 800);\r\n                },\r\n                Show: function (options) {\r\n                    clearTimeout(this._Timer);\r\n                    this.Data.Name = options.data[0];\r\n                    this.Data.Value = options.data[1];\r\n                    this.Refresh();\r\n                    this.Content.style.left = (options.pos[0] + 7)+\"px\";\r\n                    this.Content.style.top = (options.pos[1] - this.Content.clientHeight - 7)+\"px\";\r\n                    this.Content.style.backgroundColor = options.color;\r\n                    //this._Timer = setTimeout(this.Hide, 2000);\r\n                },\r\n                Methods: function () {\r\n                    this.Do = function (e) {\r\n                        let tag = e.currentTarget.dataset['type'];\r\n                        switch (tag){\r\n                            case 'line':\r\n                                this.DoCircle(e);\r\n                                break;\r\n                            case 'bar':\r\n                                this.DoBar(e);\r\n                                break;\r\n                            case 'pie':\r\n                                this.DoPie(e);\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n                    }.bind(this);\r\n                    this.DoCircle = function (e) {\r\n                        let circle = e.currentTarget;\r\n                        let i = parseInt(circle.dataset['line']);\r\n                        let j = parseInt(circle.dataset['item']);\r\n                        let color = circle.attributes['stroke'].value;\r\n                        //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\r\n                        let width = parseInt(circle.attributes['stroke-width'].value);\r\n                        circle.attributes['fill'].value = color;\r\n                        circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\r\n                        circle.attributes['stroke'].value = \"#fff\";\r\n\r\n\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [Series[i].Name, Series[i].Data[j]],\r\n                            color: color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n                    this.DoBar = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        bar.setAttribute('fill-opacity', 0.2);\r\n                        let i = parseInt(bar.dataset['line']);\r\n                        let j = parseInt(bar.dataset['item']);\r\n                        // bar.attributes['stroke-width'].value = 2;\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\r\n                            color: chart.Options.Series[i].Color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n                    this.DoPie = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        bar.setAttribute('stroke-opacity', 0.2);\r\n                        let i = parseInt(bar.dataset['line']);\r\n                        let j = parseInt(bar.dataset['item']);\r\n                        // bar.attributes['stroke-width'].value = 2;\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [chart.Options.Series[i].Labels? chart.Options.Series[i].Labels[j]: chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\r\n                            color: chart.Options.Series[i].Colors[j],\r\n                            pos: [e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n\r\n                    this.Undo = function (e) {\r\n                        let tag = e.currentTarget.dataset['type'];\r\n                        switch (tag){\r\n                            case 'line':\r\n                                this.UndoCircle(e);\r\n                                break;\r\n                            case 'bar':\r\n                                this.UndoBar(e);\r\n                                break;\r\n                            case 'pie':\r\n                                this.UndoPie(e);\r\n                                break;\r\n                        }\r\n                    };\r\n                    this.UndoCircle = function (e) {\r\n                        let circle = e.currentTarget;\r\n                        let width = parseInt(circle.attributes['stroke-width'].value);\r\n                        circle.attributes['stroke'].value = circle.attributes['fill'].value;\r\n                        circle.attributes['fill'].value = \"#fff\";\r\n                        circle.attributes['r'].value -= width;\r\n                        this.Hide();\r\n                    };\r\n                    this.UndoBar = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        bar.setAttribute('fill-opacity', 0);\r\n                        this.Hide();\r\n                    };\r\n                    this.UndoPie = function (e) {\r\n                        let pie = e.currentTarget;\r\n                        pie.setAttribute('stroke-opacity', 0);\r\n                        this.Hide();\r\n                    }\r\n\r\n                },\r\n                AfterBuild: function () {\r\n\r\n                }\r\n            });\r\n            Lure.AddEventListenerGlobal('mouseover', '.mt-chart-point, .mt-chart-tooltipable', function (e) {\r\n                this.Tooltip.Do(e);\r\n            }, this.Content, this);\r\n            Lure.AddEventListenerGlobal('mouseout', '.mt-chart-point, .mt-chart-tooltipable' , function (e) {\r\n                chart.Tooltip.Undo(e);           }, this.Content);\r\n            /*</tooltips>*/\r\n\r\n            this.TestB = function () {\r\n                let per = performance.now();\r\n               // Builder();\r\n                Lure.Perf(per, 'builder');\r\n            };\r\n            /*\r\n            this._TimerRefresh = null;\r\n            this._IntervalResponse = setInterval(function () {\r\n                if (this.Width !== LastRender.Width || this.Height !== LastRender.Height){\r\n                    clearTimeout(this._TimerRefresh);\r\n                    console.log('[changed]');\r\n                    LastRender.Height = this.Height;\r\n                    LastRender.Width = this.Width;\r\n                    this._TimerRefresh = setTimeout(function () {\r\n                        console.log('[redraw]');\r\n                        Refresh.call(this);\r\n\r\n\r\n                    }.bind(this) ,200);\r\n                }\r\n            }.bind(this), 200);\r\n            */\r\n            this.Buffer = Buffer;\r\n\r\n            // Init\r\n\r\n\r\n            this.Width;   //just init\r\n            //this.Heigth;   //just init\r\n            //pp.Perf('Constructor');\r\n            Refresh.call(this);\r\n            //Refresh.call(this);\r\n            //**  API  **//\r\n\r\n            this.Refresh = function () {\r\n                Refresh.call(this);\r\n            }.bind(this);\r\n        }\r\n        get Height(){\r\n            return this.Block.Svg.clientHeight;\r\n        }\r\n        get Width(){\r\n            return this.Block.Svg.clientWidth - this.Options.Padding;\r\n        }\r\n        /*statics*/\r\n        static GetSeriePointOptions(serie, isGraph){\r\n            let p = serie.Point ? serie.Point : {};\r\n            p.Visible = (typeof p.Visible === 'undefined' || p.Visible);\r\n            p.Radius = p.Radius? p.Radius : (4+serie.Width/4);\r\n            if (Number.isNaN(p.Radius))\r\n                debugger;\r\n            return p;\r\n        }\r\n        static GetScaleY(series, height, ctx){\r\n            if (ctx.Type === 'pie'){\r\n                return [];\r\n            }\r\n            let min = series[0].Data[0];\r\n            let max = series[0].Data[0];\r\n            let isAutoScale = true;\r\n            let isAutoStep = true;\r\n            if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto')\r\n            {\r\n                isAutoScale = false;\r\n                min = ctx.Options.AxisY.Scale[0];\r\n                max = ctx.Options.AxisY.Scale[1];\r\n            }\r\n            if (ctx.Options.AxisY.Scale[2] !== 'auto')\r\n                isAutoStep = false;\r\n            let mm = [ [series[0].Data[0],series[0].Data[0]] ];\r\n            let index = 0;\r\n            let scales = [];\r\n\r\n            let sc = {\r\n                Scales: [],\r\n                Dict: [],\r\n                MinMax: null\r\n            };\r\n            for (let i = 0; i < series.length; i++){\r\n                sc.Dict[i] = 0;\r\n                if (series[i].OwnAxis){\r\n                    index++;\r\n                    if (typeof series[i].OwnAxis[0] !== 'undefined')\r\n                        mm.push(series[i].OwnAxis);\r\n                    else\r\n                        mm.push([series[i].Data[0],series[i].Data[0]]);\r\n                    sc.Dict[i] = index;\r\n                }\r\n                for (let j = 0; j < series[i].Data.length; j++){\r\n                    if (isAutoScale){\r\n                        if (series[i].Data[j] < min)\r\n                            min = series[i].Data[j];\r\n                        if (series[i].Data[j] > max)\r\n                            max = series[i].Data[j];\r\n                    }\r\n                    if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined'){\r\n                        if (series[i].Data[j] < mm[index][0])\r\n                            mm[index][0] = series[i].Data[j];\r\n                        if (series[i].Data[j] > mm[index][1])\r\n                            mm[index][1] = series[i].Data[j];\r\n                    }\r\n                }\r\n            }\r\n            mm[0] = [min, max];\r\n            sc.MinMax = mm;\r\n            for (let i = 0; i < mm.length; i++){\r\n                let order = mm[i][1].toString().length;\r\n                let step;\r\n                if (i===0 && !isAutoStep){\r\n                    step = ctx.Options.AxisY.Scale[2];\r\n                }\r\n                else{\r\n                    step = mm[i][2]? mm[i][2] : ( (mm[i][1]-mm[i][0] )*40 /height / (Math.pow(10, order-1))/5 ).toFixed(1) * Math.pow(10, order-1)*5;\r\n                }\r\n                let s = mm[i][0];\r\n                let scale = [];\r\n                if (order < 3 || true){\r\n                    //debugger;\r\n                    while (s <= mm[i][1] + ctx.Options.Series[i].Width/2){\r\n                        scale.push(s);\r\n                        s += step;\r\n                    }\r\n                    scale.push(s);\r\n                    sc.Scales.push(scale);\r\n                }\r\n            }\r\n            return sc;\r\n        }\r\n\r\n        static GetAbscissa(labels, width){\r\n            const stepX = width / (labels.length);\r\n            return labels.map(function(a,i){return i*stepX});\r\n        }\r\n        static GetOrdinata(serie, scale, mm, height){\r\n            let min = mm[0];\r\n            let max = mm[1];\r\n            const scaleCoefficient = scale[scale.length-1] / max;\r\n            let ordinata = [];\r\n            for (let j= 0; j < serie.length; j++){\r\n                ordinata.push( height - (  (serie[j] - min) * height/(max-min)/scaleCoefficient )  );\r\n            }\r\n            //console.log('Y', Y);\r\n            //console.log('ordinate', ordinate);\r\n            //console.log(`min=${min} max=${max}`, height);\r\n            //ordinata.push(ordinate);\r\n            //console.log('ordinata', ordinata);\r\n            return ordinata;\r\n\r\n\r\n\r\n        }\r\n        static GetPoints(X,Y, padding = 0){\r\n            let points = [];\r\n            //let length = X.length >= Y.length ? X.length:Y.length;\r\n            for (let i = 0; i < Y.length; i++){\r\n                points.push([X[i] + padding, Y[i]]);\r\n            }\r\n            return points;\r\n        }\r\n        static aGetPath(points, type, line, color, width){\r\n            switch (type){\r\n                case 'line':\r\n                    return Lure.Chart.GetPathLine(points, line, color, width);\r\n                case 'bar':\r\n                    return Lure.Chart.GetPathBar(points, line, color, width);\r\n                case 'pie':\r\n                    return '';\r\n            }\r\n        }\r\n        static aGetPathLine(points, line, color, width, isDots=true){\r\n            const n = points.length;\r\n\r\n            let xs = [];        //x\r\n            let ys = [];        //y\r\n            let dys = [];       //dx\r\n            let dxs = [];       //dy\r\n            let ds = [];        //derivative\r\n            let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n            for(let i = 0; i < n; i++) {\r\n                xs[i] = points[i][0];\r\n                ys[i] = points[i][1];\r\n            }\r\n            // Calculate deltas and derivative\r\n            for(let i = 0; i < n - 1; i++) {\r\n                dys[i] = ys[i + 1] - ys[i];\r\n                dxs[i] = xs[i + 1] - xs[i];\r\n                ds[i] = dys[i] / dxs[i];\r\n            }\r\n            // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n            // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n            ms[0] = ds[0];\r\n            ms[n - 1] = ds[n - 2];\r\n            for(let i = 1; i < n - 1; i++) {\r\n                if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                    ms[i] = 0;\r\n                } else {\r\n                    ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                        (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                        (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                    if(!isFinite(ms[i])) {\r\n                        ms[i] = 0;\r\n                    }\r\n                }\r\n            }\r\n            let d = `M ${xs[0]},${ys[0]}`;\r\n            let dots = '<g class=\"mt-chart-dots\">';\r\n            for(let i = 0; i < n - 1; i++) {\r\n                //console.log(d);\r\n                d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                if (isDots)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, color, width );\r\n            }\r\n            dots += '</g>';\r\n            //return d;\r\n            //console.log(d);\r\n            return `<g class=\"mt-chart-serie\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${color}\" stroke-width=\"${width}\"></path> ${dots}</g>`;\r\n        }\r\n        static GetPathLineDot(x,y, i,j, color, width){\r\n            return `<circle class=\"mt-chart-point\" data-type=\"line\" data-line=\"${i}\" data-item=\"${j}\" cx=\"${x}\" cy=\"${y}\" r=\"${width}\" stroke=\"${color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n\r\n        }\r\n        static aGetPathBar(points, line, color, width){\r\n            const wd = 30;\r\n            console.log('GetPathBar', points);\r\n            // return '';\r\n            let p = `<path data-line=\"${line}\" d=${0} fill=\"${color}\" stroke=\"${color}\" stroke-width=\"${width}\"></path>`;\r\n            // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n            let dots = '';\r\n            for (let i = 0; i < points.length; i++){\r\n                let d =`M ${points[i][0]} ${points[i][1]} L ${points[i][0]} ${points[i][1]}`;\r\n                //dots += Lure.Chart.GetPatwehLineDot(points[i][0] , points[i][1], line, i, color, width );\r\n            }\r\n            // debugger;\r\n            return do2ts;\r\n        }\r\n\r\n\r\n\r\n        static PolarToCartesius(centerX, centerY, radius, angleInDegrees) {\r\n            let angleInRadians = (angleInDegrees-0) * Math.PI / 180;\r\n\r\n            return {\r\n                x: centerX + (radius * Math.cos(angleInRadians)),\r\n                y: centerY + (radius * Math.sin(angleInRadians))\r\n            };\r\n        }\r\n        static PieArc(x, y, radius, startAngle, endAngle){\r\n            //debugger;\r\n            let start = Lure.Chart.PolarToCartesius(x, y, radius, endAngle);\r\n            let end = Lure.Chart.PolarToCartesius(x, y, radius, startAngle);\r\n\r\n            let largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n            let d = [\r\n                \"M\", start.x, start.y,\r\n                \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\r\n            ].join(\" \");\r\n\r\n            return d;\r\n        }\r\n        static CheckOwnAxis(ep){\r\n            if (!ep.OwnAxis)\r\n                return false;\r\n            if (Array.isArray(ep.OwnAxis)){\r\n                let min = false;\r\n                let max = false;\r\n                if (ep.OwnAxis[0] !== 'auto' || typeof ep.OwnAxis[0] !== 'undefined')\r\n                    min = ep.Data[0];\r\n                if (ep.OwnAxis[1] !== 'auto' || typeof ep.OwnAxis[1] !== 'undefined')\r\n                    max = ep.Data[1];\r\n                if (!min && !max)\r\n                    return ep.OwnAxis;\r\n\r\n                for (let i =0; i< ep.Data.length; i++){\r\n                    if (ep.Data[i] < min)\r\n                        min = ep.Data[i];\r\n                    if (ep.Data[i] > max)\r\n                        max = ep.Data[i];\r\n                }\r\n            }\r\n        }\r\n        /*builder*/\r\n        static MakeLegend(Serie, i){\r\n            let id = `lc-legeng_ch${Lure.Chart.Count}`;\r\n            return `<div class=\"mt-chart-legend__item row\">\r\n                          <input class=\"mt-legend-checkbox\" type=\"checkbox\" ${Serie.isVisible? 'checked=\"cheched\"':''} id=\"${id}\">\r\n                          <div class=\"mt-legend-icon\" style=\"background-color: ${Serie.Color}\"></div>\r\n                          <label class=\"mt-legend-label\" for=\"${id}\">${Serie.Name}</label>\r\n                        </div>`;\r\n        }\r\n        static GetGrid(sizeX, sizeY, padding=0){\r\n            let grid = ``;\r\n            for (let i = 0; i < sizeY; i++){\r\n                grid += `<div class=\"mt-chart__grid-line row flex-100 flex-between\" >`;\r\n                for (let j = 0; j < sizeX; j++) {\r\n                    if (j === 0)\r\n                        grid += `<div class='mt-chart__grid-item flex-100' style=\"width: ${padding}px; max-width: ${padding}px\"></div>`;\r\n                    grid += `<div class='mt-chart__grid-item flex-100'></div>`;\r\n                }\r\n                grid += `</div>`;\r\n            }\r\n            grid += ``;\r\n            return grid;\r\n        }\r\n    }\r\n};\r\n\r\nLure.Chart = Lure.Plugin.Chart.Chart;\r\nLure.Chart.Count = 0;\r\n\r\n\r\nLure._GenerateString = function (prefix='') {\r\n    let gen = prefix+(Math.random().toString(36)+Math.random().toString(36)+Math.random().toString(36)).replace(\"0.\", '').replace(/[\\d]+/, '').substring(0,1);\r\n    if (Lure.Select(`#${gen}`)){\r\n        gen = Lure._GenerateString(prefix);\r\n    }\r\n    return gen;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}