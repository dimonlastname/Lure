{"version":3,"sources":["lure.chart.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Lure","Plugin","Chart","Version","Core","Defaults","Color","TemplateLabel","Line","Pie","LureChart","Refresh","console","log","Buffer","SeriesBar","SeriesCount","Bar","Ring","Svg","pp","Reset","Init","Series","Perf","Builder","Legend","AxisY","AxisX","ScaleY","this","Block","Grid","MakeGrid","MakeAxisY","isCasual","chart","__GetSvgCasual","__GetSvgPie","style","height","Height","lines","SelectAll","Content","LastRender","Width","forEach","item","dash","getTotalLength","strokeDasharray","strokeDashoffset","Elapsed","Target","arguments","undefined","_ref","_ref$Type","Type","_ref$Title","Title","_ref$Labels","Labels","Rotation","Data","_ref$Grid","_ref$Series","_ref$Tooltip","Tooltip","Template","_ref$AxisY","Scale","Visible","_ref$Disabled","SeriesOptions","Disabled","Diagnostics","Count","Select","Abscissa","SeriesPoints","ParametersAxisX","_Series","Options","toLowerCase","Font","Family","Size","BarStack","BarGradient","PieStack","PieType","isNumeric","Padding","innerHTML","_Legend","querySelector","_AxisX","_AxisY","_ChartArea","_Grid","_Svg","v","ChartArea","bind","LegendBuilder","MakeLegend","MakeLegendPie","labels","AxisXParams","MarginLeft","Angle","MarginTop","a","borderTop","_ScaleY","Scales","AxisYStyle","accum","index","Dict","indexOf","scale","caption","j","MakeAxisX","b","GetGrid","MakeGraph","serie","mm","MinMax","DataOrdinata","GetOrdinata","DataAbscissa","GetAbscissa","points","GetPoints","GetPath","ChartActions","Activate","ChartElement","tag","dataset","ActivateCircle","ActivateBar","ActivatePie","Disactivate","DisactivateCircle","DisactivateBar","DisactivatePie","circle","color","parseInt","attributes","value","width","bar","setAttribute","pie","force","Se","ep","Name","JSON","parse","stringify","Colors","isVisible","OwnAxis","Point","GetSeriePointOptions","capitalize","push","len","w","GetTextWidth","lenmax","wCapti","Array","isArray","AxisYWidth","maxWidth","clientWidth","paddingLeft","h","wFact","angle","parseFloat","cos","Math","acos","PI","toFixed","round","sqrt","pow","getComputedStyle","lineHeight","GetScaleY","Listeners","AddEventListenerGlobal","e","currentTarget","line","getAttribute","SerieSwitch","Do","Undo","DataLength","__GetPathLine","n","xs","ys","dys","dxs","ds","ms","isFinite","d","dots","GetPathLineDot","Radius","__GetPathBar","deilmit","wd","margin","bricks","GradientId","bars","sectors","sum","anglestart","r","PieArc","Controller","BeforeShow","Prop","_Timer","_Timer2","isInit","Shower","clearTimeout","display","opacity","Hider","setTimeout","Show","options","data","Value","left","pos","top","clientHeight","backgroundColor","transition","Methods","DoCircle","DoBar","DoPie","o","offsetX","offsetY","UndoCircle","UndoBar","UndoPie","Hide","AfterBuild","call","ch","checked","filter","x","Redraw","get","isGraph","p","Number","isNaN","series","ctx","min","max","isAutoScale","isAutoStep","sc","magicConst","order","GetNumberOrder","step","divider","RoundBy","s","abs","stepX","map","scaleCoefficient","ordinata","X","Y","padding","y","centerX","centerY","radius","angleInDegrees","angleInRadians","sin","startAngle","endAngle","start","PolarToCartesius","end","largeArcFlag","join","Serie","id","acc","sizeX","sizeY","grid","_GenerateStrin2g","prefix","gen","random","toString","replace","substring","_GenerateString"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAFhiBkB,MAAKC,OAAOC,OACRC,QAAS,uBACTC,MACIC,UACIC,OAAQ,MAAO,QAAS,iBAAkB,SAAU,gBAAiB,SAAU,SAAU,YACzFC,eACIC,KAAM,qCACNC,IAAK,wCAIjBP,MAAAA,WACI,QAAAQ,KA8wBI,QAASC,KACLC,QAAQC,IAAI,uBACZC,EAAOC,UAAY,EACnBD,EAAOE,YAAYR,KAAO,EAC1BM,EAAOE,YAAYC,IAAM,EACzBH,EAAOE,YAAYP,IAAM,EACzBK,EAAOE,YAAYE,KAAO,EAC1BJ,EAAOK,IAAM,GACbC,EAAGC,QAMHC,EAAKC,SACLH,EAAGI,KAAK,eAERC,EAAQC,SACRN,EAAGI,KAAK,iBAIRF,EAAKK,QACLP,EAAGI,KAAK,cAGRF,EAAKM,QACLH,EAAQG,QACRR,EAAGI,KAAK,cAGRF,EAAKO,SAGLT,EAAGI,KAAK,oBAORM,KAAKC,MAAMC,KAAQP,EAAQQ,WAC3Bb,EAAGI,KAAK,eAERM,KAAKC,MAAMJ,MAAQF,EAAQS,YAC3Bd,EAAGI,KAAK,gBACJM,KAAKK,SAELL,KAAKC,MAAMZ,IAAQiB,EAAMC,iBAGzBP,KAAKC,MAAMZ,IAAQiB,EAAME,cAC7BR,KAAKC,MAAMJ,MAAMY,MAAMC,OAASV,KAAKW,OAAO,KAC5CrB,EAAGI,KAAK,aAER,IAAIkB,GAAQ1C,KAAK2C,UAAU,wCAAyCb,KAAKc,QACzEC,GAAWJ,OAASX,KAAKW,OACzBI,EAAWC,MAAQhB,KAAKgB,MACxBJ,EAAMK,QAAQ,SAAUC,GACpB,GAAMC,GAAOD,EAAKE,gBAClBF,GAAKT,MAAMY,gBAAkBF,EAC7BD,EAAKT,MAAMa,iBAAmBH,IAElC7B,EAAGI,KAAK,kBACRJ,EAAGiC,QAAQ,aAxzBlB,GArBGC,GAqBHC,UAAAlE,OAAA,GAAAmE,SAAAD,UAAA,GAAAA,UAAA,GArBY,KAqBZE,EAAAF,UAAAlE,OAAA,GAAAmE,SAAAD,UAAA,GAAAA,UAAA,MAAAG,EAAAD,EAnBOE,KAAAA,EAmBPH,SAAAE,EAnBc,OAmBdA,EAAAE,EAAAH,EAlBOI,MAAAA,EAkBPL,SAAAI,EAlBe,GAkBfA,EAAAE,EAAAL,EAjBOM,OAAAA,EAiBPP,SAAAM,GAhBWE,SAAU,OACVC,SAeXH,EAAAI,EAAAT,EAbOzB,KAAAA,EAaPwB,SAAAU,KAAAA,EAAAC,EAAAV,EAZOlC,OAAAA,EAYPiC,SAAAW,KAAAA,EAAAC,EAAAX,EAXOY,QAAAA,EAWPb,SAAAY,GAVWE,SAAU,MAUrBF,EAAAG,EAAAd,EARO9B,MAAAA,EAQP6B,SAAAe,GAPWC,OAAQ,OAAQ,OAAQ,QACxBC,SAAS,GAMpBF,EAAAG,GAAAjB,EAJOhB,OAIPgB,EAHOkB,cAGPlB,EAFOmB,UAAAA,EAEPpB,SAAAkB,GAAAA,CACG,IADH9F,gBAAAkD,KAAApB,IACOkE,EAAJ,CAEA,GAAIxD,GAAK,GAAIpB,MAAK6E,YAAYrD,IAC9BxB,MAAKE,MAAM4E,OAEX,IAAI1C,GAAQN,IACZA,MAAKc,QAAU5C,KAAK+E,OAAOzB,GAI3BxB,KAAKK,UAAW,CAGhB,IACIrB,IACAY,OAAQ,GAERE,MAAO,GACPD,MAAO,GACPK,KAAM,GACNb,IAAK,GAELsB,OAAQ,EACRK,MAAO,EACPkC,SAAU,KACVC,gBAEAjE,aACIR,KAAM,EACNS,IAAK,EACLR,IAAK,EACLS,KAAM,GAEVH,UAAW,EAEXmE,gBAAiB,KAErBpD,MAAKqD,QAAU5D,EAEfO,KAAKsD,SACDzB,KAAMA,EAAMA,EAAK0B,cAAe,OAChCxB,MAAOA,EAAOA,EAAO,GACrBnC,QACI+C,SAAS,GAEbV,QACIU,QAAoC,mBAAnBV,GAAOU,SAA2BV,EAAOU,QAC1DT,SAAUD,EAAOC,SAAUD,EAAOC,SAAU,OAC5CC,KAAMF,EAAOE,KAAMF,EAAOE,QAC1BqB,MACIC,OAAQ,aACRC,KAAM,WAGdxD,MACIyC,QAAkC,mBAAjBzC,GAAKyC,SAA2BzC,EAAKyC,SAE1DlD,OAAQ,KACRoD,eACIc,UAAU,EACVC,aAAa,EAEbC,UAAU,EACVC,QAAS,OAEbjE,OACI2D,MACIC,OAAQ,aACRC,KAAM,UAEVhB,MAAO7C,EAAM6C,OAASxE,KAAK6F,UAAUlE,EAAM6C,MAAM,IAAK7C,EAAM6C,MAAM,GAAG,OAAQxE,KAAK6F,UAAUlE,EAAM6C,MAAM,IAAK7C,EAAM6C,MAAM,GAAG,OAAQxE,KAAK6F,UAAUlE,EAAM6C,MAAM,IAAK7C,EAAM6C,MAAM,GAAG,SAAU,OAAQ,OAAQ,QAC7MC,QAAmC,mBAAlB9C,GAAM8C,SAA2B9C,EAAM8C,QACxDZ,MAAOlC,EAAMkC,OAGjBiC,QAAS,EACTzB,SACIC,SAAU,OAGlBxC,KAAKC,MAAS,WACVD,KAAKc,QAAQmD,UAAb,4IAEiDlC,EAFjD,u7BAgBA,IAAMmC,GAAclE,KAAKc,QAAQqD,cAAc,aACzCC,EAAcpE,KAAKc,QAAQqD,cAAc,aACzCE,EAAcrE,KAAKc,QAAQqD,cAAc,aACzCG,EAActE,KAAKc,QAAQqD,cAAc,iBACzCI,EAAcvE,KAAKc,QAAQqD,cAAc,WACzCK,EAAcxE,KAAKc,QAAQqD,cAAc,eAC/C,QACIvE,GAAIA,UACA,MAAOsE,IAEXtE,GAAIA,QAAO6E,GACPP,EAAQD,UAAYQ,GAExB3E,GAAIA,SACA,MAAOsE,IAEXtE,GAAIA,OAAM2E,GACNL,EAAOH,UAAYQ,GAEvB5E,GAAIA,SACA,MAAOwE,IAEXxE,GAAIA,OAAM4E,GACNJ,EAAOJ,UAAYQ,GAEvBC,GAAIA,aACA,MAAOJ,IAEXI,GAAIA,WAAUD,GACVH,EAAWL,UAAYQ,GAE3BvE,GAAIA,QACA,MAAOqE,IAEXrE,GAAIA,MAAKuE,GACLF,EAAMN,UAAYQ,GAEtBpF,GAAIA,OACA,MAAOmF,IAEXnF,GAAIA,KAAIoF,GACJD,EAAKP,UAAYQ,KAG3BE,KAAK3E,OAEP,IAAML,IACFC,OAAQ,WACJ,GAAsB,KAAlBZ,EAAOY,OAAX,CAGA,GAAIgF,GAAgB1G,KAAKE,MAAMyG,UAC1B7E,MAAKK,WACNuE,EAAgB1G,KAAKE,MAAM0G,cAE/B,KAAK,GAAIxH,GAAI,EAAGA,EAAG0C,KAAKsD,QAAQ7D,OAAOlC,OAAQD,IAC3C0B,EAAOY,QAAUgF,EAAc5E,KAAKsD,QAAQ7D,OAAOnC,GAAIA,EAC3D0C,MAAKC,MAAML,OAASZ,EAAOY,SAC7B+E,KAAK3E,MACPF,MAAO,WACH,IAAKQ,EAAMgD,QAAQrB,OAAOU,QAGtB,YADA3C,KAAKC,MAAMH,MAAQ,GAOvB,KAAK,GAJDiF,GAASzE,EAAMgD,QAAQrB,OAAOE,KAE5B1B,EAAAA,wBAAgCzB,EAAOgG,YAAYC,WAAnD,cAA2EjG,EAAOgG,YAAYE,MAA9F,qBAAwHlG,EAAOgG,YAAYG,UAA3I,eAAmKnG,EAAOgG,YAAYhE,MAAtL,MACFoE,EAAI,GACC9H,EAAI,EAAIA,EAAIyH,EAAOxH,OAAQD,IAChC8H,GAAAA,uDAA4D9E,EAAMgD,QAAQrB,OAAOuB,KAAKC,OAAtF,gBAA4GnD,EAAMgD,QAAQrB,OAAOuB,KAAKE,KAAtI,kBAA4JjD,EAA5J,KAAsKsE,EAAOzH,GAA7K,eAGJ0B,GAAOc,MAAQsF,EACfpF,KAAKC,MAAMH,MAAQsF,EACnBpF,KAAKC,MAAMH,MAAMW,MAAM4E,UAAY,kBACrCV,KAAK3E,MACPH,MAAO,WAEH,OADCG,KAAKsD,QAAQrB,OAAOU,QACd,IAETgC,KAAK3E,MAIPI,UAvCY,WAwCR,GAAI9C,GAAI,CACR,KAAKgD,EAAMgD,QAAQzD,MAAM8C,UACrBrF,EAAI,GACCgD,EAAMgF,QAAQC,QAAUjF,EAAMgF,QAAQC,OAAOhI,OAAS,GACvD,MAAO,EAEf,IAAIiI,GAAAA,gBAA6BlF,EAAMgD,QAAQrB,OAAOuB,KAAKC,OAAvD,gBAA6EnD,EAAMgD,QAAQrB,OAAOuB,KAAKE,KAAvG,IACA+B,EAAQ,EACZ,KAAKnI,EAAGA,EAAIgD,EAAMgF,QAAQC,OAAOhI,OAAQD,IAAI,CACzC,GAAIoI,GAAQpF,EAAMgF,QAAQK,KAAKC,QAAQtI,GACnCuI,EAAQvF,EAAMgF,QAAQC,OAAOjI,GAC7BwI,EAAU,EAEVxI,GAAE,EACFwI,EAAAA,6EAAuFxF,EAAMgD,QAAQ7D,OAAOiG,GAAO3D,MAAnH,eACW,IAANzE,GAAWgD,EAAMgD,QAAQzD,MAAMkC,QACpC+D,EAAAA,gGAA0GxF,EAAMgD,QAAQzD,MAAMkC,MAA9H,eAEJ,KAAK,GADDqD,GAAI,GACCW,EAAI,EAAGA,EAAGF,EAAMtI,OAAQwI,IAC7BX,GAAAA,yCAA8CS,EAAME,GAApD,eAEAzI,GAAE,IACFkI,GAAAA,WAAyBlF,EAAMgD,QAAQ7D,OAAOiG,GAAOlH,MAArD,wBACJiH,GAAAA,0CAAmDD,EAAnD,gBAA6ElI,EAA7E,KAAmFwI,EAAnF,6BAAuHV,EAAvH,eAGJ,MAAOK,IAEXO,UApEY,WAqER,IAAK1F,EAAMgD,QAAQrB,OAAOU,QACtB,MAAO,EAMX,KAAK,GALDoC,GAASzE,EAAMgD,QAAQrB,OAAOE,KAG5B1B,EAAAA,wBAAgCzB,EAAOgG,YAAYC,WAAnD,cAA2EjG,EAAOgG,YAAYE,MAA9F,qBAAwHlG,EAAOgG,YAAYG,UAA3I,eAAmKnG,EAAOgG,YAAYhE,MAAtL,MACFoE,EAAI,GACC9H,EAAI,EAAIA,EAAIyH,EAAOxH,OAAQD,IAChC8H,GAAAA,uDAA4D9E,EAAMgD,QAAQrB,OAAOuB,KAAKC,OAAtF,gBAA4GnD,EAAMgD,QAAQrB,OAAOuB,KAAKE,KAAtI,kBAA4JjD,EAA5J,KAAsKsE,EAAOzH,GAA7K,eAGJ,OAAO8H,IAEXjF,SAlFY,SAkFHiF,EAAEa,GACP,MAAK3F,GAAMgD,QAAQpD,KAAKyC,QAEjBzE,KAAKE,MAAM8H,QAAQ5F,EAAMgD,QAAQrB,OAAOE,KAAK5E,OAAQ+C,EAAMgF,QAAQC,OAAO,GAAGhI,OAAO,EAAG+C,EAAMgD,QAAQU,SADjG,IAGfmC,UAvFY,SAuFFC,EAAO9I,GACb,GAAIoI,GAAQpF,EAAMgF,QAAQK,KAAKrI,GAC3BuI,EAAQvF,EAAMgF,QAAQC,OAAOG,GAC7BW,EAAK/F,EAAMgF,QAAQgB,OAAOZ,GAC1Ba,EAAerI,KAAKE,MAAMoI,YAAYJ,EAAMjE,KAAM0D,EAAOQ,EAAI/F,EAAMK,QACnE8F,EAAevI,KAAKE,MAAMsI,YAAYpG,EAAMgD,QAAQrB,OAAOE,KAAM7B,EAAMU,OACvE2F,EAASzI,KAAKE,MAAMwI,UAAUH,EAAcF,EAChD,OAAOrI,MAAKE,MAAMyI,QAAQF,EAAQrG,EAAMgD,QAAQ7D,OAAOnC,GAAGuE,KAAMvE,EAAGgD,EAAMgD,QAAQ7D,OAAOnC,GAAGkB,MAAO8B,EAAMgD,QAAQ7D,OAAOnC,GAAG0D,SAI5H8F,GACFC,SAAU,SAAUC,GAChB,GAAMC,GAAMD,EAAaE,QAAb,IACZ,QAAQD,GACJ,IAAK,OACDH,EAAaK,eAAeH,EAC5B,MACJ,KAAK,MACDF,EAAaM,YAAYJ,EACzB,MACJ,KAAK,MACDF,EAAaO,YAAYL,KAKrCM,YAAa,SAAUN,GACnB,GAAMC,GAAMD,EAAaE,QAAb,IACZ,QAAQD,GACJ,IAAK,OACDH,EAAaS,kBAAkBP,EAC/B,MACJ,KAAK,MACDF,EAAaU,eAAeR,EAC5B,MACJ,KAAK,MACDF,EAAaW,eAAeT,KAIxCG,eAAgB,SAAUO,GACtB,GAEIC,IAFIC,SAASF,EAAOR,QAAP,MACTU,SAASF,EAAOR,QAAP,MACLQ,EAAOG,WAAP,OAA4BC,OAGpCC,EAAQH,SAASF,EAAOG,WAAW,gBAAgBC,MACvDJ,GAAOG,WAAP,KAA0BC,MAAQH,EAClCD,EAAOG,WAAP,EAAuBC,MAAQF,SAASF,EAAOG,WAAP,EAAuBC,OAASC,EACxEL,EAAOG,WAAP,OAA4BC,MAAQ,QAExCV,YAAa,SAAUY,GACnBA,EAAIC,aAAa,eAAgB,GACzBL,UAASI,EAAId,QAAJ,MACTU,SAASI,EAAId,QAAJ,OAErBG,YAAa,SAAUa,GACnBA,EAAID,aAAa,iBAAkB,GAC3BL,UAASM,EAAIhB,QAAJ,MACTU,SAASM,EAAIhB,QAAJ,OAErBK,kBAAmB,SAAUG,GACzB,GAAIK,GAAQH,SAASF,EAAOG,WAAW,gBAAgBC,OACjDH,EAAQD,EAAOG,WAAP,KAA0BC,KAC1B,UAAVH,IAEJD,EAAOG,WAAP,OAA4BC,MAAQH,EACpCD,EAAOG,WAAP,KAA0BC,MAAQ,OAClCJ,EAAOG,WAAP,EAAuBC,OAASC,IAEpCP,eAAgB,SAAUQ,GACtBA,EAAIC,aAAa,eAAgB,IAErCR,eAAgB,SAAUS,GACtBA,EAAID,aAAa,iBAAkB,KAGrCzI,GAEF+C,QAAS,WACL,MAAIA,GAAQC,cAERxC,KAAKsD,QAAQf,QAAQC,SAAWD,EAAQC,UAGlB,SAAtBxC,KAAKsD,QAAQzB,MAAyC,QAAtB7B,KAAKsD,QAAQzB,UAC7C7B,KAAKsD,QAAQf,QAAQC,SAAWtE,KAAKC,OAAOC,MAAME,KAAKC,SAASE,cAAcC,WAGxD,QAAtBsB,KAAKsD,QAAQzB,MAAwC,SAAtB7B,KAAKsD,QAAQzB,OAC5C7B,KAAKsD,QAAQf,QAAQC,SAAWtE,KAAKC,OAAOC,MAAME,KAAKC,SAASE,cAAcE,OAGpFgG,KAAK3E,MACPP,OAAQ,WAAqB,GAAZ0I,GAAY1G,UAAAlE,OAAA,GAAAmE,SAAAD,UAAA,IAAAA,UAAA,GACrB2G,IACJ,IAA4B,OAAxBpI,KAAKsD,QAAQ7D,QAAoB0I,EAArC,CAOA,IAAK,GAAI7K,GAAI,EAAGA,EAAI0C,KAAKqD,QAAQ9F,OAAQD,IAAI,CACzC,GAAI+K,KACJA,GAAGC,KAAUtI,KAAKqD,QAAQ/F,GAAGgL,KAAOtI,KAAKqD,QAAQ/F,GAAGgL,KAAsB,UAC1ED,EAAGtG,MAAU/B,KAAKqD,QAAQ/F,GAAGyE,MAAO/B,KAAKqD,QAAQ/F,GAAGyE,MAAsBsG,EAAGC,KAC7ED,EAAG7J,MAAUwB,KAAKqD,QAAQ/F,GAAGkB,MAAOwB,KAAKqD,QAAQ/F,GAAGkB,MAAON,KAAKC,OAAOC,MAAME,KAAKC,SAASC,MAAMlB,GAAGY,KAAKC,OAAOC,MAAME,KAAKC,SAASC,MAAMlB,GAAG,OAC7I+K,EAAGrH,MAAUhB,KAAKqD,QAAQ/F,GAAG0D,MAAOhB,KAAKqD,QAAQ/F,GAAG0D,MAAsB,EAE1EqH,EAAGlG,KAAUoG,KAAKC,MAAMD,KAAKE,UAAUzI,KAAKqD,QAAQ/F,GAAG6E,OAEvDkG,EAAGxG,KAAU7B,KAAKqD,QAAQ/F,GAAGuE,KAAO7B,KAAKqD,QAAQ/F,GAAGuE,KAAK0B,cAAkB1B,EAAKA,EAAK0B,cAAc,OAEnF,QAAZ8E,EAAGxG,MAA8B,SAAZwG,EAAGxG,OACpB7B,KAAKK,WACLL,KAAKK,UAAW,GACpBgI,EAAGK,OAAS1I,KAAKqD,QAAQ/F,GAAGoL,OAAQ1I,KAAKqD,QAAQ/F,GAAGoL,OAAQxK,KAAKC,OAAOC,MAAME,KAAKC,SAASC,MAC5F6J,EAAGrH,MAAUhB,KAAKqD,QAAQ/F,GAAG0D,MAAOhB,KAAKqD,QAAQ/F,GAAG0D,MAAsB,GAC1EqH,EAAGpG,OAAUjC,KAAKqD,QAAQ/F,GAAG2E,OAAQjC,KAAKqD,QAAQ/F,GAAG2E,SAASjC,KAAKsD,QAAQrB,OAAOE,MAAKnC,KAAKsD,QAAQrB,OAAOE,MAK/GkG,EAAG3J,KAAUpB,EACb+K,EAAGM,UAAgD,mBAA5B3I,MAAKqD,QAAQ/F,GAAGqF,SAA2B3C,KAAKqD,QAAQ/F,GAAGqF,QAClF0F,EAAGO,QAAU5I,KAAKqD,QAAQ/F,GAAGsL,QAI7BP,EAAGQ,MAAU7I,KAAKqD,QAAQ/F,GAAGuL,MAC7BR,EAAGQ,MAAU3K,KAAKE,MAAM0K,qBAAqBT,GAIzCA,EAAGM,WACH3J,EAAOE,YAAYmJ,EAAGxG,KAAKkH,gBAC/BX,EAAGY,KAAKX,GAEZrI,KAAKsD,QAAQ7D,OAAS2I,MA1ClB,KAAK,GAAI9K,GAAI,EAAGA,EAAI0C,KAAKsD,QAAQ7D,OAAOlC,OAAQD,IACxC0C,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,WACvB3J,EAAOE,YAAYc,KAAKsD,QAAQ7D,OAAOnC,GAAGuE,KAAKkH,iBAyC7DpE,KAAK3E,MACPH,MAAO,WACH,GAAIG,KAAKgB,QAAUD,EAAWC,MAA9B,CAKA,IAAK,GAFDiI,IADQjJ,KAAKsD,QAAQzD,MAAM8C,QAAS,EAAE,EAChC,GACNoF,EAAQ,EACHzK,EAAI,EAAGA,EAAI0C,KAAKsD,QAAQ7D,OAAOlC,OAAQD,IAE5C,GAAI0C,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,WAAa3I,KAAKsD,QAAQ7D,OAAOnC,GAAGsL,QAAQ,CAEnE,IAAK,GADDK,GAAM,EACDlD,EAAI,EAAGA,EAAI/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK5E,OAAQwI,IAAI,CACxD,GAAImD,GAAIhL,KAAKiL,aAAanJ,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAAI/F,KAAKsD,QAAQzD,MAAM2D,KAAKC,OAAQzD,KAAKsD,QAAQzD,MAAM2D,KAAKE,KAC9GwF,GAAID,IACJA,EAAMjJ,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,IAE1C,GAAIqD,GAASlL,KAAKiL,aAAanJ,KAAKsD,QAAQ7D,OAAOnC,GAAGsL,QAAQ,GAAI5I,KAAKsD,QAAQzD,MAAM2D,KAAKC,OAAQzD,KAAKsD,QAAQzD,MAAM2D,KAAKE,KACtH0F,GAASH,IACTA,EAAMG,GAGVrB,GAASkB,EAAM,CACf,IAAII,GAASnL,KAAKiL,aAAanJ,KAAKsD,QAAQ7D,OAAOnC,GAAGyE,MAAO/B,KAAKsD,QAAQzD,MAAM2D,KAAKC,OAAQzD,KAAKsD,QAAQzD,MAAM2D,KAAKE,KACrHqE,IAASsB,EAAS,GAAK,GAAIA,MAG1B,IAAIrJ,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,YAAcW,MAAMC,QAAQvJ,KAAKsD,QAAQ7D,OAAOnC,GAAGsL,SAC/E,IAAK,GAAI7C,GAAI,EAAGA,EAAI/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK5E,OAAQwI,IAAI,CACxD,GAAImD,GAAIhL,KAAKiL,aAAanJ,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAAI/F,KAAKsD,QAAQzD,MAAM2D,KAAKC,OAAQzD,KAAKsD,QAAQzD,MAAM2D,KAAKE,KAC9GwF,GAAID,IACJA,EAAMjJ,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,IAIlDgC,GAASkB,EAAM,GAAI,EACnBjK,EAAOwK,WAAazB,IAEtBpD,KAAK3E,MACPF,MAAO,WACH,GAAIE,KAAKgB,QAAUD,EAAWC,MAA9B,CAEA,IAAKhB,KAAKsD,QAAQrB,OAAOU,QAQrB,YAPA3D,EAAOgG,aACHrE,OAAQ,EACRK,MAAO,EACPmE,UAAY,EACZF,WAAY,EACZC,MAAO,GAMf,KAAK,GADDuE,GAAW,EACNnM,EAAI,EAAGA,EAAI0C,KAAKsD,QAAQrB,OAAOE,KAAK5E,OAAQD,IAAI,CACrD,GAAI4L,GAAIhL,KAAKiL,aAAanJ,KAAKsD,QAAQrB,OAAOE,KAAK7E,GAAI0C,KAAKsD,QAAQzD,MAAM2D,KAAKC,OAAQzD,KAAKsD,QAAQzD,MAAM2D,KAAKE,KAC3GwF,GAAIO,IACJA,EAAWP,GAEnB,GAAIA,IAAKlJ,KAAKc,QAAQ4I,YAAc1K,EAAOwK,YAAcxJ,KAAKsD,QAAQrB,OAAOE,KAAK5E,MAClF2L,IAAKlJ,KAAKc,QAAQ4I,YAAc1K,EAAOwK,WAAaN,EAAE,GAAKlJ,KAAKsD,QAAQrB,OAAOE,KAAK5E,OAEpFyC,KAAKsD,QAAQU,QAAUkF,EAAE,EACzBlJ,KAAKC,MAAMH,MAAMW,MAAMkJ,YAAcT,EAAE,EAAE,IACzC,IAAIU,GAAI,EACJC,EAAQJ,EACRK,EAAAA,MAEJ,IAAqC,SAAjC9J,KAAKsD,QAAQrB,OAAOC,SACpB4H,EAAQC,WAAW/J,KAAKsD,QAAQrB,OAAOC,cAEvC,CACA,GAAI8H,GAAOd,EAAIW,CACXG,GAAM,MACNA,EAAM,GACNA,EAAM,IACNA,EAAM,GAGVF,IAAyB,IAAfG,KAAKC,KAAKF,GAASC,KAAKE,IAAIC,QAAQ,GAOlDpL,EAAOgG,aACHrE,OAAQsJ,KAAKI,MAAOJ,KAAKK,KAAKL,KAAKM,IAAIV,EAAO,GAAKI,KAAKM,IAAIrB,EAAG,KAAQa,WAAWS,iBAAiBxK,KAAKC,MAAMH,OAAO2K,YACrHzJ,MAAO6I,EACP1E,UAAa0E,EAAMX,EAAMe,KAAKK,KAAKL,KAAKM,IAAIV,EAAO,GAAKI,KAAKM,IAAIrB,EAAG,IAAOU,EAAK,EAChF3E,WAAa4E,EAAMX,GAAMA,EAAE,GAAMW,EAAO,EACxC3E,MAAO4E,KAKbnF,KAAK3E,MACPD,OAAQ,WAEJ,YADAC,KAAKsF,QAAUpH,KAAKE,MAAMsM,UAAU1K,KAAKsD,QAAQ7D,OAASO,KAAKW,OAASX,QA6E1E2E,KAAK3E,MACP2K,UAAW,WAEPzM,KAAK0M,uBAAuB,YAAa,0BAA2B,SAAUC,GAC1E,GAAMvN,GAAIuN,EAAEC,cAAc5D,QAAhB,IACV,IAAKlH,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,UAA5B,CAGA,IAAK,GADD/H,GAAQ1C,KAAK2C,UAAL,6BAA4CvD,EAA5C,KAAmDgD,EAAML,MAAMZ,KAClE/B,EAAI,EAAGA,EAAIsD,EAAMrD,OAAQD,IAC9BwJ,EAAaC,SAASnG,EAAMtD,GAEhC,IAAIyN,GAAO7M,KAAK+E,OAAL,6BAAyC3F,EAAzC,UAAqDgD,EAAML,MAAMZ,IAE5E,IAAK0L,EAAL,CAEA,GAAI7B,GAAIa,WAAWgB,EAAKC,aAAa,gBACrCD,GAAK9C,aAAa,eAAgBiB,EAAE,MACtCvE,KAAK3E,MAAOA,KAAKC,MAAML,QACzB1B,KAAK0M,uBAAuB,WAAY,0BAA2B,SAAUC,GACzE,GAAMvN,GAAIuN,EAAEC,cAAc5D,QAAhB,IACV,IAAKlH,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,UAA5B,CAGA,IAAK,GADD/H,GAAQ1C,KAAK2C,UAAL,6BAA4CvD,EAA5C,KAAmDgD,EAAML,MAAMZ,KAClE/B,EAAI,EAAGA,EAAIsD,EAAMrD,OAAQD,IAC9BwJ,EAAaQ,YAAY1G,EAAMtD,GAEnC,IAAIyN,GAAO7M,KAAK+E,OAAL,6BAAyC3F,EAAzC,UAAqDgD,EAAML,MAAMZ,IAC5E,IAAK0L,EAAL,CAEA,GAAI7B,GAAIa,WAAWgB,EAAKC,aAAa,gBACrCD,GAAK9C,aAAa,eAAgBiB,EAAE,MACtCvE,KAAK3E,MAAOA,KAAKC,MAAML,QAEzB1B,KAAK0M,uBAAuB,SAAU,qBAAsB,SAAUC,GAClE7K,KAAKiL,YAAYJ,EAAEC,cAAc5D,QAAhB,KAAiC2D,EAAEC,cAAc5D,QAAhB,OACpDvC,KAAK3E,MAAOA,KAAKC,MAAML,QAGzB1B,KAAK0M,uBAAuB,YAAa,iBAAkB,SAAUC,GACjE7K,KAAKuC,QAAQ2I,GAAGL,IACjB7K,KAAKc,QAASd,MACjB9B,KAAK0M,uBAAuB,WAAY,iBAAmB,SAAUC,GACjEvK,EAAMiC,QAAQ4I,KAAKN,IAAiB7K,KAAKc,UAC/C6D,KAAK3E,OAEPe,GACAC,MAAO,EACPL,OAAQ,EACRyK,WAAY,EAIhBpL,MAAKqL,cAAgB,SAAUjF,EAAO2E,GAC7B/L,EAAOkE,UAAYlE,EAAOgC,QAAUhB,KAAKgB,QAC1ChC,EAAOkE,SAAWhF,KAAKE,MAAMsI,YAAYpG,EAAMgD,QAAQrB,OAAOE,KAAMnC,KAAKgB,OAC7E,IAAI0E,GAAQ1F,KAAKsF,QAAQK,KAAKoF,GAC1BlF,EAAQ7F,KAAKsF,QAAQC,OAAOG,GAC5BW,EAAK/F,EAAMgF,QAAQgB,OAAOZ,GAE1Ba,EAAerI,KAAKE,MAAMoI,YAAYJ,EAAMjE,KAAM0D,EAAOQ,EAAI/F,EAAMK,QACnEgG,EAASzI,KAAKE,MAAMwI,UAAU5H,EAAOkE,SAAUqD,EAAcvG,KAAKsD,QAAQU,QAC9EhF,GAAOmE,aAAa4H,GAAQpE,CAU5B,KAAI,GARE2E,GAAI3E,EAAOpJ,OAEbgO,KACAC,KACAC,KACAC,KACAC,KACAC,KACItO,EAAI,EAAGA,EAAIgO,EAAGhO,IAClBiO,EAAGjO,GAAKqJ,EAAOrJ,GAAG,GAClBkO,EAAGlO,GAAKqJ,EAAOrJ,GAAG,EAGtB,KAAI,GAAIA,GAAI,EAAGA,EAAIgO,EAAI,EAAGhO,IACtBmO,EAAInO,GAAKkO,EAAGlO,EAAI,GAAKkO,EAAGlO,GACxBoO,EAAIpO,GAAKiO,EAAGjO,EAAI,GAAKiO,EAAGjO,GACxBqO,EAAGrO,GAAKmO,EAAInO,GAAKoO,EAAIpO,EAIzBsO,GAAG,GAAKD,EAAG,GACXC,EAAGN,EAAI,GAAKK,EAAGL,EAAI,EACnB,KAAI,GAAIhO,GAAI,EAAGA,EAAIgO,EAAI,EAAGhO,IACT,IAAVqO,EAAGrO,IAA0B,IAAdqO,EAAGrO,EAAI,IAAaqO,EAAGrO,EAAI,GAAK,GAAQqO,EAAGrO,GAAK,EAC9DsO,EAAGtO,GAAK,GAERsO,EAAGtO,GAAK,GAAKoO,EAAIpO,EAAI,GAAKoO,EAAIpO,MACzB,EAAIoO,EAAIpO,GAAKoO,EAAIpO,EAAI,IAAMqO,EAAGrO,EAAI,IAClCoO,EAAIpO,GAAK,EAAIoO,EAAIpO,EAAI,IAAMqO,EAAGrO,IAC/BuO,SAASD,EAAGtO,MACZsO,EAAGtO,GAAK,GAMpB,KAAI,GAFAwO,GAAAA,KAASP,EAAG,GAAZ,IAAkBC,EAAG,GACrBO,EAAO,4BACHzO,EAAI,EAAGA,EAAIgO,EAAI,EAAGhO,IACtBwO,GAAAA,OAAWP,EAAGjO,GAAKoO,EAAIpO,GAAK,GAA5B,KAAiCkO,EAAGlO,GAAKsO,EAAGtO,GAAKoO,EAAIpO,GAAK,GAA1D,KAA+DiO,EAAGjO,EAAI,GAAKoO,EAAIpO,GAAK,GAApF,KAAyFkO,EAAGlO,EAAI,GAAKsO,EAAGtO,EAAI,GAAKoO,EAAIpO,GAAK,GAA1H,IAA+HiO,EAAGjO,EAAI,GAAtI,IAA4IkO,EAAGlO,EAAI,GAC/I8I,EAAMyC,MAAMlG,UACZoJ,GAAQ7N,KAAKE,MAAM4N,eAAeT,EAAGjO,GAAKkO,EAAGlO,GAAIyN,EAAMzN,EAAG8I,EAAM5H,MAAO4H,EAAMyC,MAAMoD,QAK3F,OAHI7F,GAAMyC,MAAMlG,UACZoJ,GAAQ7N,KAAKE,MAAM4N,eAAeT,EAAGD,EAAE,GAAKE,EAAGF,EAAE,GAAIP,EAAMO,EAAE,EAAGlF,EAAM5H,MAAO4H,EAAMyC,MAAMoD,SAC7FF,GAAQ,OACR,wDAA+DhB,EAA/D,sBAAyFA,EAAzF,QAAqGe,EAArG,yBAA+H1F,EAAM5H,MAArI,mBAA6J4H,EAAMpF,MAAnK,aAAqL+K,EAArL,QAEFpH,KAAK3E,MACPA,KAAKkM,aAAe,SAAU9F,EAAO2E,GAC5B/L,EAAOkE,UAAYlE,EAAOgC,QAAUhB,KAAKgB,QAC1ChC,EAAOkE,SAAWhF,KAAKE,MAAMsI,YAAYpG,EAAMgD,QAAQrB,OAAOE,KAAMnC,KAAKgB,OAC7E,IAAI0E,GAAQ1F,KAAKsF,QAAQK,KAAKoF,GAC1BlF,EAAQ7F,KAAKsF,QAAQC,OAAOG,GAC5BW,EAAK/F,EAAMgF,QAAQgB,OAAOZ,GAE1Ba,EAAerI,KAAKE,MAAMoI,YAAYJ,EAAMjE,KAAM0D,EAAOQ,EAAI/F,EAAMK,QACnEgG,EAASzI,KAAKE,MAAMwI,UAAU5H,EAAOkE,SAAUqD,EAAcvG,KAAKsD,QAAQU,QAC9EhF,GAAOmE,aAAa4H,GAAQpE,CAC5B,IAAIjG,GAASV,KAAKW,OAEdwL,EAAU,CACTnM,MAAKsD,QAAQT,cAAcc,WAC5BwI,EAAmC,GAAzBnN,EAAOE,YAAYC,IACjC,IAAIiN,GAAKpM,KAAKgB,MAAMhB,KAAKsD,QAAQrB,OAAOE,KAAK5E,OAAO,EAAI4O,EACpDE,EAAc,IAAHD,EAAWpN,EAAOC,WAAqB,IAAHmN,EAASpN,EAAOE,YAAYC,IAAK,EAAQ,IAAHiN,EAAQ,GAI7FE,EAAAA,uDAAgEvB,EAAhE,KACAwB,EAAa,EACbvM,MAAKsD,QAAQT,cAAce,cAC3B2I,EAAAA,eAA4BrO,KAAKE,MAAM4E,MACvCsJ,GAAAA,uBAAiCC,EAAjC,+LAIJ,KAAK,GADDR,GAAO,GACFzO,EAAI,EAAGA,EAAIqJ,EAAOpJ,OAAQD,IAAI,CACnC,GAAIwO,GAAAA,MAAQO,EAAO1F,EAAOrJ,GAAG,GAAG8O,EAAG,GAA/B,IAAoC1L,EAApC,OAAiD2L,EAAO1F,EAAOrJ,GAAG,GAAG8O,EAAG,GAAxE,IAA8E1L,EAA9E,KAAyF2L,EAAO1F,EAAOrJ,GAAG,GAAG8O,EAAG,GAAhH,IAAsHzF,EAAOrJ,GAAG,GAAhI,KAAsI+O,EAAO1F,EAAOrJ,GAAG,GAAG8O,EAAG,GAA7J,IAAkKzF,EAAOrJ,GAAG,GAA5K,GAEJgP,IAAAA,+DAAyEvB,EAAzE,gBAA6FzN,EAA7F,QAAsGwO,EAAtG,WAAkH1F,EAAM5H,MAAxH,2CACIwB,KAAKsD,QAAQT,cAAce,cAC3B0I,GAAAA,kDAA4DvB,EAA5D,gBAAgFzN,EAAhF,QAAyFwO,EAAzF,gBAA0GS,EAA1G,eACJD,GAAAA,0DAAoEvB,EAApE,gBAAwFzN,EAAxF,QAAiGwO,EAAjG,wEACAQ,GAAS,OAMb,MAHAA,IAAUP,EAAK,OAEf/M,EAAOC,YACAqN,GACT3H,KAAK3E,MACPA,KAAKO,eAAiB,WAGlB,IAAK,GAFDK,GAAQ,GACR4L,EAAQ,GACHlP,EAAI,EAAGA,EAAI0C,KAAKsD,QAAQ7D,OAAOlC,OAAQD,IAC5C,GAAK0C,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,UAE5B,OAAQ3I,KAAKsD,QAAQ7D,OAAOnC,GAAGuE,MAC3B,IAAK,OACDjB,GAASZ,KAAKqL,cAAcrL,KAAKsD,QAAQ7D,OAAOnC,GAAIA,EACpD,MACJ,KAAK,MACDkP,GAAQxM,KAAKkM,aAAalM,KAAKsD,QAAQ7D,OAAOnC,GAAIA,GAI9D,MAAOkP,GAAK5L,GACd+D,KAAK3E,MACPA,KAAKQ,YAAc,WAKf,IAAK,GAJDiM,GAAU,GACVX,EAAI9L,KAAKW,OAAQX,KAAKgB,MAAmB,GAAZhB,KAAKW,OAAsB,GAAXX,KAAKgB,MAG7C1D,EAAI,EAAGA,EAAI0C,KAAKsD,QAAQ7D,OAAOlC,OAAQD,IAC5C,GAAK0C,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,UAA5B,CAEA,GAAI+D,GAAM,EACNC,MACAC,EAAId,EAAE,GAAK9L,KAAKsD,QAAQ7D,OAAOlC,OAAOD,IAAI0B,EAAOE,YAAYP,IAAIK,EAAOE,YAAYE,MACpFgN,EAAK,EAAEQ,CACyB,UAAhC5M,KAAKsD,QAAQ7D,OAAOnC,GAAGuE,OACvBuK,EAAKpM,KAAKsD,QAAQ7D,OAAOnC,GAAG0D,MAC5B4L,EAAM,EAAFA,EAAMR,EAAG,EAIjB,KAAK,GAAIrG,GAAI,EAAGA,EAAI/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK5E,OAAQwI,IACb,OAAnC/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,KAC5B2G,GAAO1M,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAE3C,KAAK,GAAIA,GAAI,EAAGA,EAAI/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK5E,OAAQwI,IACpD,GAAK/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAAjC,CAEA,GAAI+D,GAAQ9J,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAAG2G,EAAM,GACnC,OAAV5C,IAEAA,EAAQ,OACR6C,EAAa,GAGjBF,GAAAA,MACAA,GAAAA,YAAuBvO,KAAKE,MAAMyO,OAAO7M,KAAKgB,MAAM,EAAGhB,KAAKW,OAAO,EAAGiM,EAAGD,EAAYA,EAAW7C,GAAhG,yBAA+H9J,KAAKsD,QAAQ7D,OAAOnC,GAAGoL,OAAO3C,GAA7J,mBAAkLqG,EAAlL,+BACAK,GAAAA,0DAAqEnP,EAArE,gBAAsFyI,EAAtF,QAA+F7H,KAAKE,MAAMyO,OAAO7M,KAAKgB,MAAM,EAAGhB,KAAKW,OAAO,EAAGiM,EAAGD,EAAYA,EAAW7C,GAAxK,6CAA2NsC,EAA3N,+BACAK,GAAAA,OACAE,GAAc7C,GAKtB,MAAO2C,IACT9H,KAAK3E,MAwEPR,EAAK+C,UACLvC,KAAKuC,QAAU,GAAIrE,MAAK4C,SACpBwH,KAAM,cACN9G,OAAQxB,KAAKC,MAAMyE,UACnB5D,QAAAA,4EAC2Bd,KAAKsD,QAAQf,QAAQC,SADhD,uCAGAG,SAAS,EACTmK,YACI3K,SAEJ4K,WAAY,SAAU3H,EAAEa,KAGxB+G,KAAM,WACFhN,KAAKiN,OAAS,KACdjN,KAAKkN,QAAU,KACflN,KAAKmN,QAAS,GAElBC,OAAQ,WACJC,aAAarN,KAAKiN,QAClBI,aAAarN,KAAKkN,SAClBlN,KAAKc,QAAQL,MAAM6M,QAAU,GAC7BtN,KAAKc,QAAQL,MAAM8M,QAAU,KAEjCC,MAAO,WACHH,aAAarN,KAAKiN,QAClBjN,KAAKiN,OAASQ,WACV,WACIzN,KAAKc,QAAQL,MAAM8M,QAAU,IAC7BvN,KAAKkN,QAAUO,WAAW,WACtBzN,KAAKc,QAAQL,MAAM6M,QAAU,QAC/B3I,KAAK3E,MAAO,MAEhB2E,KAAK3E,MAAO,MAEtB0N,KAAM,SAAUC,GACZN,aAAarN,KAAKiN,QAClBjN,KAAKmC,KAAKmG,KAAOqF,EAAQC,KAAK,GAC9B5N,KAAKmC,KAAK0L,MAAQF,EAAQC,KAAK,GAC/B5N,KAAKnB,UACLmB,KAAKc,QAAQL,MAAMqN,KAAQH,EAAQI,IAAI,GAAK,EAAG,KAC/C/N,KAAKc,QAAQL,MAAMuN,IAAOL,EAAQI,IAAI,GAAK/N,KAAKc,QAAQmN,aAAe,EAAG,KAC1EjO,KAAKc,QAAQL,MAAMyN,gBAAkBP,EAAQhG,MACxC3H,KAAKmN,SACNnN,KAAKc,QAAQL,MAAM0N,WAAa,oBAChCnO,KAAKmN,QAAS,IAItBiB,QAAS,WACLpO,KAAKkL,GAAK,SAAUL,GAChB,GAAI5D,GAAM4D,EAAEC,cAAc5D,QAAhB,IACV,QAAQD,GACJ,IAAK,OACDjH,KAAKqO,SAASxD,EACd,MACJ,KAAK,MACD7K,KAAKsO,MAAMzD,EACX,MACJ,KAAK,MACD7K,KAAKuO,MAAM1D,KAMrBlG,KAAK3E,MACPA,KAAKqO,SAAW,SAAUxD,GACtB,GAAInD,GAASmD,EAAEC,cACXxN,EAAIsK,SAASF,EAAOR,QAAP,MACbnB,EAAI6B,SAASF,EAAOR,QAAP,MACbS,EAAQD,EAAOG,WAAP,OAA4BC,MAEpCC,EAAQH,SAASF,EAAOG,WAAW,gBAAgBC,MACvDJ,GAAOG,WAAP,KAA0BC,MAAQH,EAClCD,EAAOG,WAAP,EAAuBC,MAAQF,SAASF,EAAOG,WAAP,EAAuBC,OAASC,EACxEL,EAAOG,WAAP,OAA4BC,MAAQ,MAIpC,IAAI0G,IACAZ,MAAOnO,EAAOnC,GAAGgL,KAAM7I,EAAOnC,GAAG6E,KAAK4D,IACtC4B,MAAOA,EACPoG,IAAK/O,EAAOmE,aAAa7F,GAAGyI,GAEhC/F,MAAK0N,KAAKc,IACZ7J,KAAK3E,MACPA,KAAKsO,MAAQ,SAAUzD,GACnB,GAAI7C,GAAM6C,EAAEC,aACZ9C,GAAIC,aAAa,eAAgB,GACjC,IAAI3K,GAAIsK,SAASI,EAAId,QAAJ,MACbnB,EAAI6B,SAASI,EAAId,QAAJ,MAGbsH,GACAZ,MAAOtN,EAAMgD,QAAQ7D,OAAOnC,GAAGgL,KAAMhI,EAAMgD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,IAClE4B,MAAOrH,EAAMgD,QAAQ7D,OAAOnC,GAAGkB,MAC/BuP,IAAK/O,EAAOmE,aAAa7F,GAAGyI,GAEhC/F,MAAK0N,KAAKc,IACZ7J,KAAK3E,MACPA,KAAKuO,MAAQ,SAAU1D,GACnB,GAAI7C,GAAM6C,EAAEC,aACZ9C,GAAIC,aAAa,iBAAkB,GACnC,IAAI3K,GAAIsK,SAASI,EAAId,QAAJ,MACbnB,EAAI6B,SAASI,EAAId,QAAJ,MAGbsH,GACAZ,MAAOtN,EAAMgD,QAAQ7D,OAAOnC,GAAG2E,OAAQ3B,EAAMgD,QAAQ7D,OAAOnC,GAAG2E,OAAO8D,GAAIzF,EAAMgD,QAAQ7D,OAAOnC,GAAGgL,KAAMhI,EAAMgD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,IACrI4B,MAAOrH,EAAMgD,QAAQ7D,OAAOnC,GAAGoL,OAAO3C,GACtCgI,KAAMlD,EAAE4D,QAAS5D,EAAE6D,SAEvB1O,MAAK0N,KAAKc,IACZ7J,KAAK3E,MAEPA,KAAKmL,KAAO,SAAUN,GAClB,GAAI5D,GAAM4D,EAAEC,cAAc5D,QAAhB,IACV,QAAQD,GACJ,IAAK,OACDjH,KAAK2O,WAAW9D,EAChB,MACJ,KAAK,MACD7K,KAAK4O,QAAQ/D,EACb,MACJ,KAAK,MACD7K,KAAK6O,QAAQhE,KAIzB7K,KAAK2O,WAAa,SAAU9D,GACxB,GAAInD,GAASmD,EAAEC,cACX/C,EAAQH,SAASF,EAAOG,WAAW,gBAAgBC,MACvDJ,GAAOG,WAAP,OAA4BC,MAAQJ,EAAOG,WAAP,KAA0BC,MAC9DJ,EAAOG,WAAP,KAA0BC,MAAQ,OAClCJ,EAAOG,WAAP,EAAuBC,OAASC,EAChC/H,KAAK8O,QAET9O,KAAK4O,QAAU,SAAU/D,GACrB,GAAI7C,GAAM6C,EAAEC,aACZ9C,GAAIC,aAAa,eAAgB,GACjCjI,KAAK8O,QAET9O,KAAK6O,QAAU,SAAUhE,GACrB,GAAI3C,GAAM2C,EAAEC,aACZ5C,GAAID,aAAa,iBAAkB,GACnCjI,KAAK8O,SAIbC,WAAY,eAwBhB/O,KAAKhB,OAASA,EAGdgB,KAAKgB,MACLxB,EAAKmL,YACLrL,EAAGI,KAAK,eACRb,EAAQmQ,KAAKhP,MAEbA,KAAKiL,YAAc,SAAU3N,EAAGyI,GAC5B,GAAK/F,KAAKsD,QAAQ7D,OAAOnC,GAAzB,CAEA,GAAI2R,GAAK/Q,KAAK+E,OAAL,8BAA0C3F,EAA1C,wBAAoE0C,KAAKC,MAAML,OACxF,IAAII,KAAKK,UAIL,GAHAL,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,WAAa3I,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,UAE3DsG,EAAGC,QAAUlP,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,UAChC3I,KAAKsD,QAAQ7D,OAAO0P,OAAO,SAAAC,GAAA,MAAGA,GAAEzG,YAAWpL,OAAS,EAIpD,MAFAyC,MAAKsD,QAAQ7D,OAAOnC,GAAGqL,WAAa3I,KAAKsD,QAAQ7D,OAAOnC,GAAGqL,eAC3DsG,EAAGC,SAAU,OAIjBlP,MAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAAuC,OAAlC/F,KAAKsD,QAAQ7D,OAAOnC,GAAG6E,KAAK4D,GAAa,KAAM/F,KAAKqD,QAAQ/F,GAAG6E,KAAK4D,EAQzG/F,MAAKnB,YACP8F,KAAK3E,MAEPA,KAAKnB,QAAU,WACXA,EAAQmQ,KAAKhP,OACf2E,KAAK3E,MACPA,KAAKqP,OAAS,aAEZ1K,KAAK3E,OA3iCf,MAAA9C,cAAA0B,IAAAd,IAAA,SAAAwR,IAAA,WA8iCQ,MAAOtP,MAAKC,MAAMZ,IAAI4O,gBA9iC9BnQ,IAAA,QAAAwR,IAAA,WAijCQ,MAAOtP,MAAKC,MAAMZ,IAAIqK,YAAc1J,KAAKsD,QAAQU,aAjjCzDlG,IAAA,uBAAAgK,MAAA,SAojCgC1B,EAAOmJ,GAC/B,GAAIC,GAAIpJ,EAAMyC,MAAQzC,EAAMyC,QAK5B,OAJA2G,GAAE7M,QAAgC,mBAAd6M,GAAE7M,SAA2B6M,EAAE7M,QACnD6M,EAAEvD,OAASuD,EAAEvD,OAAQuD,EAAEvD,OAAU,EAAE7F,EAAMpF,MAAM,EAC3CyO,OAAOC,MAAMF,EAAEvD,QAEZuD,KA1jCf1R,IAAA,YAAAgK,MAAA,SA4jCqB6H,EAAQjP,EAAQkP,GAC7B,IAAKA,EAAIvP,SACL,QAEJ,IAAIwP,GAAMF,EAAO,GAAGxN,KAAK,GACrB2N,EAAMH,EAAO,GAAGxN,KAAK,GACrB4N,GAAc,EACdC,GAAa,CACkB,UAA/BJ,EAAItM,QAAQzD,MAAM6C,MAAM,IAAgD,SAA/BkN,EAAItM,QAAQzD,MAAM6C,MAAM,KAEjEqN,GAAc,EACdF,EAAMD,EAAItM,QAAQzD,MAAM6C,MAAM,GAC9BoN,EAAMF,EAAItM,QAAQzD,MAAM6C,MAAM,IAEC,SAA/BkN,EAAItM,QAAQzD,MAAM6C,MAAM,KACxBsN,GAAa,EAUjB,KAAK,GATD3J,KAAQsJ,EAAO,GAAGxN,KAAK,GAAGwN,EAAO,GAAGxN,KAAK,KACzCuD,EAAQ,EAGRuK,GACA1K,UACAI,QACAW,OAAQ,MAEHhJ,EAAI,EAAGA,EAAIqS,EAAOpS,OAAQD,IAC/B,GAAKqS,EAAOrS,GAAGqL,UAAf,CAEAsH,EAAGtK,KAAKrI,GAAK,EACTqS,EAAOrS,GAAGsL,UACVlD,IACoC,mBAAzBiK,GAAOrS,GAAGsL,QAAQ,GACzBvC,EAAG2C,KAAK2G,EAAOrS,GAAGsL,SAElBvC,EAAG2C,MAAM2G,EAAOrS,GAAG6E,KAAK,GAAGwN,EAAOrS,GAAG6E,KAAK,KAC9C8N,EAAGtK,KAAKrI,GAAKoI,EAEjB,KAAK,GAAIK,GAAI,EAAGA,EAAI4J,EAAOrS,GAAG6E,KAAK5E,OAAQwI,IACnCgK,IACIJ,EAAOrS,GAAG6E,KAAK4D,GAAK8J,IACpBA,EAAMF,EAAOrS,GAAG6E,KAAK4D,IACrB4J,EAAOrS,GAAG6E,KAAK4D,GAAK+J,IACpBA,EAAMH,EAAOrS,GAAG6E,KAAK4D,KAEzB4J,EAAOrS,GAAGsL,SAA2C,mBAAzB+G,GAAOrS,GAAGsL,QAAQ,KAC1C+G,EAAOrS,GAAG6E,KAAK4D,GAAKM,EAAGX,GAAO,KAC9BW,EAAGX,GAAO,GAAKiK,EAAOrS,GAAG6E,KAAK4D,IAC9B4J,EAAOrS,GAAG6E,KAAK4D,GAAKM,EAAGX,GAAO,KAC9BW,EAAGX,GAAO,GAAKiK,EAAOrS,GAAG6E,KAAK4D,KAI9CM,EAAG,IAAMwJ,EAAKC,GACdG,EAAG3J,OAASD,CAGZ,KAAK,GAFC6J,GAAa,GAEV5S,EAAI,EAAGA,EAAI+I,EAAG9I,OAAQD,IAAI,CAC/B,GAAIwO,GAAIzF,EAAG/I,GAAG,GAAG+I,EAAG/I,GAAG,GACnB6S,EAAQjS,KAAKkS,eAAetE,GAC5BuE,EAAAA,OACAC,EAAAA,OACE/F,EAAMN,KAAKM,IAAI,GAAI4F,GAGnBX,EAAI,GAAGjF,CAET+F,GADAxE,EAAK0D,EAAE,EACG,IAAKjF,EAEL,IAAIA,EACduB,EAAQ,IAAJvB,IACJ+F,GAAmB,IAKnBD,EAJI,IAAJ/S,GAAU0S,EAIH3J,EAAG/I,GAAG,GAAI+I,EAAG/I,GAAG,GAAOY,KAAKqS,QAASzE,EAAIoE,EAAWxP,EAAQ,IAAM4P,GAAS,IAH3EV,EAAItM,QAAQzD,MAAM6C,MAAM,EAW/B,KANJ,GAAI8N,GAAInK,EAAG/I,GAAG,GACVuI,KAKO2K,EAAInK,EAAG/I,GAAG,GAAKsS,EAAItM,QAAQ7D,OAAOnC,GAAG0D,OACxC6E,EAAMmD,KAAKwH,GACXA,GAAKH,GACDF,EAAO,GAAKE,EAAO,KACrBG,EAA+B,EAA7BA,EAAEpG,QAAQ,EAAEH,KAAKwG,IAAIN,IAE7BtK,GAAMmD,KAAKwH,GACXP,EAAG1K,OAAOyD,KAAKnD,GAGvB,MAAOoK,MAzpCfnS,IAAA,cAAAgK,MAAA,SA6pCuB/C,EAAQgD,GACvB,GAAM2I,GAAQ3I,EAAShD,EAAOxH,MAC9B,OAAOwH,GAAO4L,IAAI,SAASvL,EAAE9H,GAAG,MAAOA,GAAEoT,OA/pCjD5S,IAAA,cAAAgK,MAAA,SAiqCuB1B,EAAOP,EAAOQ,EAAI3F,GAKjC,IAAK,GAJDmP,GAAMxJ,EAAG,GACTyJ,EAAMzJ,EAAG,GACPuK,EAAmB/K,EAAMA,EAAMtI,OAAO,GAAKuS,EAC7Ce,KACK9K,EAAG,EAAGA,EAAIK,EAAM7I,OAAQwI,IAC7B8K,EAAS7H,KAAMtI,GAAa0F,EAAML,GAAK8J,GAAOnP,GAAQoP,EAAID,GAAKe,EAOnE,OAAOC,MA9qCf/S,IAAA,YAAAgK,MAAA,SAmrCqBgJ,EAAEC,GAGf,IAAK,GAHaC,GAAYvP,UAAAlE,OAAA,GAAAmE,SAAAD,UAAA,GAAAA,UAAA,GAAF,EACxBkF,KAEKrJ,EAAI,EAAGA,EAAIyT,EAAExT,OAAQD,IAC1BqJ,EAAOqC,MAAM8H,EAAExT,GAAK0T,EAASD,EAAEzT,IAEnC,OAAOqJ,MAzrCf7I,IAAA,iBAAAgK,MAAA,SA2rC0BsH,EAAE6B,EAAG3T,EAAEyI,EAAG4B,EAAOI,GACnC,MAAA,4EAAmFzK,EAAnF,gBAAoGyI,EAApG,SAA8GqJ,EAA9G,SAAwH6B,EAAxH,QAAiIlJ,EAAjI,aAAmJJ,EAAnJ,+CA5rCR7J,IAAA,mBAAAgK,MAAA,SAgsC4BoJ,EAASC,EAASC,EAAQC,GAC9C,GAAIC,IAAkBD,EAAe,GAAKpH,KAAKE,GAAK,GAEpD,QACIiF,EAAG8B,EAAWE,EAASnH,KAAKD,IAAIsH,GAChCL,EAAGE,EAAWC,EAASnH,KAAKsH,IAAID,OArsC5CxT,IAAA,SAAAgK,MAAA,SAwsCkBsH,EAAG6B,EAAGG,EAAQI,EAAYC,GAEpC,GAAIC,GAAQxT,KAAKE,MAAMuT,iBAAiBvC,EAAG6B,EAAGG,EAAQK,GAClDG,EAAM1T,KAAKE,MAAMuT,iBAAiBvC,EAAG6B,EAAGG,EAAQI,GAEhDK,EAAeJ,EAAWD,GAAc,IAAM,IAAM,IAEpD1F,GACA,IAAK4F,EAAMtC,EAAGsC,EAAMT,EACpB,IAAKG,EAAQA,EAAQ,EAAGS,EAAc,EAAGD,EAAIxC,EAAGwC,EAAIX,GACtDa,KAAK,IAEP,OAAOhG,MAptCfhO,IAAA,aAAAgK,MAAA,SAwtCsBiK,EAAOzU,GACrB,GAAI0U,GAAAA,eAAoB9T,KAAKE,MAAM4E,MAAQ1F,CAC3C,OAAA,8CAAqDA,EAArD,+EAC6DyU,EAAMpJ,UAAW,oBAAoB,IADlG,QAC4GqJ,EAD5G,gBAC8H1U,EAD9H,+GAGsE0U,EAHtE,gBAGwF1U,EAHxF,iFAG0KyU,EAAMvT,MAHhL,iBAGsMuT,EAAMzJ,KAH5M,iDA1tCRxK,IAAA,gBAAAgK,MAAA,SAguCyBiK,EAAOzU,GAGxB,IAAK,GAFD0U,GAAAA,eAAoB9T,KAAKE,MAAM4E,MAAQ1F,EACvC2U,EAAM,GACDlM,EAAG,EAAGA,EAAIgM,EAAM5P,KAAK5E,OAAQwI,IAClCkM,GAAAA,8CAAqD3U,EAArD,+EACyDyU,EAAMpJ,UAAW,oBAAoB,IAD9F,QACwGqJ,EAAKjM,EAD7G,gBAC8HzI,EAD9H,gBAC+IyI,EAD/I,6GAGgEiM,EAAKjM,EAHrE,kFAGwJgM,EAAMrJ,OAAO3C,GAHrK,iBAGwLgM,EAAM9P,OAAO8D,GAHrM,6CAMJ,OAAOkM,MA1uCfnU,IAAA,UAAAgK,MAAA,SA4uCmBoK,EAAOC,GAElB,IAAK,GAFoBnB,GAAUvP,UAAAlE,OAAA,GAAAmE,SAAAD,UAAA,GAAAA,UAAA,GAAF,EAC7B2Q,EAAAA,GACK9U,EAAI,EAAGA,EAAI6U,EAAO7U,IAAI,CAC3B8U,GAAAA,qDACA,KAAK,GAAIrM,GAAI,EAAGA,EAAImM,EAAOnM,IACb,IAANA,IACAqM,GAAAA,oDAA2DpB,EAA3D,kBAAoFA,EAApF,cACJoB,GAAAA,0CAEJA,IAAAA,SAGJ,MADAA,IAAAA,OAvvCRxT,MA6vCJV,KAAKE,MAAQF,KAAKC,OAAOC,MAAMA,MAC/BF,KAAKE,MAAM4E,MAAQ,EAGnB9E,KAAKmU,iBAAmB,WAAqB,GAAXC,GAAW7Q,UAAAlE,OAAA,GAAAmE,SAAAD,UAAA,GAAAA,UAAA,GAAJ,GACjC8Q,EAAMD,GAAQrI,KAAKuI,SAASC,SAAS,IAAIxI,KAAKuI,SAASC,SAAS,IAAIxI,KAAKuI,SAASC,SAAS,KAAKC,QAAQ,KAAM,IAAIA,QAAQ,QAAS,IAAIC,UAAU,EAAE,EAIvJ,OAHIzU,MAAK+E,OAAL,IAAgBsP,KAChBA,EAAMrU,KAAK0U,gBAAgBN,IAExBC","file":"lure.chart.min.js","sourcesContent":["Lure.Plugin.Chart = {\r\n    Version: 'v0.1.0    05.09.2017',\r\n    Core: {\r\n        Defaults:{\r\n            Color: ['red', 'green', 'cornflowerblue', 'purple', 'palevioletred', 'orange', 'tomato', 'darkblue'],\r\n            TemplateLabel: {\r\n                Line: 'Name: {{Name}}<br>Value: {{Value}}',\r\n                Pie: 'Name: {{Name}}<br>Value: {{Value}}'\r\n            }\r\n        }\r\n    },\r\n    Chart: class LureChart{\r\n        constructor(\r\n            Target = null,      //where render chart\r\n            {\r\n                Type = 'Line',  //Line Bar Pie\r\n                Title = '',\r\n                Labels = {\r\n                    Rotation: 'auto',\r\n                    Data: []\r\n                },\r\n                Grid = {},\r\n                Series = [],\r\n                Tooltip = {\r\n                    Template: null,\r\n                },\r\n                AxisY = {\r\n                    Scale: ['auto', 'auto', 'auto'],\r\n                    Visible: true,\r\n                },\r\n                Height = 400,\r\n                SeriesOptions = {},\r\n                Disabled = false\r\n            }={},\r\n        ){\r\n            if (Disabled)\r\n                return;\r\n            let pp = new Lure.Diagnostics.Perf();\r\n            Lure.Chart.Count++;\r\n\r\n            let chart = this;\r\n            this.Content = Lure.Select(Target);\r\n            //this.Content.classList.add('l-chart'); // lc\r\n            //this.Content.style.position = 'relative';\r\n\r\n            this.isCasual = true;\r\n\r\n\r\n            let Prepared = [];\r\n            let Buffer = {\r\n                Legend: '',\r\n\r\n                AxisX: '',\r\n                AxisY: '',\r\n                Grid: '',\r\n                Svg: '',\r\n\r\n                Height: 0,\r\n                Width: 0,\r\n                Abscissa: null,\r\n                SeriesPoints: [],\r\n\r\n                SeriesCount:{\r\n                    Line: 0,\r\n                    Bar: 0,\r\n                    Pie: 0,\r\n                    Ring: 0,\r\n                },\r\n                SeriesBar: 0,\r\n\r\n                ParametersAxisX: null,\r\n            };\r\n            this._Series = Series;\r\n\r\n            this.Options = {\r\n                Type: Type? Type.toLowerCase(): 'line',\r\n                Title: Title? Title: '',\r\n                Legend: {\r\n                    Visible: true,\r\n                },\r\n                Labels: {\r\n                    Visible: (typeof Labels.Visible === 'undefined' || Labels.Visible),\r\n                    Rotation: Labels.Rotation? Labels.Rotation: 'auto',\r\n                    Data: Labels.Data? Labels.Data: [],\r\n                    Font: {\r\n                        Family: 'sans-serif',\r\n                        Size: '0.8rem',\r\n                    }\r\n                },\r\n                Grid: {\r\n                    Visible: (typeof Grid.Visible === 'undefined' || Grid.Visible),\r\n                },\r\n                Series: null,\r\n                SeriesOptions: {\r\n                    BarStack: false,\r\n                    BarGradient: true,\r\n\r\n                    PieStack: false,\r\n                    PieType: 'pie'\r\n                },\r\n                AxisY: {\r\n                    Font: {\r\n                        Family: 'sans-serif',\r\n                        Size: '0.8rem',\r\n                    },\r\n                    Scale: AxisY.Scale? ([Lure.isNumeric(AxisY.Scale[0])? AxisY.Scale[0]:'auto', Lure.isNumeric(AxisY.Scale[1])? AxisY.Scale[1]:'auto', Lure.isNumeric(AxisY.Scale[2])? AxisY.Scale[2]:'auto']):['auto', 'auto', 'auto'],\r\n                    Visible: (typeof AxisY.Visible === 'undefined' || AxisY.Visible),\r\n                    Title: AxisY.Title\r\n\r\n                },\r\n                Padding: 0,\r\n                Tooltip: {\r\n                    Template: null,\r\n                }\r\n            };\r\n            this.Block = (function () {\r\n                this.Content.innerHTML = `<div class=\"l-chart col\">\r\n                                        <div>\r\n                                          <div class=\"l-title\">${Title}</div>\r\n                                          <div class=\"l-legend row\"></div>\r\n                                        </div>\r\n                                        <div class=\"row flex-100\">\r\n                                          <div class=\"l-axis-y row\"></div>\r\n                                          <div class=\"col flex-100\">\r\n                                            <div class=\"l-chart-area row flex-100\" style=\"position: relative\">\r\n                                              <svg class=\"l-chart-svg flex-100\" style=\"position: relative; z-index: 1\"></svg>\r\n                                              <div class=\"l-grid col flex-between\"></div>\r\n                                            </div>\r\n                                            <div class=\"l-axis-x row\"></div>\r\n                                           </div>\r\n                                        </div>\r\n                                      </div>`;\r\n                const _Legend     = this.Content.querySelector('.l-legend');\r\n                const _AxisX      = this.Content.querySelector('.l-axis-x');\r\n                const _AxisY      = this.Content.querySelector('.l-axis-y');\r\n                const _ChartArea  = this.Content.querySelector('.l-chart-area');\r\n                const _Grid       = this.Content.querySelector('.l-grid');\r\n                const _Svg        = this.Content.querySelector('.l-chart-svg');\r\n                return {\r\n                    get Legend(){\r\n                        return _Legend;\r\n                    },\r\n                    set Legend(v){\r\n                        _Legend.innerHTML = v;\r\n                    },\r\n                    get AxisX(){\r\n                        return _AxisX;\r\n                    },\r\n                    set AxisX(v){\r\n                        _AxisX.innerHTML = v;\r\n                    },\r\n                    get AxisY(){\r\n                        return _AxisY;\r\n                    },\r\n                    set AxisY(v){\r\n                        _AxisY.innerHTML = v;\r\n                    },\r\n                    get ChartArea(){\r\n                        return _ChartArea;\r\n                    },\r\n                    set ChartArea(v){\r\n                        _ChartArea.innerHTML = v;\r\n                    },\r\n                    get Grid(){\r\n                        return _Grid;\r\n                    },\r\n                    set Grid(v){\r\n                        _Grid.innerHTML = v;\r\n                    },\r\n                    get Svg(){\r\n                        return _Svg;\r\n                    },\r\n                    set Svg(v){\r\n                        _Svg.innerHTML = v;\r\n                    },\r\n                }\r\n            }.bind(this))();\r\n            /*********/\r\n            const Builder = {\r\n                Legend: function(){\r\n                    if (Buffer.Legend !== '')\r\n                        return;\r\n                    //Buffer.Legend = '';\r\n                    let LegendBuilder = Lure.Chart.MakeLegend;\r\n                    if (!this.isCasual){\r\n                        LegendBuilder = Lure.Chart.MakeLegendPie;\r\n                    }\r\n                    for (let i = 0; i< this.Options.Series.length; i++)\r\n                        Buffer.Legend += LegendBuilder(this.Options.Series[i], i);\r\n                    this.Block.Legend = Buffer.Legend;\r\n                }.bind(this),\r\n                AxisX: function(){\r\n                    if (!chart.Options.Labels.Visible)\r\n                    {\r\n                        this.Block.AxisX = '';\r\n                        return;\r\n                    }\r\n                    let labels = chart.Options.Labels.Data;\r\n                    //const style = `transform: rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px; width: ${Buffer.AxisXParams.Width}px; margin-left: ${Buffer.AxisXParams.MarginLeft}px;`;\r\n                    const style = `transform: translate(${Buffer.AxisXParams.MarginLeft}px) rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px ; width: ${Buffer.AxisXParams.Width}px;`;\r\n                    let a = '';\r\n                    for (let i = 0 ; i < labels.length; i++){\r\n                        a += `<div class=\"l-label l-label__x\" style=\"font-family: ${chart.Options.Labels.Font.Family}; font-size: ${chart.Options.Labels.Font.Size}\"><span style=\"${style}\">${labels[i]}</span></div>`\r\n                    }\r\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\r\n                    Buffer.AxisX = a;\r\n                    this.Block.AxisX = a;\r\n                    this.Block.AxisX.style.borderTop = '1px #111 solid';\r\n                }.bind(this),\r\n                AxisY: function () {\r\n                    !this.Options.Labels.Visible\r\n                    return '';\r\n\r\n                }.bind(this),\r\n\r\n\r\n\r\n                MakeAxisY(){\r\n                    let i = 0;  //first scale\r\n                    if (!chart.Options.AxisY.Visible){\r\n                        i = 1;  //skip common scale cuz it invisible\r\n                        if (!chart._ScaleY.Scales || chart._ScaleY.Scales.length < 2)\r\n                            return '';\r\n                    }\r\n                    let AxisYStyle = `font-family: ${chart.Options.Labels.Font.Family}; font-size: ${chart.Options.Labels.Font.Size};`;\r\n                    let accum = '';\r\n                    for (i; i < chart._ScaleY.Scales.length; i++){\r\n                        let index = chart._ScaleY.Dict.indexOf(i);//.filter(x=>x===i && x !==0)[0];\r\n                        let scale = chart._ScaleY.Scales[i];\r\n                        let caption = '';\r\n                        //let a = '';\r\n                        if (i>0)\r\n                            caption = `<div class=\"l-caption\"><div style=\"transform: matrix(0, -1, 1, 0, 0, 0);\">${chart.Options.Series[index].Title}</div></div>`;\r\n                        else if (i === 0 && chart.Options.AxisY.Title)\r\n                            caption = `<div class=\"l-caption\"><div style=\"transform: matrix(0, -1, 1, 0, 0, 0); font-weight: bold;\">${chart.Options.AxisY.Title}</div></div>`;\r\n                        let a = '';\r\n                        for (let j = 0; j< scale.length; j++){\r\n                            a += `<div class=\"l-label l-label__y\"><span>${scale[j]}</span></div>`;\r\n                        }\r\n                        if (i>0)\r\n                            AxisYStyle += ` color: ${chart.Options.Series[index].Color}; font-weight: bold;`;\r\n                        accum += `<div class=\"l-axis-y-scale row\" style=\"${AxisYStyle}\" data-line=\"${i}\">${caption}<div class=\"l-labels col\">${a}</div></div>`;\r\n\r\n                    }\r\n                    return accum;\r\n                },\r\n                MakeAxisX(){\r\n                    if (!chart.Options.Labels.Visible)\r\n                        return '';\r\n                    let labels = chart.Options.Labels.Data;\r\n\r\n                    //const style = `transform: rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px; width: ${Buffer.AxisXParams.Width}px; margin-left: ${Buffer.AxisXParams.MarginLeft}px;`;\r\n                    const style = `transform: translate(${Buffer.AxisXParams.MarginLeft}px) rotate(${Buffer.AxisXParams.Angle}deg); margin-top: ${Buffer.AxisXParams.MarginTop}px ; width: ${Buffer.AxisXParams.Width}px;`;\r\n                    let a = '';\r\n                    for (let i = 0 ; i < labels.length; i++){\r\n                        a += `<div class=\"l-label l-label__x\" style=\"font-family: ${chart.Options.Labels.Font.Family}; font-size: ${chart.Options.Labels.Font.Size}\"><span style=\"${style}\">${labels[i]}</span></div>`\r\n                    }\r\n                    //console.log(`AxisX forecastHeight: ${Math.round(h/4+ (Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))))}`);\r\n                    return a;\r\n                },\r\n                MakeGrid(a,b){\r\n                    if (!chart.Options.Grid.Visible)\r\n                        return '';\r\n                    return Lure.Chart.GetGrid(chart.Options.Labels.Data.length, chart._ScaleY.Scales[0].length-1, chart.Options.Padding);\r\n                },\r\n                MakeGraph(serie, i){\r\n                    let index = chart._ScaleY.Dict[i];\r\n                    let scale = chart._ScaleY.Scales[index];\r\n                    let mm = chart._ScaleY.MinMax[index];\r\n                    let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                    let DataAbscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, chart.Width);\r\n                    let points = Lure.Chart.GetPoints(DataAbscissa, DataOrdinata);\r\n                    return Lure.Chart.GetPath(points, chart.Options.Series[i].Type, i, chart.Options.Series[i].Color, chart.Options.Series[i].Width);\r\n                },\r\n            };\r\n\r\n            const ChartActions = {\r\n                Activate: function (ChartElement) {\r\n                    const tag = ChartElement.dataset['type'];\r\n                    switch (tag){\r\n                        case 'line':\r\n                            ChartActions.ActivateCircle(ChartElement);\r\n                            break;\r\n                        case 'bar':\r\n                            ChartActions.ActivateBar(ChartElement);\r\n                            break;\r\n                        case 'pie':\r\n                            ChartActions.ActivatePie(ChartElement);\r\n                            break;\r\n                    }\r\n\r\n                },\r\n                Disactivate: function (ChartElement) {\r\n                    const tag = ChartElement.dataset['type'];\r\n                    switch (tag){\r\n                        case 'line':\r\n                            ChartActions.DisactivateCircle(ChartElement);\r\n                            break;\r\n                        case 'bar':\r\n                            ChartActions.DisactivateBar(ChartElement);\r\n                            break;\r\n                        case 'pie':\r\n                            ChartActions.DisactivatePie(ChartElement);\r\n                            break;\r\n                    }\r\n                },\r\n                ActivateCircle: function (circle) {\r\n                    let i = parseInt(circle.dataset['line']);\r\n                    let j = parseInt(circle.dataset['item']);\r\n                    let color = circle.attributes['stroke'].value;\r\n\r\n                    //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\r\n                    let width = parseInt(circle.attributes['stroke-width'].value);\r\n                    circle.attributes['fill'].value = color;\r\n                    circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\r\n                    circle.attributes['stroke'].value = \"#fff\";\r\n                },\r\n                ActivateBar: function (bar) {\r\n                    bar.setAttribute('fill-opacity', 0.2);\r\n                    let i = parseInt(bar.dataset['line']);\r\n                    let j = parseInt(bar.dataset['item']);\r\n                },\r\n                ActivatePie: function (pie) {\r\n                    pie.setAttribute('stroke-opacity', 0.2);\r\n                    let i = parseInt(pie.dataset['line']);\r\n                    let j = parseInt(pie.dataset['item']);\r\n                },\r\n                DisactivateCircle: function (circle) {\r\n                    let width = parseInt(circle.attributes['stroke-width'].value);\r\n                    const color = circle.attributes['fill'].value;\r\n                    if (color === '#fff')\r\n                        return;\r\n                    circle.attributes['stroke'].value = color;\r\n                    circle.attributes['fill'].value = \"#fff\";\r\n                    circle.attributes['r'].value -= width;\r\n                },\r\n                DisactivateBar: function (bar) {\r\n                    bar.setAttribute('fill-opacity', 0);\r\n                },\r\n                DisactivatePie: function (pie) {\r\n                    pie.setAttribute('stroke-opacity', 0);\r\n                }\r\n            };\r\n            const Init = {\r\n\r\n                Tooltip: function () {\r\n                    if (Tooltip.Template)\r\n                    {\r\n                        this.Options.Tooltip.Template = Tooltip.Template;\r\n                        return;\r\n                    }\r\n                    if (this.Options.Type === 'line' || this.Options.Type === 'bar'){\r\n                        this.Options.Tooltip.Template = Lure.Plugin.Chart.Core.Defaults.TemplateLabel.Line;\r\n                        return;\r\n                    }\r\n                    if (this.Options.Type === 'pie' || this.Options.Type === 'ring'){\r\n                        this.Options.Tooltip.Template = Lure.Plugin.Chart.Core.Defaults.TemplateLabel.Pie;\r\n                    }\r\n                    //Tooltip.Template?Tooltip.Template : Lure.Plugin.Chart.Core.Defaults.TemplateLabel.Line\r\n                }.bind(this),\r\n                Series: function(force=false){\r\n                    let Se = [];\r\n                    if (this.Options.Series !== null && !force){\r\n                        for (let i = 0; i < this.Options.Series.length; i++){\r\n                            if (this.Options.Series[i].isVisible)\r\n                                Buffer.SeriesCount[this.Options.Series[i].Type.capitalize()]++;\r\n                        }\r\n                        return;\r\n                    }\r\n                    for (let i = 0; i < this._Series.length; i++){\r\n                        let ep = {};\r\n                        ep.Name    = this._Series[i].Name ? this._Series[i].Name                : 'Unnamed';\r\n                        ep.Title   = this._Series[i].Title? this._Series[i].Title               : ep.Name;\r\n                        ep.Color   = this._Series[i].Color? this._Series[i].Color: Lure.Plugin.Chart.Core.Defaults.Color[i]?Lure.Plugin.Chart.Core.Defaults.Color[i]:'#000';\r\n                        ep.Width   = this._Series[i].Width? this._Series[i].Width               : 2;\r\n\r\n                        ep.Data    = JSON.parse(JSON.stringify(this._Series[i].Data));  //TODO ok clone\r\n\r\n                        ep.Type    = this._Series[i].Type ? this._Series[i].Type.toLowerCase()  : (Type?Type.toLowerCase():'line');\r\n                        //debugger;\r\n                        if (ep.Type === 'pie' || ep.Type === 'ring'){\r\n                            if (this.isCasual)\r\n                                this.isCasual = false;\r\n                            ep.Colors = this._Series[i].Colors? this._Series[i].Colors: Lure.Plugin.Chart.Core.Defaults.Color;\r\n                            ep.Width   = this._Series[i].Width? this._Series[i].Width               : 30;\r\n                            ep.Labels  = this._Series[i].Labels? this._Series[i].Labels: (this.Options.Labels.Data?this.Options.Labels.Data: false);\r\n\r\n                        }\r\n\r\n\r\n                        ep.Line    = i;\r\n                        ep.isVisible = (typeof this._Series[i].Visible === 'undefined' || this._Series[i].Visible); //true by default\r\n                        ep.OwnAxis = this._Series[i].OwnAxis;\r\n                        //ep.OwnAxis = Lure.Chart.CheckOwnAxis(ep);\r\n\r\n\r\n                        ep.Point   = this._Series[i].Point;\r\n                        ep.Point   = Lure.Chart.GetSeriePointOptions(ep);\r\n\r\n                        //Buffer.Legend += Lure.Chart.MakeLegend(ep, i);\r\n\r\n                        if (ep.isVisible)\r\n                            Buffer.SeriesCount[ep.Type.capitalize()]++;\r\n                        Se.push(ep);\r\n                    }\r\n                    this.Options.Series = Se;\r\n                }.bind(this),\r\n                AxisY: function () {\r\n                    if (this.Width === LastRender.Width)\r\n                        return;\r\n                    let count = this.Options.AxisY.Visible? 1:0;\r\n                    let len = 0;\r\n                    let width = 0;\r\n                    for (let i = 0; i < this.Options.Series.length; i++){\r\n                        //check special Scales\r\n                        if (this.Options.Series[i].isVisible && this.Options.Series[i].OwnAxis){\r\n                            let len = 0;\r\n                            for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                                let w = Lure.GetTextWidth(this.Options.Series[i].Data[j], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                                if (w > len)\r\n                                    len = this.Options.Series[i].Data[j];\r\n                            }\r\n                            let lenmax = Lure.GetTextWidth(this.Options.Series[i].OwnAxis[1], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                            if (lenmax > len)\r\n                                len = lenmax;\r\n                            //debugger;\r\n                            //width += Lure.GetTextWidth('i'.repeat(len), this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                            width += len + 8;  //8px = (7px) :before.width  + (1px) border\r\n                            let wCapti = Lure.GetTextWidth(this.Options.Series[i].Title, this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                            width += wCapti > 30 ? 30: wCapti; //max-width: 30\r\n                        }\r\n                        //check default scale\r\n                        else if (this.Options.Series[i].isVisible && !Array.isArray(this.Options.Series[i].OwnAxis)){\r\n                            for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                                let w = Lure.GetTextWidth(this.Options.Series[i].Data[j], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                                if (w > len)\r\n                                    len = this.Options.Series[i].Data[j];\r\n                            }\r\n                        }\r\n                    }\r\n                    width += len + 10 +7;\r\n                    Buffer.AxisYWidth = width;\r\n                   // console.log('->Init.AxisY:',width);\r\n                }.bind(this),\r\n                AxisX: function () {\r\n                    if (this.Width === LastRender.Width)\r\n                        return;\r\n                    if (!this.Options.Labels.Visible){\r\n                        Buffer.AxisXParams = {\r\n                            Height: 0,\r\n                            Width: 0,\r\n                            MarginTop:  0,\r\n                            MarginLeft: 0,\r\n                            Angle: 0,\r\n                        };\r\n                        return;\r\n                    }\r\n\r\n                    let maxWidth = 0;\r\n                    for (let i = 0; i < this.Options.Labels.Data.length; i++){\r\n                        let w = Lure.GetTextWidth(this.Options.Labels.Data[i], this.Options.AxisY.Font.Family, this.Options.AxisY.Font.Size);\r\n                        if (w > maxWidth)\r\n                            maxWidth = w;\r\n                    }\r\n                    let w = (this.Content.clientWidth - Buffer.AxisYWidth) / this.Options.Labels.Data.length;\r\n                    w = (this.Content.clientWidth - Buffer.AxisYWidth - w/2) / this.Options.Labels.Data.length;\r\n                    //debugger;\r\n                    this.Options.Padding = w/2;\r\n                    this.Block.AxisX.style.paddingLeft = w/2+'px';\r\n                    let h = 0; //TODO hardcode fix\r\n                    let wFact = maxWidth;\r\n                    let angle;\r\n\r\n                    if (this.Options.Labels.Rotation !== 'auto'){\r\n                        angle = parseFloat(this.Options.Labels.Rotation);\r\n                    }\r\n                    else{\r\n                        let cos = (w)/(wFact);\r\n                        if (cos < 0.15)\r\n                            cos = 0;\r\n                        if (cos > 1)\r\n                            cos = 1;\r\n                        //angle = (-90*(1-cos));\r\n                        //console.log('w',this.Width, w, wFact,cos);\r\n                        angle = -(Math.acos(cos)*180/Math.PI).toFixed(2);\r\n                       /* if (angle >0 )\r\n                            angle = -angle;*/\r\n                        //console.log('angleold', (-90*(1-cos)));\r\n                        //console.log('anglenew', h, parseFloat(getComputedStyle(this.Block.AxisX).lineHeight));\r\n                    }\r\n                    //Lure.Perf(pp, '--calcx--');\r\n                    Buffer.AxisXParams = {\r\n                        Height: Math.round((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2)))) + parseFloat(getComputedStyle(this.Block.AxisX).lineHeight),\r\n                        Width: wFact,\r\n                        MarginTop:  (wFact>w)? ((Math.sqrt(Math.pow(wFact, 2) - Math.pow(w, 2))) - h) : 0,\r\n                        MarginLeft: (wFact>w)? (-w/2):(-(wFact)/2),\r\n                        Angle: angle,\r\n                    }\r\n\r\n\r\n\r\n                }.bind(this),\r\n                ScaleY: function () {\r\n                    this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height), this);\r\n                    return;\r\n                    if (!ctx.isCasual){\r\n                        return {};\r\n                    }\r\n                    let min = series[0].Data[0];\r\n                    let max = series[0].Data[0];\r\n                    let isAutoScale = true;\r\n                    let isAutoStep = true;\r\n                    if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto')\r\n                    {\r\n                        isAutoScale = false;\r\n                        min = ctx.Options.AxisY.Scale[0];\r\n                        max = ctx.Options.AxisY.Scale[1];\r\n                    }\r\n                    if (ctx.Options.AxisY.Scale[2] !== 'auto')\r\n                        isAutoStep = false;\r\n                    let mm = [ [series[0].Data[0],series[0].Data[0]] ];\r\n                    let index = 0;\r\n                    let scales = [];\r\n\r\n                    let sc = {\r\n                        Scales: [],\r\n                        Dict: [],\r\n                        MinMax: null\r\n                    };\r\n                    for (let i = 0; i < series.length; i++){\r\n                        if (!series[i].isVisible)\r\n                            continue;\r\n                        sc.Dict[i] = 0;\r\n                        if (series[i].OwnAxis){\r\n                            index++;\r\n                            if (typeof series[i].OwnAxis[0] !== 'undefined')\r\n                                mm.push(series[i].OwnAxis);\r\n                            else\r\n                                mm.push([series[i].Data[0],series[i].Data[0]]);\r\n                            sc.Dict[i] = index;\r\n                        }\r\n                        for (let j = 0; j < series[i].Data.length; j++){\r\n                            if (isAutoScale){\r\n                                if (series[i].Data[j] < min)\r\n                                    min = series[i].Data[j];\r\n                                if (series[i].Data[j] > max)\r\n                                    max = series[i].Data[j];\r\n                            }\r\n                            if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined'){\r\n                                if (series[i].Data[j] < mm[index][0])\r\n                                    mm[index][0] = series[i].Data[j];\r\n                                if (series[i].Data[j] > mm[index][1])\r\n                                    mm[index][1] = series[i].Data[j];\r\n                            }\r\n                        }\r\n                    }\r\n                    mm[0] = [min, max];\r\n                    sc.MinMax = mm;\r\n                    for (let i = 0; i < mm.length; i++){\r\n                        let order = mm[i][1].toString().length;\r\n                        let step;\r\n                        if (i===0 && !isAutoStep){\r\n                            step = ctx.Options.AxisY.Scale[2];\r\n                        }\r\n                        else{\r\n                            step = mm[i][2]? mm[i][2] : ( (mm[i][1]-mm[i][0] )*40 /height / (Math.pow(10, order-1))/5 ).toFixed(1) * Math.pow(10, order-1)*5;\r\n                        }\r\n                        let s = mm[i][0];\r\n                        let scale = [];\r\n                        if (order < 3 || true){\r\n                            //debugger;\r\n                            while (s <= mm[i][1] + ctx.Options.Series[i].Width/2){\r\n                                scale.push(s);\r\n                                s += step;\r\n                            }\r\n                            scale.push(s);\r\n                            sc.Scales.push(scale);\r\n                        }\r\n                    }\r\n                    return sc;\r\n                }.bind(this),\r\n                Listeners: function () {\r\n                    //Legend actions\r\n                    Lure.AddEventListenerGlobal('mouseover', '.lc-legend-casual-label', function (e) {\r\n                        const i = e.currentTarget.dataset['line'];\r\n                        if (!this.Options.Series[i].isVisible)\r\n                            return;\r\n                        let lines = Lure.SelectAll(`.l-tooltipable[data-line=\"${i}\"]`, chart.Block.Svg);\r\n                        for (let i = 0; i < lines.length; i++){\r\n                            ChartActions.Activate(lines[i]);\r\n                        }\r\n                        let line = Lure.Select(`.l-chart-serie[data-line=\"${i}\"] path`, chart.Block.Svg);\r\n                       // console.log('lines', i, lines, line);\r\n                        if (!line)\r\n                            return;\r\n                        let w = parseFloat(line.getAttribute('stroke-width'));\r\n                        line.setAttribute('stroke-width', w+1);\r\n                    }.bind(this), this.Block.Legend);\r\n                    Lure.AddEventListenerGlobal('mouseout', '.lc-legend-casual-label', function (e) {\r\n                        const i = e.currentTarget.dataset['line'];\r\n                        if (!this.Options.Series[i].isVisible)\r\n                            return;\r\n                        let lines = Lure.SelectAll(`.l-tooltipable[data-line=\"${i}\"]`, chart.Block.Svg);\r\n                        for (let i = 0; i < lines.length; i++){//\r\n                            ChartActions.Disactivate(lines[i]);\r\n                        }\r\n                        let line = Lure.Select(`.l-chart-serie[data-line=\"${i}\"] path`, chart.Block.Svg);\r\n                        if (!line)\r\n                            return;\r\n                        let w = parseFloat(line.getAttribute('stroke-width'));\r\n                        line.setAttribute('stroke-width', w-1);\r\n                    }.bind(this), this.Block.Legend);\r\n\r\n                    Lure.AddEventListenerGlobal('change', '.l-legend-checkbox', function (e) {\r\n                        this.SerieSwitch(e.currentTarget.dataset['line'], e.currentTarget.dataset['item']);\r\n                    }.bind(this), this.Block.Legend);\r\n\r\n                    //Tooltip actions\r\n                    Lure.AddEventListenerGlobal('mouseover', '.l-tooltipable', function (e) {\r\n                        this.Tooltip.Do(e);\r\n                    }, this.Content, this);\r\n                    Lure.AddEventListenerGlobal('mouseout', '.l-tooltipable' , function (e) {\r\n                        chart.Tooltip.Undo(e);           }, this.Content);\r\n                }.bind(this)\r\n            };\r\n            let LastRender = {\r\n                Width: 0,\r\n                Height: 0,\r\n                DataLength: 0,\r\n\r\n            };\r\n\r\n            this.__GetPathLine = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata, this.Options.Padding);\r\n                Buffer.SeriesPoints[line] = points;\r\n\r\n                const n = points.length;\r\n\r\n                let xs = [];        //x\r\n                let ys = [];        //y\r\n                let dys = [];       //dx\r\n                let dxs = [];       //dy\r\n                let ds = [];        //derivative\r\n                let ms = [];        //desired slope (m) at each point using Fritsch-Carlson method\r\n                for(let i = 0; i < n; i++) {\r\n                    xs[i] = points[i][0];\r\n                    ys[i] = points[i][1];\r\n                }\r\n                // Calculate deltas and derivative\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    dys[i] = ys[i + 1] - ys[i];\r\n                    dxs[i] = xs[i + 1] - xs[i];\r\n                    ds[i] = dys[i] / dxs[i];\r\n                }\r\n                // Determine desired slope (m) at each point using Fritsch-Carlson method\r\n                // See: http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\r\n                ms[0] = ds[0];\r\n                ms[n - 1] = ds[n - 2];\r\n                for(let i = 1; i < n - 1; i++) {\r\n                    if(ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0)) {\r\n                        ms[i] = 0;\r\n                    } else {\r\n                        ms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\r\n                            (2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\r\n                            (dxs[i] + 2 * dxs[i - 1]) / ds[i]);\r\n                        if(!isFinite(ms[i])) {\r\n                            ms[i] = 0;\r\n                        }\r\n                    }\r\n                }\r\n                let d = `M ${xs[0]},${ys[0]}`;\r\n                let dots = '<g class=\"mt-chart-dots\">';\r\n                for(let i = 0; i < n - 1; i++) {\r\n                    d += ` C ${xs[i] + dxs[i] / 3},${ys[i] + ms[i] * dxs[i] / 3} ${xs[i + 1] - dxs[i] / 3},${ys[i + 1] - ms[i + 1] * dxs[i] / 3} ${xs[i + 1]},${ys[i + 1]}`;\r\n                    if (serie.Point.Visible)\r\n                        dots += Lure.Chart.GetPathLineDot(xs[i] , ys[i], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                if (serie.Point.Visible)\r\n                    dots += Lure.Chart.GetPathLineDot(xs[n-1] , ys[n-1], line, n-1, serie.Color, serie.Point.Radius );\r\n                dots += '</g>';\r\n                return `<g class=\"l-chart-serie\" data-type=\"Line\" data-line=\"${line}\"><path data-line=\"${line}\" d=\"${d}\" fill=\"none\" stroke=\"${serie.Color}\" stroke-width=\"${serie.Width}\"></path> ${dots}</g>`;\r\n\r\n            }.bind(this);\r\n            this.__GetPathBar = function (serie, line) {\r\n                if (!Buffer.Abscissa || Buffer.Width !== this.Width)\r\n                    Buffer.Abscissa = Lure.Chart.GetAbscissa(chart.Options.Labels.Data, this.Width);\r\n                let index = this._ScaleY.Dict[line];\r\n                let scale = this._ScaleY.Scales[index];\r\n                let mm = chart._ScaleY.MinMax[index];\r\n                //debugger;\r\n                let DataOrdinata = Lure.Chart.GetOrdinata(serie.Data, scale, mm, chart.Height);\r\n                let points = Lure.Chart.GetPoints(Buffer.Abscissa, DataOrdinata, this.Options.Padding);\r\n                Buffer.SeriesPoints[line] = points;\r\n                let height = this.Height;\r\n\r\n                let deilmit = 1;\r\n                if (!this.Options.SeriesOptions.BarStack)\r\n                    deilmit = Buffer.SeriesCount.Bar * 0.8;\r\n                let wd = this.Width/this.Options.Labels.Data.length/2 / deilmit;        //serie.Width;\r\n                let margin = ((wd*1.2) * (Buffer.SeriesBar)) - (  (wd*1.2) *Buffer.SeriesCount.Bar /2 - (wd*1.2)/2) ;\r\n\r\n               // debugger;\r\n\r\n                let bricks = `<g class=\"l-chart-serie\" data-type=\"Bar\" data-line=\"${line}\">`;\r\n                let GradientId = '';\r\n                if (this.Options.SeriesOptions.BarGradient){\r\n                    GradientId = `lc-gradient-${Lure.Chart.Count}`;\r\n                    bricks += `<linearGradient id=\"${GradientId}\"  x1=\"0\" y1=\"0%\"><stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.2)\"/><stop offset=\"33%\" stop-color=\"rgba(255,255,255,0.2)\"/><stop offset=\"100%\" stop-color=\"rgba(0,0,0,0.3)\"/></linearGradient>`;\r\n                }\r\n                // let d = `M ${points[0][0]}  ${points[0][1]}`;\r\n                let dots = '';\r\n                for (let i = 0; i < points.length; i++){\r\n                    let d =`M ${margin+points[i][0]-wd/2} ${height} L ${(margin+points[i][0]+wd/2)} ${height} ${(margin+points[i][0]+wd/2)} ${points[i][1]} ${margin+points[i][0]-wd/2} ${points[i][1]}Z`;\r\n                    // debugger;\r\n                    bricks += `<g class=\"lc-bar-elem\"><path class=\"lc-bar-elem\" data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"${serie.Color}\" stroke=\"#000\" stroke-width=\"0\"></path>`;\r\n                    if (this.Options.SeriesOptions.BarGradient)\r\n                        bricks += `<path class=\"lc-bar-elem-gradient\"  data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"url(#${GradientId})\" ></path>`;\r\n                    bricks += `<path class=\"l-tooltipable\" data-type=\"bar\" data-line=\"${line}\" data-item=\"${i}\" d=\"${d}\" fill=\"#fff\" fill-opacity=\"0\" stroke=\"#fff\" stroke-width=\"0\"></path>`;\r\n                    bricks +='</g>';\r\n                    //dots += Lure.Chart.GetPathLineDot(points[i][0] , points[i][1], line, i, serie.Color, serie.Point.Radius );\r\n                }\r\n                bricks += dots+'</g>';\r\n                //debugger;\r\n                Buffer.SeriesBar++;\r\n                return bricks;\r\n            }.bind(this);\r\n            this.__GetSvgCasual = function () {\r\n                let lines = '';\r\n                let bars  = '';\r\n                for (let i = 0; i < this.Options.Series.length; i++){\r\n                    if (!this.Options.Series[i].isVisible)\r\n                        continue;\r\n                    switch (this.Options.Series[i].Type){\r\n                        case 'line':\r\n                            lines += this.__GetPathLine(this.Options.Series[i], i);\r\n                            break;\r\n                        case 'bar':\r\n                            bars += this.__GetPathBar(this.Options.Series[i], i);\r\n                            break;\r\n                    }\r\n                }\r\n                return bars+lines;\r\n            }.bind(this);\r\n            this.__GetSvgPie = function () {\r\n                let sectors = '';\r\n                let d = this.Height< this.Width? this.Height*0.9:this.Width*0.9;\r\n                //let ss = this.Options.Series.filter(x=>x.isVisible);\r\n\r\n                for (let i = 0; i < this.Options.Series.length; i++){\r\n                    if (!this.Options.Series[i].isVisible)\r\n                        continue;\r\n                    let sum = 0;\r\n                    let anglestart = -45;\r\n                    let r = d/4 * (this.Options.Series.length-i)/(Buffer.SeriesCount.Pie+Buffer.SeriesCount.Ring);\r\n                    let wd = 2*r;\r\n                    if (this.Options.Series[i].Type === 'ring'){\r\n                        wd = this.Options.Series[i].Width;\r\n                        r = r*2 - wd/2;\r\n\r\n                    }\r\n                    //let sd = this.Options.Series[i].Data.filter(x=>x);\r\n                    for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                        if (this.Options.Series[i].Data[j] !== null)\r\n                            sum += this.Options.Series[i].Data[j];\r\n                    }\r\n                    for (let j = 0; j < this.Options.Series[i].Data.length; j++){\r\n                        if (!this.Options.Series[i].Data[j])\r\n                            continue;\r\n                        let angle = this.Options.Series[i].Data[j]/sum * 360;\r\n                        if (angle === 360)\r\n                        {\r\n                            angle = 359.99;\r\n                            anglestart = 0;\r\n                        } //else not draws;\r\n                        //debugger;\r\n                        sectors += `<g>`;\r\n                        sectors += `<path d=\"${Lure.Chart.PieArc(this.Width/2, this.Height/2, r, anglestart, anglestart+angle)}\" fill=\"none\" stroke=\"${this.Options.Series[i].Colors[j]}\" stroke-width=\"${wd}\" stroke-opacity=\"1\"></path>`;\r\n                        sectors += `<path class=\"l-tooltipable\" data-type=\"pie\" data-line=\"${i}\" data-item=\"${j}\" d=\"${Lure.Chart.PieArc(this.Width/2, this.Height/2, r, anglestart, anglestart+angle)}\" fill=\"none\" stroke=\"#fff\" stroke-width=\"${wd}\" stroke-opacity=\"0\"></path>`;\r\n                        sectors += `</g>`;\r\n                        anglestart += angle;\r\n                        //debugger;\r\n                    }\r\n                }\r\n                //debugger;\r\n                return sectors;\r\n            }.bind(this);\r\n\r\n            function Refresh(){\r\n                console.log('------refresh------');\r\n                Buffer.SeriesBar = 0;\r\n                Buffer.SeriesCount.Line = 0;\r\n                Buffer.SeriesCount.Bar = 0;\r\n                Buffer.SeriesCount.Pie = 0;\r\n                Buffer.SeriesCount.Ring = 0;\r\n                Buffer.Svg = '';\r\n                pp.Reset();\r\n                //-1. check Tooltip Temptale\r\n                //Init.Tooltip();\r\n                //pp.Perf('Check-Tooltip');\r\n                //0. build legend\r\n\r\n                Init.Series();\r\n                pp.Perf('Init-Series');\r\n\r\n                Builder.Legend();\r\n                pp.Perf('Render-Legend');\r\n\r\n                //1. Init Y width\r\n\r\n                Init.AxisY();\r\n                pp.Perf('Init-AxisY');\r\n                //2. Init X height, and build AxisX cuz we have Y width.\r\n                //Buffer.ParametersAxisX = Builder.CalcAxisX();\r\n                Init.AxisX();\r\n                Builder.AxisX();\r\n                pp.Perf('Init-AxisX');\r\n                //3. Init scales Y axis\r\n\r\n                Init.ScaleY();\r\n                //this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.ParametersAxisX.Height), this);\r\n                //this._ScaleY = Lure.Chart.GetScaleY(this.Options.Series, (this.Height-Buffer.AxisXParams.Height), this);\r\n                pp.Perf('Init-AxisYScales');\r\n\r\n\r\n                //this.Block.AxisX = Builder.MakeAxisX();\r\n                //this.Block.AxisX.style.height = Buffer.AxisXParams.Height+'px';\r\n\r\n\r\n                this.Block.Grid  = Builder.MakeGrid();\r\n                pp.Perf('Render-Grid');\r\n\r\n                this.Block.AxisY = Builder.MakeAxisY();\r\n                pp.Perf('Render-AxisY');\r\n                if (this.isCasual)\r\n                {\r\n                    this.Block.Svg   = chart.__GetSvgCasual();\r\n                }\r\n                else\r\n                    this.Block.Svg   = chart.__GetSvgPie();\r\n                this.Block.AxisY.style.height = this.Height+'px';\r\n                pp.Perf('Render-Svg');\r\n\r\n                let lines = Lure.SelectAll('.l-chart-serie[data-type=\"Line\"] path', this.Content);\r\n                LastRender.Height = this.Height;\r\n                LastRender.Width = this.Width;\r\n                lines.forEach(function (item) {\r\n                    const dash = item.getTotalLength();\r\n                    item.style.strokeDasharray = dash;\r\n                    item.style.strokeDashoffset = dash;\r\n                });\r\n                pp.Perf('Animations-add');\r\n                pp.Elapsed('-elapsed-');\r\n            }\r\n\r\n\r\n            /********************************************************************************/\r\n            /*<tooltips>*/\r\n            Init.Tooltip();\r\n            this.Tooltip = new Lure.Content({\r\n                Name: 'Tooltipchek',\r\n                Target: this.Block.ChartArea,\r\n                Content: `<div class=\"mt-chart-tooltip\">\r\n                        <div class=\"val\">${this.Options.Tooltip.Template}</div>\r\n                      </div>`,\r\n                Visible: false,\r\n                Controller: {\r\n                    Data: {},\r\n                },\r\n                BeforeShow: function (a,b) {\r\n\r\n                },\r\n                Prop: function () {\r\n                    this._Timer = null;\r\n                    this._Timer2 = null;\r\n                    this.isInit = false;\r\n                },\r\n                Shower: function () {\r\n                    clearTimeout(this._Timer);\r\n                    clearTimeout(this._Timer2);\r\n                    this.Content.style.display = '';\r\n                    this.Content.style.opacity = '1';\r\n                },\r\n                Hider: function () {\r\n                    clearTimeout(this._Timer);\r\n                    this._Timer = setTimeout(\r\n                        function () {\r\n                            this.Content.style.opacity = '0';\r\n                            this._Timer2 = setTimeout(function () {\r\n                                this.Content.style.display = 'none';\r\n                            }.bind(this), 200)\r\n\r\n                        }.bind(this), 800);\r\n                },\r\n                Show: function (options) {\r\n                    clearTimeout(this._Timer);\r\n                    this.Data.Name = options.data[0];\r\n                    this.Data.Value = options.data[1];\r\n                    this.Refresh();\r\n                    this.Content.style.left = (options.pos[0] + 7)+\"px\";\r\n                    this.Content.style.top = (options.pos[1] - this.Content.clientHeight - 7)+\"px\";\r\n                    this.Content.style.backgroundColor = options.color;\r\n                    if (!this.isInit){\r\n                        this.Content.style.transition = '100ms all ease-in';\r\n                        this.isInit = true;\r\n                    }\r\n                    //this._Timer = setTimeout(this.Hide, 2000);\r\n                },\r\n                Methods: function () {\r\n                    this.Do = function (e) {\r\n                        let tag = e.currentTarget.dataset['type'];\r\n                        switch (tag){\r\n                            case 'line':\r\n                                this.DoCircle(e);\r\n                                break;\r\n                            case 'bar':\r\n                                this.DoBar(e);\r\n                                break;\r\n                            case 'pie':\r\n                                this.DoPie(e);\r\n                                break;\r\n\r\n                        }\r\n\r\n\r\n                    }.bind(this);\r\n                    this.DoCircle = function (e) {\r\n                        let circle = e.currentTarget;\r\n                        let i = parseInt(circle.dataset['line']);\r\n                        let j = parseInt(circle.dataset['item']);\r\n                        let color = circle.attributes['stroke'].value;\r\n                        //console.log(` parseInt(circle.attributes['r'].value`,  parseInt(circle.attributes['r'].value) );\r\n                        let width = parseInt(circle.attributes['stroke-width'].value);\r\n                        circle.attributes['fill'].value = color;\r\n                        circle.attributes['r'].value = parseInt(circle.attributes['r'].value) + width;\r\n                        circle.attributes['stroke'].value = \"#fff\";\r\n\r\n\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [Series[i].Name, Series[i].Data[j]],\r\n                            color: color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n                    this.DoBar = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        bar.setAttribute('fill-opacity', 0.2);\r\n                        let i = parseInt(bar.dataset['line']);\r\n                        let j = parseInt(bar.dataset['item']);\r\n                        // bar.attributes['stroke-width'].value = 2;\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\r\n                            color: chart.Options.Series[i].Color,\r\n                            pos: Buffer.SeriesPoints[i][j]  //[e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n                    this.DoPie = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        bar.setAttribute('stroke-opacity', 0.2);\r\n                        let i = parseInt(bar.dataset['line']);\r\n                        let j = parseInt(bar.dataset['item']);\r\n                        // bar.attributes['stroke-width'].value = 2;\r\n                        //console.log('', i, j, Buffer.SeriesPoints[i][j], [e.offsetX, e.offsetY]);\r\n                        let o = {\r\n                            data: [chart.Options.Series[i].Labels? chart.Options.Series[i].Labels[j]: chart.Options.Series[i].Name, chart.Options.Series[i].Data[j]],\r\n                            color: chart.Options.Series[i].Colors[j],\r\n                            pos: [e.offsetX, e.offsetY]\r\n                        };\r\n                        this.Show(o);\r\n                    }.bind(this);\r\n\r\n                    this.Undo = function (e) {\r\n                        let tag = e.currentTarget.dataset['type'];\r\n                        switch (tag){\r\n                            case 'line':\r\n                                this.UndoCircle(e);\r\n                                break;\r\n                            case 'bar':\r\n                                this.UndoBar(e);\r\n                                break;\r\n                            case 'pie':\r\n                                this.UndoPie(e);\r\n                                break;\r\n                        }\r\n                    };\r\n                    this.UndoCircle = function (e) {\r\n                        let circle = e.currentTarget;\r\n                        let width = parseInt(circle.attributes['stroke-width'].value);\r\n                        circle.attributes['stroke'].value = circle.attributes['fill'].value;\r\n                        circle.attributes['fill'].value = \"#fff\";\r\n                        circle.attributes['r'].value -= width;\r\n                        this.Hide();\r\n                    };\r\n                    this.UndoBar = function (e) {\r\n                        let bar = e.currentTarget;\r\n                        bar.setAttribute('fill-opacity', 0);\r\n                        this.Hide();\r\n                    };\r\n                    this.UndoPie = function (e) {\r\n                        let pie = e.currentTarget;\r\n                        pie.setAttribute('stroke-opacity', 0);\r\n                        this.Hide();\r\n                    }\r\n\r\n                },\r\n                AfterBuild: function () {\r\n\r\n                }\r\n            });\r\n\r\n            /*</tooltips>*/\r\n\r\n            /** responsiblility\r\n            this._TimerRefresh = null;\r\n            this._IntervalResponse = setInterval(function () {\r\n                if (this.Width !== LastRender.Width || this.Height !== LastRender.Height){\r\n                    clearTimeout(this._TimerRefresh);\r\n                    console.log('[changed]');\r\n                    LastRender.Height = this.Height;\r\n                    LastRender.Width = this.Width;\r\n                    this._TimerRefresh = setTimeout(function () {\r\n                        console.log('[redraw]');\r\n                        Refresh.call(this);\r\n\r\n\r\n                    }.bind(this) ,200);\r\n                }\r\n            }.bind(this), 200);\r\n            */\r\n            this.Buffer = Buffer;\r\n\r\n            // Init\r\n            this.Width;   //just init DOM link\r\n            Init.Listeners();\r\n            pp.Perf('Constructor');\r\n            Refresh.call(this);\r\n            //**  API  **//\r\n            this.SerieSwitch = function (i, j) {\r\n                if (!this.Options.Series[i])\r\n                    return;\r\n                let ch = Lure.Select(`.l-legend-serie[data-line=\"${i}\"] .l-legend-checkbox`, this.Block.Legend);\r\n                if (this.isCasual){\r\n                    this.Options.Series[i].isVisible = !this.Options.Series[i].isVisible;\r\n\r\n                    ch.checked = this.Options.Series[i].isVisible;\r\n                    if (this.Options.Series.filter(x=>x.isVisible).length < 1)\r\n                    {\r\n                        this.Options.Series[i].isVisible = !this.Options.Series[i].isVisible;\r\n                        ch.checked = true;\r\n                        return;\r\n                    }\r\n                }else{\r\n                    this.Options.Series[i].Data[j] = this.Options.Series[i].Data[j] !==null ? null: this._Series[i].Data[j];\r\n                    /*if (this.Options.Series[i].Data.filter(x=>x).length < 1)\r\n                    {\r\n                        this.Options.Series[i].Data[j] = this.Options.Series[i]? null: this._Series[i].Data[j];\r\n                        ch.checked = true;\r\n                        return;\r\n                    }*/\r\n                }\r\n                this.Refresh();\r\n            }.bind(this);\r\n\r\n            this.Refresh = function () {\r\n                Refresh.call(this);\r\n            }.bind(this);\r\n            this.Redraw = function () {\r\n\r\n            }.bind(this);\r\n        }\r\n        get Height(){\r\n            return this.Block.Svg.clientHeight;\r\n        }\r\n        get Width(){\r\n            return this.Block.Svg.clientWidth - this.Options.Padding;\r\n        }\r\n        /*statics*/\r\n        static GetSeriePointOptions(serie, isGraph){\r\n            let p = serie.Point ? serie.Point : {};\r\n            p.Visible = (typeof p.Visible === 'undefined' || p.Visible);\r\n            p.Radius = p.Radius? p.Radius : (4+serie.Width/5);\r\n            if (Number.isNaN(p.Radius))\r\n                debugger;\r\n            return p;\r\n        }\r\n        static GetScaleY(series, height, ctx){\r\n            if (!ctx.isCasual){\r\n                return [];\r\n            }\r\n            let min = series[0].Data[0];\r\n            let max = series[0].Data[0];\r\n            let isAutoScale = true;\r\n            let isAutoStep = true;\r\n            if (ctx.Options.AxisY.Scale[0] !== 'auto' && ctx.Options.AxisY.Scale[1] !== 'auto')\r\n            {\r\n                isAutoScale = false;\r\n                min = ctx.Options.AxisY.Scale[0];\r\n                max = ctx.Options.AxisY.Scale[1];\r\n            }\r\n            if (ctx.Options.AxisY.Scale[2] !== 'auto')\r\n                isAutoStep = false;\r\n            let mm = [ [series[0].Data[0],series[0].Data[0]] ];\r\n            let index = 0;\r\n            let scales = [];\r\n\r\n            let sc = {\r\n                Scales: [],\r\n                Dict: [],\r\n                MinMax: null\r\n            };\r\n            for (let i = 0; i < series.length; i++){\r\n                if (!series[i].isVisible)\r\n                    continue;\r\n                sc.Dict[i] = 0;\r\n                if (series[i].OwnAxis){\r\n                    index++;\r\n                    if (typeof series[i].OwnAxis[0] !== 'undefined')\r\n                        mm.push(series[i].OwnAxis);\r\n                    else\r\n                        mm.push([series[i].Data[0],series[i].Data[0]]);\r\n                    sc.Dict[i] = index;\r\n                }\r\n                for (let j = 0; j < series[i].Data.length; j++){\r\n                    if (isAutoScale){\r\n                        if (series[i].Data[j] < min)\r\n                            min = series[i].Data[j];\r\n                        if (series[i].Data[j] > max)\r\n                            max = series[i].Data[j];\r\n                    }\r\n                    if (series[i].OwnAxis && typeof series[i].OwnAxis[0] === 'undefined'){\r\n                        if (series[i].Data[j] < mm[index][0])\r\n                            mm[index][0] = series[i].Data[j];\r\n                        if (series[i].Data[j] > mm[index][1])\r\n                            mm[index][1] = series[i].Data[j];\r\n                    }\r\n                }\r\n            }\r\n            mm[0] = [min, max];\r\n            sc.MinMax = mm;\r\n            const magicConst = 20;//TODO line-height or not to do\r\n\r\n            for (let i = 0; i < mm.length; i++){\r\n                let d = mm[i][1]-mm[i][0];\r\n                let order = Lure.GetNumberOrder(d);\r\n                let step;\r\n                let divider;\r\n                const pow = Math.pow(10, order);\r\n\r\n                //debugger;\r\n                const p = 10*pow;\r\n                if (d > (p/2))\r\n                    divider = 1000*pow;\r\n                else\r\n                    divider = 500*pow;\r\n                if (d < pow*1.5)\r\n                    divider =  divider/10;\r\n                if (i===0 && !isAutoStep){\r\n                    step = ctx.Options.AxisY.Scale[2];\r\n                }\r\n                else{\r\n                    step = mm[i][2]? mm[i][2] : ( Lure.RoundBy( d * magicConst/height *1000, divider)/1000  );//.toFixed(1)*1;\r\n                }\r\n                let s = mm[i][0];\r\n                let scale = [];\r\n                if (step < 0)\r\n                    debugger;\r\n                if (order < 3 || true){\r\n                    //debugger;\r\n                    while (s < mm[i][1] + ctx.Options.Series[i].Width){\r\n                        scale.push(s);\r\n                        s += step;\r\n                        if (order <0 || step < 1)\r\n                          s=s.toFixed(1+Math.abs(order))*1;   //floating .000000000001\r\n                    }\r\n                    scale.push(s);\r\n                    sc.Scales.push(scale);\r\n                }\r\n            }\r\n            return sc;\r\n        }\r\n\r\n\r\n        static GetAbscissa(labels, width){\r\n            const stepX = width / (labels.length);\r\n            return labels.map(function(a,i){return i*stepX});\r\n        }\r\n        static GetOrdinata(serie, scale, mm, height){\r\n            let min = mm[0];\r\n            let max = mm[1];\r\n            const scaleCoefficient = scale[scale.length-1] / max;\r\n            let ordinata = [];\r\n            for (let j= 0; j < serie.length; j++){\r\n                ordinata.push( height - (  (serie[j] - min) * height/(max-min)/scaleCoefficient )  );\r\n            }\r\n            //console.log('Y', Y);\r\n            //console.log('ordinate', ordinate);\r\n            //console.log(`min=${min} max=${max}`, height);\r\n            //ordinata.push(ordinate);\r\n            //console.log('ordinata', ordinata);\r\n            return ordinata;\r\n\r\n\r\n\r\n        }\r\n        static GetPoints(X,Y, padding = 0){\r\n            let points = [];\r\n            //let length = X.length >= Y.length ? X.length:Y.length;\r\n            for (let i = 0; i < Y.length; i++){\r\n                points.push([X[i] + padding, Y[i]]);\r\n            }\r\n            return points;\r\n        }\r\n        static GetPathLineDot(x,y, i,j, color, width){\r\n            return `<circle class=\"mt-chart-point l-tooltipable\" data-type=\"line\" data-line=\"${i}\" data-item=\"${j}\" cx=\"${x}\" cy=\"${y}\" r=\"${width}\" stroke=\"${color}\" stroke-width=\"2\" fill=\"#fff\" ></circle>`\r\n\r\n        }\r\n\r\n        static PolarToCartesius(centerX, centerY, radius, angleInDegrees) {\r\n            let angleInRadians = (angleInDegrees-0) * Math.PI / 180;\r\n\r\n            return {\r\n                x: centerX + (radius * Math.cos(angleInRadians)),\r\n                y: centerY + (radius * Math.sin(angleInRadians))\r\n            };\r\n        }\r\n        static PieArc(x, y, radius, startAngle, endAngle){\r\n            //debugger;\r\n            let start = Lure.Chart.PolarToCartesius(x, y, radius, endAngle);\r\n            let end = Lure.Chart.PolarToCartesius(x, y, radius, startAngle);\r\n\r\n            let largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n            let d = [\r\n                \"M\", start.x, start.y,\r\n                \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\r\n            ].join(\" \");\r\n\r\n            return d;\r\n        }\r\n\r\n        /*builder*/\r\n        static MakeLegend(Serie, i){\r\n            let id = `lc-legeng_ch${Lure.Chart.Count}${i}`;\r\n            return `<div class=\"l-legend-serie row\" data-line=\"${i}\">\r\n                      <input class=\"l-legend-checkbox\" type=\"checkbox\" ${Serie.isVisible? 'checked=\"checked\"':''} id=\"${id}\" data-line=\"${i}\">\r\n                      \r\n                      <label class=\"l-legend-label lc-legend-casual-label\" for=\"${id}\" data-line=\"${i}\" style=\"cursor: pointer\"><div class=\"l-legend-icon\" style=\"background-color: ${Serie.Color}\"></div><span>${Serie.Name}</span></label>\r\n                    </div>`;\r\n        }\r\n        static MakeLegendPie(Serie, i){\r\n            let id = `lc-legeng_ch${Lure.Chart.Count}${i}`;\r\n            let acc = '';\r\n            for (let j =0; j < Serie.Data.length; j++){\r\n                acc += `<div class=\"l-legend-serie row\" data-line=\"${i}\">\r\n                      <input class=\"l-legend-checkbox\" type=\"checkbox\" ${Serie.isVisible? 'checked=\"checked\"':''} id=\"${id}${j}\" data-line=\"${i}\" data-item=\"${j}\">\r\n                      \r\n                      <label class=\"l-legend-label  lc-legend-pie-label\" for=\"${id}${j}\"  style=\"cursor: pointer\"><div class=\"l-legend-icon\" style=\"background-color: ${Serie.Colors[j]}\"></div><span>${Serie.Labels[j]}</span></label>\r\n                    </div>`;\r\n            }\r\n            return acc;\r\n        }\r\n        static GetGrid(sizeX, sizeY, padding=0){\r\n            let grid = ``;\r\n            for (let i = 0; i < sizeY; i++){\r\n                grid += `<div class=\"l-grid-row row flex-100 flex-between\" >`;\r\n                for (let j = 0; j < sizeX; j++) {\r\n                    if (j === 0)\r\n                        grid += `<div class='l-grid-cell flex-100' style=\"width: ${padding}px; max-width: ${padding}px\"></div>`;\r\n                    grid += `<div class='l-grid-cell flex-100'></div>`;\r\n                }\r\n                grid += `</div>`;\r\n            }\r\n            grid += ``;\r\n            return grid;\r\n        }\r\n    }\r\n};\r\n\r\nLure.Chart = Lure.Plugin.Chart.Chart;\r\nLure.Chart.Count = 0;\r\n\r\n\r\nLure._GenerateStrin2g = function (prefix='') {\r\n    let gen = prefix+(Math.random().toString(36)+Math.random().toString(36)+Math.random().toString(36)).replace(\"0.\", '').replace(/[\\d]+/, '').substring(0,1);\r\n    if (Lure.Select(`#${gen}`)){\r\n        gen = Lure._GenerateString(prefix);\r\n    }\r\n    return gen;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}